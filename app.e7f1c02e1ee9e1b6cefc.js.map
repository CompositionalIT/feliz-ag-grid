{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/.fable/fable-library.3.1.11/Util.js","webpack:///./src/.fable/fable-library.3.1.11/Types.js","webpack:///./src/.fable/fable-library.3.1.11/Reflection.js","webpack:///./src/.fable/fable-library.3.1.11/Option.js","webpack:///./src/.fable/fable-library.3.1.11/Int32.js","webpack:///./src/.fable/fable-library.3.1.11/Numeric.js","webpack:///./src/.fable/fable-library.3.1.11/lib/long.js","webpack:///./src/.fable/fable-library.3.1.11/Long.js","webpack:///./src/.fable/fable-library.3.1.11/Date.js","webpack:///./src/.fable/fable-library.3.1.11/RegExp.js","webpack:///./src/.fable/fable-library.3.1.11/String.js","webpack:///./src/.fable/fable-library.3.1.11/Array.js","webpack:///./src/.fable/Feliz.1.65.0/Interop.fs.js","webpack:///./src/cit-logo.png","webpack:///./src/.fable/fable-library.3.1.11/List.js","webpack:///./src/.fable/Feliz.Bulma.2.18.0/ElementBuilders.fs.js","webpack:///./src/.fable/fable-library.3.1.11/FSharp.Collections.js","webpack:///./src/.fable/fable-library.3.1.11/System.Text.js","webpack:///./src/.fable/fable-library.3.1.11/FSharp.Core.js","webpack:///./src/.fable/fable-library.3.1.11/Seq.js","webpack:///./src/.fable/Feliz.1.65.0/React.fs.js","webpack:///./src/.fable/Feliz.1.65.0/ReactInterop.js","webpack:///./src/.fable/fable-library.3.1.11/Choice.js","webpack:///./src/.fable/Fable.Promise.2.0.0/Promise.fs.js","webpack:///./src/.fable/fable-library.3.1.11/MapUtil.js","webpack:///./src/.fable/Fable.Fetch.2.1.0/Fetch.fs.js","webpack:///./src/.fable/fable-library.3.1.11/lib/big.js","webpack:///./src/.fable/fable-library.3.1.11/Decimal.js","webpack:///./src/.fable/fable-library.3.1.11/Map.js","webpack:///./src/.fable/fable-library.3.1.11/BigInt/n.js","webpack:///./src/.fable/fable-library.3.1.11/BigInt/z.js","webpack:///./src/.fable/fable-library.3.1.11/BigInt.js","webpack:///./src/.fable/fable-library.3.1.11/TimeSpan.js","webpack:///./src/.fable/Thoth.Json.4.0.0/Types.fs.js","webpack:///./src/.fable/Thoth.Json.4.0.0/Encode.fs.js","webpack:///./src/.fable/fable-library.3.1.11/Guid.js","webpack:///./src/.fable/fable-library.3.1.11/DateOffset.js","webpack:///./src/.fable/fable-library.3.1.11/Set.js","webpack:///./src/.fable/Thoth.Json.4.0.0/Decode.fs.js","webpack:///./src/.fable/Thoth.Fetch.2.0.0/Fetch.fs.js","webpack:///./src/.fable/Feliz.AgGrid.0.0.4/AgGrid.fs.js","webpack:///./src/Components.fs.js","webpack:///./src/Main.fs.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isArrayLike","x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","sameConstructor","y","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","done","Error","getEnumerator","GetEnumerator","iterator","toIterator","en","hasNext","undefined","Lazy","factory","isValueCreated","createdValue","padWithZeros","str","toString","padLeftAndRightWithZeros","lengthLeft","lengthRight","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","idMap","has","set","count","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","equalArrays","equals","Equals","isEquatable","compareDates","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","compareArraysWith","compare","CompareTo","isComparable","compareObjects","createObj","fields","obj","kv","WeakMap","uncurry","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","curry","mapCurriedArgs","fn","mappings","arg","mapArg","idx","mapping","expectedArity","actualArity","res","seqToString","self","callStack","cons","entries","join","String","Union","concat","fieldStr","withParens","indexOf","unionToString","tag","other","cases","recordToJSON","recordToString","recordGetHashCode","recordEquals","thisNames","recordCompareTo","Record","FSharpRef","contentsOrGetter","setter","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","getHashCode","getGenerics","fullnameHash","genHashes","t1","t2","getRecordElements","k1","v1","k2","v2","record_type","option_type","generic","array_type","obj_type","string_type","int32_type","info","lastIndexOf","substr","gen","endsWith","getElementType","_a","isGenericType","isEnum","getGenericTypeDefinition","getEnumUnderlyingType","getEnumValues","getEnumCase","parseEnum","parseInt","isNaN","getUnionCases","getTupleElements","isTuple","isUnion","isRecord","startsWith","getUnionCaseFields","uci","makeUnion","expectedLength","NumberStyles","Some","some","defaultArg","opt","defaultValue","getRange","unsigned","bitsize","isValid","style","exec","replace","prefix","digits","getInvalidDigits","AllowHexSpecifier","getRadix","test","regexMatch","sign","validResponse","parse","Number","umin","umax","min","max","tryParse","defValue","contents","op_UnaryNegation_Int32","symbol","isNumeric","multiply","toFixed","dp","toPrecision","sd","toExponential","toHex","wasm","WebAssembly","Instance","Module","Uint8Array","e","Long","low","high","isLong","toJSON","fromBytes","toBytes","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","substring","radixToPower","size","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","div","divide","rem1","subtract","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","shiftRightUnsigned","shiftLeft","shiftRight","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","numBits","le","hi","lo","toBytesLE","toBytesBE","bytes","fromBytesLE","fromBytesBE","LongLib","op_Addition","op_Multiply","op_Division","op_Modulus","rem_u","rem_s","op_UnaryNegation","op_BitwiseAnd","fromInteger","xh","_bitsize","maxValue","getMaxValue","toUpperCase","padStart","offsetRegex","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","match","rep","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","dateToStringWithOffset","_b","_c","dateWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","_provider","DateTime","parseRaw","input","trim","baseDate","timeInSeconds","timeParts","split","parseFloat","offsetParts","offsetInMinutes","detectUTC","_err","pattern","options","flags","RegExp","escape","matches","reg","lastIndex","global","fsFormatRegExp","interpolateRegExp","formatRegExp","isLessThan","numericCompare","printf","cont","strParts","strIdx","matchIndex","index","createPrinter","_strParts","_matches","_result","padArg","args","_padLength","precision","padLength","formatReplacement","interpolate","valIdx","continuePrint","toText","toFail","toLowerCase","dateToString","zeroFlag","minusFlag","ch","padLeft","_","intPart","decimalPart","delimiter","xs","from","isRight","Helpers_allocateArrayFromCons","differentLengths","fill","target","targetIndex","start","source","initialize","initializer","fold","folder","state","array","delegateArg0","delegateArg1","foldBack","reduceRight","foldBack2","array1","array2","acc","foldBackIndexed2","_arg1","Interop_reactApi","react","FSharpList","head","tail","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","xt","yt","i_mut","h_mut","ListEnumerator$1","ListEnumerator$1_$ctor_3002E699","it","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Length","FSharpList__get_Head","SR_inputListWasEmpty","FSharpList__get_Tail","empty","singleton","isEmpty","toArray","reverse","ofArrayWithTail","tail_1","ofArray","append","ys","Helpers_combineClasses","cn","tupledArg","classes","props","Helpers_extractClasses","ComparisonIdentity_Structural","comparer","e1","e2","Compare","x_1","LanguagePrimitives_FastGenericComparer","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","Dispose","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","started","curr","value_1","finish","matchValue_1","checkNonNull","argName","Operators_NullArg","mkSeq","Enumerator_Seq_$ctor_673A07F2","ofSeq","delay","generator","sources","outerOpt","innerOpt","finished","inner","outer","inner_1","outer_1","ie","Enumerator_concat","toArray_1","toList","ofArray_1","xs_3","root","node","enumerator","xs_5","t_2","ofSeq_1","generate","generateIndexed","contains","found","iterate","action","unitVar0","e_1","mapIndexed","ReactInterop_useEffectWithDeps","getDisposable","deps","useEffectReact","disposable","React_createDisposable_3A5B6456","useReact_useEffectOnce_3A5B6456","effect","dependencies","_arg4","useReact_useEffect_Z101E1A95","useState","FSharpResult$2","Result_Map","PromiseBuilder","PromiseBuilder__Delay_62FBFDE1","then","f1","f2","er","Promise","reject","resolve","er_1","catch","er_2","er_3","PromiseBuilder__Run_212F1D4B","success","fail","CaseRules","dashify","separator","charAt","changeCase","caseRule","keyValueList","definedCaseRule","kvPair","assign","tryGetValue","Types_HttpRequestHeaders","Types_RequestProperties","P","_this","cmp","NAME","INVALID","INVALID_DP","NUMERIC","nl","search","round","Big","DP","RM","rm","more","xc","findIndex","xci","unshift","pop","stringify","k","z","NE","PE","isneg","yc","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","mod","ygtx","times","one","sqrt","valueOf","_Big_","normalize","version","Decimal","MapTreeLeaf$2","MapTreeLeaf$2_$ctor_5BDDA1","MapTreeLeaf$2__get_Key","MapTreeLeaf$2__get_Value","MapTreeNode$2","left","right","MapTreeNode$2_$ctor_499A11FD","MapTreeNode$2__get_Left","MapTreeNode$2__get_Right","MapTreeNode$2__get_Height","MapTreeModule_size","MapTreeModule_sizeAux","acc_mut","m_mut","m2","MapTreeModule_mk","hl","hr","m_2","MapTreeModule_rebalance","m2_2","m_3","m2_3","t1h","t2h","matchValue_2","matchValue_3","MapTreeModule_add","MapTreeModule_empty","MapTreeModule_tryFind","comparer_mut","k_mut","MapTreeModule_iter","MapTreeModule_iterOpt","f_mut","MapTreeModule_mapi","MapTreeModule_mapiOpt","l2","r2","MapTreeModule_copyToArray","arr","MapTreeModule_ofArray","forLoopVar","MapTreeModule_ofSeq","fold_1","MapTreeModule_ofList","e_mut","patternInput","MapTreeModule_mkFromEnumerator","MapTreeModule_MapIterator$2","stack","MapTreeModule_collapseLHS","stack_mut","isEmpty_1","empty_1","rest","MapTreeModule_mkIterator","MapTreeModule_current","MapTreeModule_alreadyFinished","MapTreeModule_notStarted","MapTreeModule_mkIEnumerator","MapTreeModule_moveNext","FSharpMap","tree","this$","combineHash","activePatternResult5203","FSharpMap__ComputeHashCode","that","m1","e1c","e2c","map_1","b1","b2","compareWith","kvp1","kvp2","FSharpMap__ContainsKey","FSharpMap__get_Item","FSharpMap__get_Count","thisArg","iterate_1","FSharpMap_$ctor","FSharpMap_Create","MapTreeModule_find","MapTreeModule_mem","table","FSharpMap__Add","tryFind","FSharpMap__TryFind","BigNat","bound","BigNatModule_FFT_pow32","x_mut","n_mut","BigNatModule_FFT_maxTwoPower","Int32Array","BigNatModule_bound","BigNatModule_coeff","BigNatModule_coeff64","BigNatModule_setCoeff","BigNatModule_pow64","BigNatModule_pow32","BigNatModule_baseNi64","BigNatModule_baseMaski64","BigNatModule_createN","BigNatModule_normN","na_mut","na","findLeastBound","BigNatModule_embed","r_1","BigNatModule_boundInt","BigNatModule_eval32","BigNatModule_one","BigNatModule_zero","BigNatModule_degree","BigNatModule_isZero","BigNatModule_equal","pa_mut","qa_mut","pa","qa","check","BigNatModule_compare","BigNatModule_lt","BigNatModule_mulSchoolBookCarry","r_mut","c_mut","rak","BigNatModule_mulSchoolBookOneSmall","bp","q_1","BigNatModule_mulSchoolBook","pSmall","qSmall","BigNatModule_mulSchoolBookBothSmall","ra","pai","qaj","BigNatModule_mulSchoolBookNeitherSmall","BigNatModule_encoding","bigL","twoToBigL","bigK","bigN","splits","BigNatModule_mkEncoding","BigNatModule_table","BigNatModule_mul","BigNatModule_scaleSubInPlace","patternInput_1","ad","a_1","f_1","zLo","zHi","BigNatModule_scaleAddInPlace","BigNatModule_removeFactor","degx","dega","pn","qn","xa","aa","qai","BigNatModule_divmod","BigNatModule_copyN","BigNatModule_ofInt32","BigNatModule_ofInt64","BigNatModule_boundInt64","BigNatModule_embed64","BigNatModule_toString","degn","digits_4","collect","isLeading_mut","digits_mut","n_1_mut","_arg1_mut","isLeading","n_1","n_2","prior_1","nL","nH","prior_mut","ten2k_mut","prior","ten2k","route","BigNatModule_isSmall","BigNatModule_getSmall","BigInteger","signInt","BigInteger__get_SignInt","BigInteger__get_V","BigInteger_op_Equality_56F059C0","BigNatModule_hash","nn","BigInteger_op_LessThan_56F059C0","BigInteger_$ctor_Z2BE94A1","BigInteger_nat_Z67CCE57D","smallLim","smallPosTab","BigInteger_$ctor_Z524259A4","BigInteger_get_One","BigInteger_get_Two","two","BigInteger_get_Zero","zero","signedRound","ms","arguments","fromTicks","ticks","days","ts","hours","seconds","milliseconds","firstDot","firstColon","ErrorReason","CaseStrategy","Util_Cache$1","Map","Util_Cache$1_$ctor","Util_Cache$1__GetOrAdd_43981464","__","outArg","dict","addToDict","Util_CachedEncoders","Util_CachedDecoders","Util_Casing_lowerFirst","Util_Casing_convert","caseStrategy","fieldName","replacement","limit","replacer","withGroups","pLast","groups","tmp","_s","sub1","sub2","seq","timespan","toString_4","sbyte","byte","int16","uint16","unit","space","JSON","option","encoder","defThunk","autoEncodeRecordsAndUnions","extra","skipNullField","encoderRef","extra_1","setters","fi","targetKey","encode_1","autoEncoder","field","getRecordField","source_1","target_1","set$","message","arg10","case_","getUnionFields","fieldTypes","target_2","encode_2","map_2","enumType","value_2","value_3","value_4","value_5","value_7","clo2","arg20","encoders","value_9","fullname_1","encoder_2","value_10","Value","encoder_3","value_11","keyType","valueEncoder","value_12","activePatternResult15098","keyEncoder","clo4","arg40","value_13","_arg2","activePatternResult15102","value_14","value_16","value_18","value_19","value_20","value_21","value_22","value_24","value_26","value_28","value_30","toString_3","datetime","value_31","datetimeOffset","value_32","value_33","makeExtra","map_3","Coders","guidRegex","guidRegexNoHyphen","guidRegexHex","hyphenateGuid","wsTrimAndLowered","chars","DateTimeOffset","offsetMatch","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","SetTreeNode$1_$ctor_Z6E7BE5F7","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_count","SetTreeModule_countAux","t_mut","SetTreeModule_mk","SetTreeModule_rebalance","t2_3","t_3","t2_4","SetTreeModule_add","c_1","SetTreeModule_empty","SetTreeModule_mem","SetTreeModule_iter","SetTreeModule_SetIterator$1","SetTreeModule_collapseLHS","x2","SetTreeModule_mkIterator","singleton_1","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","x1_3","x2_3","pattern_matching_result","t1_6","x1_4","t2_6","x2_4","matchValue_4","pattern_matching_result_1","t1_7","x1_5","t2_7","x2_5","c_3","c_2","matchValue_5","pattern_matching_result_2","t1_8","x1_6","t2_8","x2_6","pattern_matching_result_3","t1_2","x1","t2_2","x2_1","pattern_matching_result_4","t1_4","x1_2","x2_2","SetTreeModule_copyToArray","SetTreeModule_ofArray","SetTreeModule_ofSeq","fold_2","SetTreeModule_ofList","SetTreeModule_mkFromEnumerator","FSharpSet","FSharpSet__ComputeHashCode","FSharpSet__get_Comparer","FSharpSet__get_Tree","FSharpSet__get_Count","FSharpSet__Contains","FSharpSet_$ctor","elements","genericMsg","msg","newLine","errorToString","path","error","reason_1","decoder","SyntaxError","path_1","isFinite","tryParse_3","name_1","int","uint32","tryParse_6","tryParse_7","requestedIndex","copyOfStruct","currentPath","vArray","list","list_1","tokens","acc_1","succeed","output","andThen","cb","ctor","d1","tuple2","decoder1","decoder2","decoder_3","path_3","decoder_2","decoder_1","path_2","arg10$0040","arg20$0040","toMap","mixedArray","decoders","arg30","predicate","name_3","find","uci_1","makeUnion_1","values_1","autoDecoder","autoDecodeRecordsAndUnions","isOptional","decoderRef","makeRecord","decoderInfos","autoObject","decoder_15","tryFind_1","enumValue","path_4","path_5","value_8","enumValue_1","y_1","path_6","t_4","path_7","enumValue_2","x_2","y_2","path_8","t_5","path_9","enumValue_3","x_3","y_3","path_10","t_6","path_11","value_17","enumValue_4","x_4","y_4","path_12","t_7","path_13","matchValue_6","enumValue_5","x_5","y_5","clo3","t_8","path_14","decoder_13","path_15","arg0","decoder_14","path_16","value_23","keyDecoder","valueDecoder","decoders_1","path_17","autoObject2","path_18","value_25","path_19","decoders_1_mut","errors_mut","errors","head_1","append_1","runner","oneOf","path_20","ar","decoder_16","path_21","value_29","matchValue_7","path_22","path_23","path_24","path_25","value_34","path_26","value_35","path_27","value_36","path_28","value_37","path_29","value_38","tryParse_8","path_30","value_39","tryParse_2","guid","_arg1_6","FetchError","Helper_withContentTypeJson","headers","Helper_encode","dataResolver","resolver","ResolveType","caseStrategy_1","skipNullField_1","toString_5","Hash","Auto_generateEncoderCached_Z127D9D79","Helper_resolve","response","responseResolver","eitherUnitOr","value_40","toString_12","map_4","Auto_generateDecoderCached_7848D058","responseResolver_1","Helper_eitherUnit","promise","ok","text","Fetch_tryFetchAs_25B10BBE","url","httpMethod","properties","headers_2","properties_3","custom","list2","Helper_withProperties","data_1","Helper_withBody","init","fetch","Helper_fetch","exn","Fetch_fetchAs_25B10BBE","response_1","status","statusText","Helper_message","agGrid","AgGridReact","RowFilter","RowFilter__get_FilterText","DOMLayout","DOMLayout__get_LayoutText","ColumnType","openClosed","LinkData","Text$","Href","Text","StyledComponents_Navbar","props_1","children","logo","cit$002Dlogo","createElement","padding","backgroundColor","height","color","display","justifyContent","alignItems","Children","width","margin","src","fontSize","StyledComponents_SubHeading_Z721C83C5","label","borderBottom","marginTop","paddingBottom","StyledComponents_Description","wrapperName","wrappedComponent","links","elms","children_2","children_5","link","fontWeight","href","className","StyledComponents_HeadingWithContent","title","children_1","StyledComponents_CodeBlock_Z721C83C5","code","borderRadius","Olympian","Athlete","Age","Country","Year","Date$","Sport","Gold","Silver","Bronze","Total","Components_Demo","arg10_2","arg00_2","initial","callback","Fetch_get_5760677E","flexWrap","flexDirection","AutoSizeGroupColumns","ev","setTimeout","colIds","colId","columnGroup","columnApi","autoSizeColumns","p_1","age","x_6","x_7","x_9","x_11","x_13","x_15","x_17","maxWidth","Components_Documentation","render","document","getElementById"],"mappings":"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AG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GA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","file":"app.e7f1c02e1ee9e1b6cefc.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([11,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\") && !isArray(t);\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\nimport { min as min_1, compare, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\n\nexport function Helpers_allocateArrayFromCons(cons, len) {\n    if ((typeof cons) === \"function\") {\n        return new cons(len);\n    }\n    else {\n        return new Array(len);\n    }\n}\n\nfunction indexNotFound() {\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\n}\n\nfunction differentLengths() {\n    throw (new Error(\"Arrays had different lengths\"));\n}\n\nexport function append(array1, array2, cons) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\n    for (let i = 0; i <= (len1 - 1); i++) {\n        newArray[i] = array1[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        newArray[i_1 + len1] = array2[i_1];\n    }\n    return newArray;\n}\n\nexport function filter(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function fill(target, targetIndex, count, value) {\n    const start = targetIndex | 0;\n    return target.fill(value, start, (start + count));\n}\n\nexport function getSubArray(array, start, count) {\n    const start_1 = start | 0;\n    return array.slice(start_1, (start_1 + count));\n}\n\nexport function last(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    return array[array.length - 1];\n}\n\nexport function tryLast(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[array.length - 1]);\n    }\n}\n\nexport function mapIndexed(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\n\nexport function map(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\n\nexport function mapIndexed2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function map2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function mapIndexed3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function map3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function mapFold(mapping, state, array, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = 0; i <= (array.length - 1); i++) {\n            const patternInput = mapping(acc, array[i]);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function mapFoldBack(mapping, array, state, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = array.length - 1; i >= 0; i--) {\n            const patternInput = mapping(array[i], acc);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function indexed(source) {\n    const len = source.length | 0;\n    const target = new Array(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = [i, source[i]];\n    }\n    return target;\n}\n\nexport function truncate(count, array) {\n    const count_1 = max_1((x, y) => comparePrimitives(x, y), 0, count) | 0;\n    const start = 0;\n    return array.slice(start, (start + count_1));\n}\n\nexport function concat(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const matchValue = arrays_1.length | 0;\n    switch (matchValue) {\n        case 0: {\n            return Helpers_allocateArrayFromCons(cons, 0);\n        }\n        case 1: {\n            return arrays_1[0];\n        }\n        default: {\n            let totalIdx = 0;\n            let totalLength = 0;\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\n                const arr_1 = arrays_1[idx];\n                totalLength = ((totalLength + arr_1.length) | 0);\n            }\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\n                const arr_2 = arrays_1[idx_1];\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\n                    result[totalIdx] = arr_2[j];\n                    totalIdx = ((totalIdx + 1) | 0);\n                }\n            }\n            return result;\n        }\n    }\n}\n\nexport function collect(mapping, array, cons) {\n    return concat(map(mapping, array, null), cons);\n}\n\nexport function where(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function contains(value, array, eq) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return false;\n            }\n            else if (eq.Equals(value, array[i])) {\n                return true;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function empty(cons) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n}\n\nexport function singleton(value, cons) {\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\n    ar[0] = value;\n    return ar;\n}\n\nexport function initialize(count, initializer, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (count - 1); i++) {\n        result[i] = initializer(i);\n    }\n    return result;\n}\n\nexport function pairwise(array) {\n    if (array.length < 2) {\n        return [];\n    }\n    else {\n        const count = (array.length - 1) | 0;\n        const result = new Array(count);\n        for (let i = 0; i <= (count - 1); i++) {\n            result[i] = [array[i], array[i + 1]];\n        }\n        return result;\n    }\n}\n\nexport function replicate(count, initial, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (result.length - 1); i++) {\n        result[i] = initial;\n    }\n    return result;\n}\n\nexport function copy(array) {\n    return array.slice();\n}\n\nexport function reverse(array) {\n    const array_2 = array.slice();\n    return array_2.reverse();\n}\n\nexport function scan(folder, state, array, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[0] = state;\n    for (let i = 0; i <= (array.length - 1); i++) {\n        res[i + 1] = folder(res[i], array[i]);\n    }\n    return res;\n}\n\nexport function scanBack(folder, array, state, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[array.length] = state;\n    for (let i = array.length - 1; i >= 0; i--) {\n        res[i] = folder(array[i], res[i + 1]);\n    }\n    return res;\n}\n\nexport function skip(count, array, cons) {\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = ((count < 0) ? 0 : count) | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function skipWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = ((count + 1) | 0);\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function take(count, array, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const start = 0;\n        return array.slice(start, (start + count));\n    }\n}\n\nexport function takeWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = ((count + 1) | 0);\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const start = 0;\n        const count_1 = count | 0;\n        return array.slice(start, (start + count_1));\n    }\n}\n\nexport function addInPlace(x, array) {\n    void (array.push(x));\n}\n\nexport function addRangeInPlace(range, array) {\n    const enumerator = getEnumerator(range);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n}\n\nexport function removeInPlace(item_1, array) {\n    const i = array.indexOf(item_1, 0);\n    if (i > -1) {\n        void (array.splice(i, 1));\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function removeAllInPlace(predicate, array) {\n    const countRemoveAll = (count) => {\n        const i = array.findIndex(predicate);\n        if (i > -1) {\n            void (array.splice(i, 1));\n            return (countRemoveAll(count) + 1) | 0;\n        }\n        else {\n            return count | 0;\n        }\n    };\n    return countRemoveAll(0) | 0;\n}\n\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    const diff = (targetIndex - sourceIndex) | 0;\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\n        target[i + diff] = source[i];\n    }\n}\n\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\n    try {\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\n    }\n    catch (matchValue) {\n        copyTo(source, sourceIndex, target, targetIndex, count);\n    }\n}\n\nexport function indexOf(array, item_1, start, count) {\n    const start_1 = defaultArg(start, 0) | 0;\n    const i = array.indexOf(item_1, start_1);\n    if ((count != null) ? (i >= (start_1 + value_2(count))) : false) {\n        return -1;\n    }\n    else {\n        return i | 0;\n    }\n}\n\nexport function partition(f, source, cons) {\n    const len = source.length | 0;\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\n    let iTrue = 0;\n    let iFalse = 0;\n    for (let i = 0; i <= (len - 1); i++) {\n        if (f(source[i])) {\n            res1[iTrue] = source[i];\n            iTrue = ((iTrue + 1) | 0);\n        }\n        else {\n            res2[iFalse] = source[i];\n            iFalse = ((iFalse + 1) | 0);\n        }\n    }\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\n\nexport function find(predicate, array) {\n    const matchValue = array.find(predicate);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_2(matchValue);\n    }\n}\n\nexport function tryFind(predicate, array) {\n    return array.find(predicate);\n}\n\nexport function findIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue | 0;\n    }\n    else {\n        return indexNotFound();\n    }\n}\n\nexport function tryFindIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function pick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return indexNotFound();\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue != null) {\n                    return value_2(matchValue);\n                }\n                else {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function tryPick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return void 0;\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue == null) {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function findBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return array[i];\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function tryFindBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return some(array[i]);\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function findLastIndex(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function findIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function tryFindIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return i;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function choose(chooser, array, cons) {\n    const res = [];\n    for (let i = 0; i <= (array.length - 1); i++) {\n        const matchValue = chooser(array[i]);\n        if (matchValue != null) {\n            const y = value_2(matchValue);\n            void (res.push(y));\n        }\n    }\n    if ((typeof cons) === \"function\") {\n        return map((x) => x, res, cons);\n    }\n    else {\n        return res;\n    }\n}\n\nexport function foldIndexed(folder, state, array) {\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\n}\n\nexport function fold(folder, state, array) {\n    return array.reduce(((delegateArg0, delegateArg1) => folder(delegateArg0, delegateArg1)), state);\n}\n\nexport function iterate(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(array[i]);\n    }\n}\n\nexport function iterateIndexed(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(i, array[i]);\n    }\n}\n\nexport function iterate2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(array1[i], array2[i]);\n    }\n}\n\nexport function iterateIndexed2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(i, array1[i], array2[i]);\n    }\n}\n\nexport function isEmpty(array) {\n    return array.length === 0;\n}\n\nexport function forAll(predicate, array) {\n    return array.every(predicate);\n}\n\nexport function permute(f, array) {\n    const size = array.length | 0;\n    const res = array.slice();\n    const checkFlags = new Array(size);\n    iterateIndexed((i, x) => {\n        const j = f(i) | 0;\n        if ((j < 0) ? true : (j >= size)) {\n            throw (new Error(\"Not a valid permutation\"));\n        }\n        res[j] = x;\n        checkFlags[j] = 1;\n    }, array);\n    if (!(checkFlags.every(((y) => (1 === y))))) {\n        throw (new Error(\"Not a valid permutation\"));\n    }\n    return res;\n}\n\nexport function setSlice(target, lower, upper, source) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const upper_1 = defaultArg(upper, 0) | 0;\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\n    for (let i = 0; i <= length; i++) {\n        target[i + lower_1] = source[i];\n    }\n}\n\nexport function sortInPlaceBy(projection, xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n}\n\nexport function sortInPlace(xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(x, y)));\n}\n\nexport function sort(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(x, y)));\n    return xs_1;\n}\n\nexport function sortBy(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n    return xs_1;\n}\n\nexport function sortDescending(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1)));\n    return xs_1;\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)));\n    return xs_1;\n}\n\nexport function sortWith(comparer, xs) {\n    const comparer_1 = comparer;\n    const xs_1 = xs.slice();\n    xs_1.sort(comparer_1);\n    return xs_1;\n}\n\nexport function allPairs(xs, ys) {\n    const len1 = xs.length | 0;\n    const len2 = ys.length | 0;\n    const res = new Array((len1 * len2));\n    for (let i = 0; i <= (xs.length - 1); i++) {\n        for (let j = 0; j <= (ys.length - 1); j++) {\n            res[(i * len2) + j] = [xs[i], ys[j]];\n        }\n    }\n    return res;\n}\n\nexport function unfold(generator, state) {\n    const res = [];\n    const loop = (state_1_mut) => {\n        loop:\n        while (true) {\n            const state_1 = state_1_mut;\n            const matchValue = generator(state_1);\n            if (matchValue != null) {\n                const x = matchValue[0];\n                const s = matchValue[1];\n                void (res.push(x));\n                state_1_mut = s;\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(state);\n    return res;\n}\n\nexport function unzip(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n    }, array);\n    return [res1, res2];\n}\n\nexport function unzip3(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    const res3 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n        res3[i] = tupledArg[2];\n    }, array);\n    return [res1, res2, res3];\n}\n\nexport function zip(array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i]];\n    }\n    return result;\n}\n\nexport function zip3(array1, array2, array3) {\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i], array3[i]];\n    }\n    return result;\n}\n\nexport function chunkBySize(chunkSize, array) {\n    if (chunkSize < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\n            let slice;\n            const start_1 = (x * chunkSize) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            void (result.push(slice));\n        }\n        return result;\n    }\n}\n\nexport function splitAt(index, array) {\n    let start;\n    if (index < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: index\"));\n    }\n    if (index > array.length) {\n        throw (new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\"));\n    }\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\n}\n\nexport function compareWith(comparer, array1, array2) {\n    if (array1 == null) {\n        if (array2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (array2 == null) {\n        return 1;\n    }\n    else {\n        let i = 0;\n        let result = 0;\n        const length1 = array1.length | 0;\n        const length2 = array2.length | 0;\n        if (length1 > length2) {\n            return 1;\n        }\n        else if (length1 < length2) {\n            return -1;\n        }\n        else {\n            while ((i < length1) ? (result === 0) : false) {\n                result = (comparer(array1[i], array2[i]) | 0);\n                i = ((i + 1) | 0);\n            }\n            return result | 0;\n        }\n    }\n}\n\nexport function equalsWith(comparer, array1, array2) {\n    return compareWith((e1, e2) => compare(e1, e2), array1, array2) === 0;\n}\n\nexport function exactlyOne(array) {\n    if (array.length === 1) {\n        return array[0];\n    }\n    else if (array.length === 0) {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\n    }\n    else {\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\n    }\n}\n\nexport function tryExactlyOne(array) {\n    if (array.length === 1) {\n        return some(array[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function head(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    else {\n        return array[0];\n    }\n}\n\nexport function tryHead(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[0]);\n    }\n}\n\nexport function tail(array) {\n    if (array.length === 0) {\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\n    }\n    return array.slice(1);\n}\n\nexport function item(index, array) {\n    return array[index];\n}\n\nexport function tryItem(index, array) {\n    if ((index < 0) ? true : (index >= array.length)) {\n        return void 0;\n    }\n    else {\n        return some(array[index]);\n    }\n}\n\nexport function foldBackIndexed(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\n}\n\nexport function foldBack(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\n}\n\nexport function foldIndexed2(folder, state, array1, array2) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        throw (new Error(\"Arrays have different lengths\"));\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        acc = folder(i, acc, array1[i], array2[i]);\n    }\n    return acc;\n}\n\nexport function fold2(folder, state, array1, array2) {\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\n}\n\nexport function foldBackIndexed2(folder, array1, array2, state) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const size = array1.length | 0;\n    for (let i = 1; i <= size; i++) {\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n    }\n    return acc;\n}\n\nexport function foldBack2(f, array1, array2, state) {\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\n}\n\nexport function reduce(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduce(reduction_1);\n}\n\nexport function reduceBack(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduceRight(reduction_1);\n}\n\nexport function forAll2(predicate, array1, array2) {\n    return fold2((acc, x, y) => (acc ? predicate(x, y) : false), true, array1, array2);\n}\n\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\n    existsOffset:\n    while (true) {\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\n        if (index === array.length) {\n            return false;\n        }\n        else if (predicate(array[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array_mut = array;\n            index_mut = (index + 1);\n            continue existsOffset;\n        }\n        break;\n    }\n}\n\nexport function exists(predicate, array) {\n    return existsOffset(predicate, array, 0);\n}\n\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n    existsOffset2:\n    while (true) {\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\n        if (index === array1.length) {\n            return false;\n        }\n        else if (predicate(array1[index], array2[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array1_mut = array1;\n            array2_mut = array2;\n            index_mut = (index + 1);\n            continue existsOffset2;\n        }\n        break;\n    }\n}\n\nexport function exists2(predicate, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    return existsOffset2(predicate, array1, array2, 0);\n}\n\nexport function sum(array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, array[i]);\n    }\n    return acc;\n}\n\nexport function sumBy(projection, array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, projection(array[i]));\n    }\n    return acc;\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, array[i]);\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function averageBy(projection, array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, projection(array[i]));\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res;\n    const len = max_1((x, y) => comparePrimitives(x, y), 0, source.length - windowSize) | 0;\n    res = (new Array(len));\n    for (let i = windowSize; i <= source.length; i++) {\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\n    }\n    return res;\n}\n\nexport function splitInto(chunks, array) {\n    if (chunks < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        const chunks_1 = min_1((x, y) => comparePrimitives(x, y), chunks, array.length) | 0;\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\n            let slice;\n            const start_1 = ((i * minChunkSize) + min_1((x_1, y_1) => comparePrimitives(x_1, y_1), chunksWithExtraItem, i)) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            void (result.push(slice));\n        }\n        return result;\n    }\n}\n\nexport function transpose(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const len = arrays_1.length | 0;\n    if (len === 0) {\n        return new Array(0);\n    }\n    else {\n        const lenInner = arrays_1[0].length | 0;\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\n            differentLengths();\n        }\n        const result = new Array(lenInner);\n        for (let i = 0; i <= (lenInner - 1); i++) {\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\n            for (let j = 0; j <= (len - 1); j++) {\n                result[i][j] = arrays_1[j][i];\n            }\n        }\n        return result;\n    }\n}\n\n","import { some } from \"../fable-library.3.1.11/Option.js\";\nimport { create, isLeapYear } from \"../fable-library.3.1.11/Date.js\";\nimport { parse } from \"../fable-library.3.1.11/Int32.js\";\nimport { split, isNullOrWhiteSpace } from \"../fable-library.3.1.11/String.js\";\nimport { equalsWith } from \"../fable-library.3.1.11/Array.js\";\nimport { comparePrimitives } from \"../fable-library.3.1.11/Util.js\";\nimport react from \"react\";\n\nexport function DateParsing_$007CBetween$007C_$007C(x, y, input) {\n    if ((input >= x) ? (input <= y) : false) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function DateParsing_isLeapYear(year) {\n    return isLeapYear(year);\n}\n\nexport function DateParsing_$007CInt$007C_$007C(input) {\n    try {\n        return parse(input, 511, false, 32);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\nexport function DateParsing_parse(input) {\n    try {\n        if (isNullOrWhiteSpace(input)) {\n            return void 0;\n        }\n        else {\n            const parts = split(input, [\"-\"], null, 0);\n            let patternInput;\n            let pattern_matching_result, month, year;\n            if ((!equalsWith((x, y) => comparePrimitives(x, y), parts, null)) ? (parts.length === 2) : false) {\n                const activePatternResult3273 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                if (activePatternResult3273 != null) {\n                    const activePatternResult3274 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                    if (activePatternResult3274 != null) {\n                        pattern_matching_result = 0;\n                        month = activePatternResult3274;\n                        year = activePatternResult3273;\n                    }\n                    else {\n                        pattern_matching_result = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result = 1;\n                }\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n            switch (pattern_matching_result) {\n                case 0: {\n                    patternInput = [year, month, 1, 0, 0];\n                    break;\n                }\n                case 1: {\n                    let pattern_matching_result_1, day, month_1, year_1;\n                    if ((!equalsWith((x_1, y_1) => comparePrimitives(x_1, y_1), parts, null)) ? (parts.length === 3) : false) {\n                        const activePatternResult3270 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                        if (activePatternResult3270 != null) {\n                            const activePatternResult3271 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                            if (activePatternResult3271 != null) {\n                                const activePatternResult3272 = DateParsing_$007CInt$007C_$007C(parts[2]);\n                                if (activePatternResult3272 != null) {\n                                    pattern_matching_result_1 = 0;\n                                    day = activePatternResult3272;\n                                    month_1 = activePatternResult3271;\n                                    year_1 = activePatternResult3270;\n                                }\n                                else {\n                                    pattern_matching_result_1 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_1 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_1 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_1 = 1;\n                    }\n                    switch (pattern_matching_result_1) {\n                        case 0: {\n                            patternInput = [year_1, month_1, day, 0, 0];\n                            break;\n                        }\n                        case 1: {\n                            let pattern_matching_result_2, day_1, month_2, year_2;\n                            if ((!equalsWith((x_2, y_2) => comparePrimitives(x_2, y_2), parts, null)) ? (parts.length === 3) : false) {\n                                const activePatternResult3268 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                                if (activePatternResult3268 != null) {\n                                    const activePatternResult3269 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                                    if (activePatternResult3269 != null) {\n                                        pattern_matching_result_2 = 0;\n                                        day_1 = parts[2];\n                                        month_2 = activePatternResult3269;\n                                        year_2 = activePatternResult3268;\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_2 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_2 = 1;\n                            }\n                            switch (pattern_matching_result_2) {\n                                case 0: {\n                                    if (day_1.indexOf(\"T\") >= 0) {\n                                        const matchValue = split(day_1, [\"T\"], null, 0);\n                                        let pattern_matching_result_3, parsedDay, time;\n                                        if ((!equalsWith((x_3, y_3) => comparePrimitives(x_3, y_3), matchValue, null)) ? (matchValue.length === 2) : false) {\n                                            const activePatternResult3267 = DateParsing_$007CInt$007C_$007C(matchValue[0]);\n                                            if (activePatternResult3267 != null) {\n                                                pattern_matching_result_3 = 0;\n                                                parsedDay = activePatternResult3267;\n                                                time = matchValue[1];\n                                            }\n                                            else {\n                                                pattern_matching_result_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_3 = 1;\n                                        }\n                                        switch (pattern_matching_result_3) {\n                                            case 0: {\n                                                const matchValue_1 = split(time, [\":\"], null, 0);\n                                                let pattern_matching_result_4, hour, minute;\n                                                if ((!equalsWith((x_4, y_4) => comparePrimitives(x_4, y_4), matchValue_1, null)) ? (matchValue_1.length === 2) : false) {\n                                                    const activePatternResult3265 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);\n                                                    if (activePatternResult3265 != null) {\n                                                        const activePatternResult3266 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);\n                                                        if (activePatternResult3266 != null) {\n                                                            pattern_matching_result_4 = 0;\n                                                            hour = activePatternResult3265;\n                                                            minute = activePatternResult3266;\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_4 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        pattern_matching_result_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    pattern_matching_result_4 = 1;\n                                                }\n                                                switch (pattern_matching_result_4) {\n                                                    case 0: {\n                                                        const matchValue_2 = [hour, minute];\n                                                        let pattern_matching_result_5;\n                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[0]) != null) {\n                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, matchValue_2[1]) != null) {\n                                                                pattern_matching_result_5 = 0;\n                                                            }\n                                                            else {\n                                                                pattern_matching_result_5 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            pattern_matching_result_5 = 1;\n                                                        }\n                                                        switch (pattern_matching_result_5) {\n                                                            case 0: {\n                                                                patternInput = [year_2, month_2, parsedDay, hour, minute];\n                                                                break;\n                                                            }\n                                                            case 1: {\n                                                                patternInput = [-1, 1, 1, 0, 0];\n                                                                break;\n                                                            }\n                                                        }\n                                                        break;\n                                                    }\n                                                    case 1: {\n                                                        patternInput = [-1, 1, 1, 0, 0];\n                                                        break;\n                                                    }\n                                                }\n                                                break;\n                                            }\n                                            case 1: {\n                                                patternInput = [-1, 1, 1, 0, 0];\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        patternInput = [-1, 1, 1, 0, 0];\n                                    }\n                                    break;\n                                }\n                                case 1: {\n                                    patternInput = [-1, 1, 1, 0, 0];\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            const year_3 = patternInput[0] | 0;\n            const month_3 = patternInput[1] | 0;\n            const minute_1 = patternInput[4] | 0;\n            const hour_1 = patternInput[3] | 0;\n            const day_2 = patternInput[2] | 0;\n            if (year_3 <= 0) {\n                return void 0;\n            }\n            else {\n                const matchValue_3 = [month_3, day_2];\n                let pattern_matching_result_6;\n                if (matchValue_3[0] === 2) {\n                    if (DateParsing_$007CBetween$007C_$007C(1, 29, matchValue_3[1]) != null) {\n                        if (DateParsing_isLeapYear(year_3)) {\n                            pattern_matching_result_6 = 0;\n                        }\n                        else {\n                            pattern_matching_result_6 = 1;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_6 = 1;\n                    }\n                }\n                else {\n                    pattern_matching_result_6 = 1;\n                }\n                switch (pattern_matching_result_6) {\n                    case 0: {\n                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                    }\n                    case 1: {\n                        let pattern_matching_result_7;\n                        if (matchValue_3[0] === 2) {\n                            if (DateParsing_$007CBetween$007C_$007C(1, 28, matchValue_3[1]) != null) {\n                                if (!DateParsing_isLeapYear(year_3)) {\n                                    pattern_matching_result_7 = 0;\n                                }\n                                else {\n                                    pattern_matching_result_7 = 1;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_7 = 1;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_7 = 1;\n                        }\n                        switch (pattern_matching_result_7) {\n                            case 0: {\n                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                            }\n                            case 1: {\n                                let pattern_matching_result_8;\n                                if (matchValue_3[0] === 1) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 3) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 5) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 7) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 8) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 10) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else if (matchValue_3[0] === 12) {\n                                    if (DateParsing_$007CBetween$007C_$007C(1, 31, matchValue_3[1]) != null) {\n                                        pattern_matching_result_8 = 0;\n                                    }\n                                    else {\n                                        pattern_matching_result_8 = 1;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_8 = 1;\n                                }\n                                switch (pattern_matching_result_8) {\n                                    case 0: {\n                                        return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                    }\n                                    case 1: {\n                                        let pattern_matching_result_9;\n                                        if (matchValue_3[0] === 4) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 6) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 9) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else if (matchValue_3[0] === 11) {\n                                            if (DateParsing_$007CBetween$007C_$007C(1, 30, matchValue_3[1]) != null) {\n                                                pattern_matching_result_9 = 0;\n                                            }\n                                            else {\n                                                pattern_matching_result_9 = 1;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result_9 = 1;\n                                        }\n                                        switch (pattern_matching_result_9) {\n                                            case 0: {\n                                                return create(year_3, month_3, day_2, hour_1, minute_1, 0);\n                                            }\n                                            case 1: {\n                                                return void 0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (matchValue_4) {\n        return void 0;\n    }\n}\n\nexport const Interop_reactApi = react;\n\n","export default __webpack_public_path__ + \"a3dd9307036f2d46a5361abfba7d71ef.png\";","import { join } from \"./String.js\";\nimport { uncurry, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\nimport { Record } from \"./Types.js\";\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\n\nexport const SR_indexOutOfBounds = \"The index was outside the range of elements in the list.\";\n\nexport const SR_inputListWasEmpty = \"List was empty\";\n\nexport const SR_inputMustBeNonNegative = \"The input must be non-negative.\";\n\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\n\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\n\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\n\nexport const SR_listsHadDifferentLengths = \"The lists had different lengths.\";\n\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\n\nexport class FSharpList extends Record {\n    constructor(head, tail) {\n        super();\n        this.head = head;\n        this.tail = tail;\n    }\n    toString() {\n        const xs = this;\n        return (\"[\" + join(\"; \", xs)) + \"]\";\n    }\n    Equals(other) {\n        const xs = this;\n        if (xs === other) {\n            return true;\n        }\n        else {\n            const loop = (xs_1_mut, ys_1_mut) => {\n                loop:\n                while (true) {\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                    const matchValue = [xs_1.tail, ys_1.tail];\n                    if (matchValue[0] != null) {\n                        if (matchValue[1] != null) {\n                            const xt = matchValue[0];\n                            const yt = matchValue[1];\n                            if (equals(xs_1.head, ys_1.head)) {\n                                xs_1_mut = xt;\n                                ys_1_mut = yt;\n                                continue loop;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                        else {\n                            return false;\n                        }\n                    }\n                    else if (matchValue[1] != null) {\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                    break;\n                }\n            };\n            return loop(xs, other);\n        }\n    }\n    GetHashCode() {\n        const xs = this;\n        const loop = (i_mut, h_mut, xs_1_mut) => {\n            loop:\n            while (true) {\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\n                const matchValue = xs_1.tail;\n                if (matchValue != null) {\n                    const t = matchValue;\n                    if (i > 18) {\n                        return h | 0;\n                    }\n                    else {\n                        i_mut = (i + 1);\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\n                        xs_1_mut = t;\n                        continue loop;\n                    }\n                }\n                else {\n                    return h | 0;\n                }\n                break;\n            }\n        };\n        return loop(0, 0, xs) | 0;\n    }\n    CompareTo(other) {\n        const xs = this;\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop:\n            while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = [xs_1.tail, ys_1.tail];\n                if (matchValue[0] != null) {\n                    if (matchValue[1] != null) {\n                        const xt = matchValue[0];\n                        const yt = matchValue[1];\n                        const c = compare(xs_1.head, ys_1.head) | 0;\n                        if (c === 0) {\n                            xs_1_mut = xt;\n                            ys_1_mut = yt;\n                            continue loop;\n                        }\n                        else {\n                            return c | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue[1] != null) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n                break;\n            }\n        };\n        return loop(xs, other) | 0;\n    }\n    GetEnumerator() {\n        const xs = this;\n        return ListEnumerator$1_$ctor_3002E699(xs);\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const xs = this;\n        return getEnumerator(xs);\n    }\n}\n\nexport function FSharpList$reflection(gen0) {\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\n}\n\nexport class ListEnumerator$1 {\n    constructor(xs) {\n        this.xs = xs;\n        this.it = this.xs;\n        this.current = null;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        const __ = this;\n        return __.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        const __ = this;\n        return __.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const __ = this;\n        const matchValue = __.it.tail;\n        if (matchValue != null) {\n            const t = matchValue;\n            __.current = __.it.head;\n            __.it = t;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        const __ = this;\n        __.it = __.xs;\n        __.current = null;\n    }\n    Dispose() {\n    }\n}\n\nexport function ListEnumerator$1$reflection(gen0) {\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\n}\n\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\n    return new ListEnumerator$1(xs);\n}\n\nexport function FSharpList_get_Empty() {\n    return new FSharpList(null, void 0);\n}\n\nexport function FSharpList_Cons_305B8EAC(x, xs) {\n    return new FSharpList(x, xs);\n}\n\nexport function FSharpList__get_IsEmpty(xs) {\n    return xs.tail == null;\n}\n\nexport function FSharpList__get_Length(xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            const matchValue = xs_1.tail;\n            if (matchValue != null) {\n                i_mut = (i + 1);\n                xs_1_mut = matchValue;\n                continue loop;\n            }\n            else {\n                return i | 0;\n            }\n            break;\n        }\n    };\n    return loop(0, xs) | 0;\n}\n\nexport function FSharpList__get_Head(xs) {\n    const matchValue = xs.tail;\n    if (matchValue != null) {\n        return xs.head;\n    }\n    else {\n        throw (new Error((SR_inputListWasEmpty + \"\\\\nParameter name: \") + \"list\"));\n    }\n}\n\nexport function FSharpList__get_Tail(xs) {\n    const matchValue = xs.tail;\n    if (matchValue != null) {\n        return matchValue;\n    }\n    else {\n        throw (new Error((SR_inputListWasEmpty + \"\\\\nParameter name: \") + \"list\"));\n    }\n}\n\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            const matchValue = xs_1.tail;\n            if (matchValue != null) {\n                if (i === index) {\n                    return xs_1.head;\n                }\n                else {\n                    i_mut = (i + 1);\n                    xs_1_mut = matchValue;\n                    continue loop;\n                }\n            }\n            else {\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\n\nexport function empty() {\n    return FSharpList_get_Empty();\n}\n\nexport function cons(x, xs) {\n    return FSharpList_Cons_305B8EAC(x, xs);\n}\n\nexport function singleton(x) {\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\n}\n\nexport function isEmpty(xs) {\n    return FSharpList__get_IsEmpty(xs);\n}\n\nexport function length(xs) {\n    return FSharpList__get_Length(xs);\n}\n\nexport function head(xs) {\n    return FSharpList__get_Head(xs);\n}\n\nexport function tryHead(xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        return void 0;\n    }\n    else {\n        return some(FSharpList__get_Head(xs));\n    }\n}\n\nexport function tail(xs) {\n    return FSharpList__get_Tail(xs);\n}\n\nexport function tryLast(xs_mut) {\n    tryLast:\n    while (true) {\n        const xs = xs_mut;\n        if (FSharpList__get_IsEmpty(xs)) {\n            return void 0;\n        }\n        else {\n            const t = FSharpList__get_Tail(xs);\n            if (FSharpList__get_IsEmpty(t)) {\n                return some(FSharpList__get_Head(xs));\n            }\n            else {\n                xs_mut = t;\n                continue tryLast;\n            }\n        }\n        break;\n    }\n}\n\nexport function last(xs) {\n    const matchValue = tryLast(xs);\n    if (matchValue == null) {\n        throw (new Error(SR_inputListWasEmpty));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function compareWith(comparer, xs, ys) {\n    const loop = (xs_1_mut, ys_1_mut) => {\n        loop:\n        while (true) {\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\n            if (matchValue[0]) {\n                if (matchValue[1]) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n            }\n            else if (matchValue[1]) {\n                return 1;\n            }\n            else {\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\n                if (c === 0) {\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\n                    continue loop;\n                }\n                else {\n                    return c | 0;\n                }\n            }\n            break;\n        }\n    };\n    return loop(xs, ys) | 0;\n}\n\nexport function toArray(xs) {\n    const len = FSharpList__get_Length(xs) | 0;\n    const res = fill(new Array(len), 0, len, null);\n    const loop = (i_mut, xs_1_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (!FSharpList__get_IsEmpty(xs_1)) {\n                res[i] = FSharpList__get_Head(xs_1);\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(0, xs);\n    return res;\n}\n\nexport function fold(folder, state, xs) {\n    let acc = state;\n    let xs_1 = xs;\n    while (!FSharpList__get_IsEmpty(xs_1)) {\n        acc = folder(acc, FSharpList__get_Head(xs_1));\n        xs_1 = FSharpList__get_Tail(xs_1);\n    }\n    return acc;\n}\n\nexport function reverse(xs) {\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\n}\n\nexport function foldBack(folder, xs, state) {\n    return foldBack_1(folder, toArray(xs), state);\n}\n\nexport function foldIndexed(folder, state, xs) {\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i + 1);\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, state, xs);\n}\n\nexport function fold2(folder, state, xs, ys) {\n    let acc = state;\n    let xs_1 = xs;\n    let ys_1 = ys;\n    while ((!FSharpList__get_IsEmpty(xs_1)) ? (!FSharpList__get_IsEmpty(ys_1)) : false) {\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\n        xs_1 = FSharpList__get_Tail(xs_1);\n        ys_1 = FSharpList__get_Tail(ys_1);\n    }\n    return acc;\n}\n\nexport function foldBack2(folder, xs, ys, state) {\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\n}\n\nexport function unfold(gen, state) {\n    const loop = (acc_mut, node_mut) => {\n        let t;\n        loop:\n        while (true) {\n            const acc = acc_mut, node = node_mut;\n            const matchValue = gen(acc);\n            if (matchValue != null) {\n                acc_mut = matchValue[1];\n                node_mut = (t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t));\n                continue loop;\n            }\n            else {\n                return node;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(state, root);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function iterate(action, xs) {\n    return fold((unitVar0, x) => {\n        action(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(action, xs, ys) {\n    return fold2((unitVar0, x, y) => {\n        action(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(action, xs) {\n    void fold((i, x) => {\n        action(i, x);\n        return (i + 1) | 0;\n    }, 0, xs);\n}\n\nexport function iterateIndexed2(action, xs, ys) {\n    void fold2((i, x, y) => {\n        action(i, x, y);\n        return (i + 1) | 0;\n    }, 0, xs, ys);\n}\n\nexport function toSeq(xs) {\n    return xs;\n}\n\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = xs.length - 1; i >= 0; i--) {\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\n    }\n    return res;\n}\n\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\n}\n\nexport function ofSeq(xs) {\n    let xs_3, t;\n    if (isArrayLike(xs)) {\n        return ofArray(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return xs;\n    }\n    else {\n        const root = FSharpList_get_Empty();\n        let node = root;\n        const enumerator = getEnumerator(xs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                node = (xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t)));\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n        const xs_5 = node;\n        const t_2 = FSharpList_get_Empty();\n        xs_5.tail = t_2;\n        return FSharpList__get_Tail(root);\n    }\n}\n\nexport function concat(lists) {\n    const root = FSharpList_get_Empty();\n    let node = root;\n    const action = (xs) => {\n        node = fold((acc, x) => {\n            const t = new FSharpList(x, void 0);\n            acc.tail = t;\n            return t;\n        }, node, xs);\n    };\n    if (isArrayLike(lists)) {\n        lists.forEach(action);\n    }\n    else if (lists instanceof FSharpList) {\n        iterate(action, lists);\n    }\n    else {\n        const enumerator = getEnumerator(lists);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    const xs_6 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_6.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function scan(folder, state, xs) {\n    let xs_4, t_2;\n    const root = FSharpList_get_Empty();\n    let node;\n    const t = new FSharpList(state, void 0);\n    root.tail = t;\n    node = t;\n    let acc = state;\n    let xs_3 = xs;\n    while (!FSharpList__get_IsEmpty(xs_3)) {\n        acc = folder(acc, FSharpList__get_Head(xs_3));\n        node = (xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2)));\n        xs_3 = FSharpList__get_Tail(xs_3);\n    }\n    const xs_6 = node;\n    const t_4 = FSharpList_get_Empty();\n    xs_6.tail = t_4;\n    return FSharpList__get_Tail(root);\n}\n\nexport function scanBack(folder, xs, state) {\n    return ofArray(scanBack_1(folder, toArray(xs), state));\n}\n\nexport function append(xs, ys) {\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\n}\n\nexport function collect(mapping, xs) {\n    let xs_1, t;\n    const root = FSharpList_get_Empty();\n    let node = root;\n    let ys = xs;\n    while (!FSharpList__get_IsEmpty(ys)) {\n        let zs = mapping(FSharpList__get_Head(ys));\n        while (!FSharpList__get_IsEmpty(zs)) {\n            node = (xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t)));\n            zs = FSharpList__get_Tail(zs);\n        }\n        ys = FSharpList__get_Tail(ys);\n    }\n    const xs_3 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_3.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function mapIndexed(mapping, xs) {\n    const root = FSharpList_get_Empty();\n    const node = foldIndexed((i, acc, x) => {\n        const t = new FSharpList(mapping(i, x), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function map(mapping, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        const t = new FSharpList(mapping(x), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(mapping, xs, ys) {\n    const root = FSharpList_get_Empty();\n    const node = fold2((acc, x, y) => {\n        const t = new FSharpList(mapping(x, y), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs, ys);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function mapIndexed2(mapping, xs, ys) {\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\n        let t;\n        loop:\n        while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i + 1);\n                acc_mut = (t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                ys_1_mut = FSharpList__get_Tail(ys_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(0, root, xs, ys);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function map3(mapping, xs, ys, zs) {\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\n        let t;\n        loop:\n        while (true) {\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\n                return acc;\n            }\n            else {\n                acc_mut = (t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                ys_1_mut = FSharpList__get_Tail(ys_1);\n                zs_1_mut = FSharpList__get_Tail(zs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(root, xs, ys, zs);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function mapFold(mapping, state, xs) {\n    const root = FSharpList_get_Empty();\n    const patternInput_1 = fold((tupledArg, x) => {\n        let t;\n        const patternInput = mapping(tupledArg[1], x);\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\n    }, [root, state], xs);\n    const t_2 = FSharpList_get_Empty();\n    patternInput_1[0].tail = t_2;\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\n}\n\nexport function mapFoldBack(mapping, xs, state) {\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\n}\n\nexport function tryPick(f, xs) {\n    const loop = (xs_1_mut) => {\n        loop:\n        while (true) {\n            const xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else {\n                const matchValue = f(FSharpList__get_Head(xs_1));\n                if (matchValue == null) {\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(xs);\n}\n\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue == null) {\n        throw (new Error(SR_keyNotFoundAlt));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function tryFind(f, xs) {\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\n}\n\nexport function find(f, xs) {\n    const matchValue = tryFind(f, xs);\n    if (matchValue == null) {\n        throw (new Error(SR_keyNotFoundAlt));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function tryFindBack(f, xs) {\n    return tryFindBack_1(f, toArray(xs));\n}\n\nexport function findBack(f, xs) {\n    const matchValue = tryFindBack(f, xs);\n    if (matchValue == null) {\n        throw (new Error(SR_keyNotFoundAlt));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function tryFindIndex(f, xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else if (f(FSharpList__get_Head(xs_1))) {\n                return i;\n            }\n            else {\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\n\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue == null) {\n        throw (new Error(SR_keyNotFoundAlt));\n    }\n    else {\n        return matchValue | 0;\n    }\n}\n\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, toArray(xs));\n}\n\nexport function findIndexBack(f, xs) {\n    const matchValue = tryFindIndexBack(f, xs);\n    if (matchValue == null) {\n        throw (new Error(SR_keyNotFoundAlt));\n    }\n    else {\n        return matchValue | 0;\n    }\n}\n\nexport function tryItem(n, xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else if (i === n) {\n                return some(FSharpList__get_Head(xs_1));\n            }\n            else {\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\n\nexport function item(n, xs) {\n    return FSharpList__get_Item_Z524259A4(xs, n);\n}\n\nexport function filter(f, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        if (f(x)) {\n            const t = new FSharpList(x, void 0);\n            acc.tail = t;\n            return t;\n        }\n        else {\n            return acc;\n        }\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function partition(f, xs) {\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\n    const root2 = patternInput[1];\n    const root1 = patternInput[0];\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        return (x) => {\n            let t, t_2;\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\n        };\n    }), [root1, root2], xs);\n    const t_4 = FSharpList_get_Empty();\n    patternInput_1[0].tail = t_4;\n    const t_5 = FSharpList_get_Empty();\n    patternInput_1[1].tail = t_5;\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\n}\n\nexport function choose(f, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        const matchValue = f(x);\n        if (matchValue == null) {\n            return acc;\n        }\n        else {\n            const t = new FSharpList(value_1(matchValue), void 0);\n            acc.tail = t;\n            return t;\n        }\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function contains(value, xs, eq) {\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\n}\n\nexport function initialize(n, f) {\n    let xs, t;\n    const root = FSharpList_get_Empty();\n    let node = root;\n    for (let i = 0; i <= (n - 1); i++) {\n        node = (xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t)));\n    }\n    const xs_2 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_2.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reduce(f, xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw (new Error(SR_inputListWasEmpty));\n    }\n    else {\n        return fold(f, head(xs), tail(xs));\n    }\n}\n\nexport function reduceBack(f, xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw (new Error(SR_inputListWasEmpty));\n    }\n    else {\n        return foldBack(f, tail(xs), head(xs));\n    }\n}\n\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\n}\n\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\n}\n\nexport function exists(f, xs) {\n    return tryFindIndex(f, xs) != null;\n}\n\nexport function exists2(f_mut, xs_mut, ys_mut) {\n    exists2:\n    while (true) {\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\n        let pattern_matching_result;\n        if (matchValue[0]) {\n            if (matchValue[1]) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1]) {\n            pattern_matching_result = 2;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return false;\n            }\n            case 1: {\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    xs_mut = FSharpList__get_Tail(xs);\n                    ys_mut = FSharpList__get_Tail(ys);\n                    continue exists2;\n                }\n            }\n            case 2: {\n                throw (new Error((SR_listsHadDifferentLengths + \"\\\\nParameter name: \") + \"list2\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\n\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function sortWith(comparer, xs) {\n    const arr = toArray(xs);\n    arr.sort(comparer);\n    return ofArray(arr);\n}\n\nexport function sort(xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\n}\n\nexport function sortBy(projection, xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\n}\n\nexport function sortDescending(xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    let count = 0;\n    return averager.DivideByInt(fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs), count);\n}\n\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    return averager.DivideByInt(fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs), count);\n}\n\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, toArray(xs)));\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    return ofArray(map_1((xs_1) => ofArray(xs_1), chunkBySize_1(chunkSize, toArray(xs))));\n}\n\nexport function allPairs(xs, ys) {\n    const root = FSharpList_get_Empty();\n    let node = root;\n    iterate((x) => {\n        iterate((y) => {\n            let xs_1, t;\n            node = (xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t)));\n        }, ys);\n    }, xs);\n    const xs_3 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_3.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function skip(count_mut, xs_mut) {\n    skip:\n    while (true) {\n        const count = count_mut, xs = xs_mut;\n        if (count <= 0) {\n            return xs;\n        }\n        else if (FSharpList__get_IsEmpty(xs)) {\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\n        }\n        else {\n            count_mut = (count - 1);\n            xs_mut = FSharpList__get_Tail(xs);\n            continue skip;\n        }\n        break;\n    }\n}\n\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile:\n    while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        if (FSharpList__get_IsEmpty(xs)) {\n            return xs;\n        }\n        else if (!predicate(FSharpList__get_Head(xs))) {\n            return xs;\n        }\n        else {\n            predicate_mut = predicate;\n            xs_mut = FSharpList__get_Tail(xs);\n            continue skipWhile;\n        }\n        break;\n    }\n}\n\nexport function take(count, xs) {\n    if (count < 0) {\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\n    }\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        let t;\n        loop:\n        while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (i <= 0) {\n                return acc;\n            }\n            else if (FSharpList__get_IsEmpty(xs_1)) {\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\n            }\n            else {\n                i_mut = (i - 1);\n                acc_mut = (t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(count, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function takeWhile(predicate, xs) {\n    const loop = (acc_mut, xs_1_mut) => {\n        let t;\n        loop:\n        while (true) {\n            const acc = acc_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\n                return acc;\n            }\n            else {\n                acc_mut = (t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function truncate(count, xs) {\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        let t;\n        loop:\n        while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (i <= 0) {\n                return acc;\n            }\n            else if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i - 1);\n                acc_mut = (t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(count, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\n\nexport function getSlice(startIndex, endIndex, xs) {\n    const len = length(xs) | 0;\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\n    if (startIndex_1 < 0) {\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\n    }\n    else if (endIndex_1 >= len) {\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\n    }\n    else if (endIndex_1 < startIndex_1) {\n        return FSharpList_get_Empty();\n    }\n    else {\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\n    }\n}\n\nexport function splitAt(index, xs) {\n    if (index < 0) {\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\n    }\n    if (index > FSharpList__get_Length(xs)) {\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\n    }\n    return [take(index, xs), skip(index, xs)];\n}\n\nexport function exactlyOne(xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\n    }\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n        return FSharpList__get_Head(xs);\n    }\n    else {\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\n    }\n}\n\nexport function tryExactlyOne(xs) {\n    if ((!FSharpList__get_IsEmpty(xs)) ? FSharpList__get_IsEmpty(FSharpList__get_Tail(xs)) : false) {\n        return some(FSharpList__get_Head(xs));\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function where(predicate, xs) {\n    return filter(predicate, xs);\n}\n\nexport function pairwise(xs) {\n    return ofArray(pairwise_1(toArray(xs)));\n}\n\nexport function windowed(windowSize, xs) {\n    return ofArray(map_1((xs_1) => ofArray(xs_1), windowed_1(windowSize, toArray(xs))));\n}\n\nexport function splitInto(chunks, xs) {\n    return ofArray(map_1((xs_1) => ofArray(xs_1), splitInto_1(chunks, toArray(xs))));\n}\n\nexport function transpose(lists) {\n    return ofArray(map_1((xs_1) => ofArray(xs_1), transpose_1(map_1((xs) => toArray(xs), Array.from(lists)))));\n}\n\n","import { reverse, empty, cons, fold } from \"../fable-library.3.1.11/List.js\";\nimport { uncurry } from \"../fable-library.3.1.11/Util.js\";\nimport { toString } from \"../fable-library.3.1.11/Types.js\";\nimport { join } from \"../fable-library.3.1.11/String.js\";\n\nexport function Helpers_extractClasses(xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const classes = tupledArg[0];\n        const props = tupledArg[1];\n        return (x) => {\n            const matchValue = x;\n            return (matchValue[0] === \"className\") ? [cons(toString(matchValue[1]), classes), props] : [classes, cons(x, props)];\n        };\n    }), [empty(), empty()], reverse(xs));\n}\n\nexport function Helpers_combineClasses(cn, xs) {\n    const tupledArg = Helpers_extractClasses(xs);\n    return cons([\"className\", join(\" \", cons(cn, tupledArg[0]))], tupledArg[1]);\n}\n\n","import { compare, physicalHash, equals, structuralHash } from \"./Util.js\";\n\nexport function HashIdentity_FromFunctions(hash, eq) {\n    return {\n        Equals(x, y) {\n            return eq(x, y);\n        },\n        GetHashCode(x_1) {\n            return hash(x_1);\n        },\n    };\n}\n\nexport function HashIdentity_Structural() {\n    return HashIdentity_FromFunctions((obj) => structuralHash(obj), (e1, e2) => equals(e1, e2));\n}\n\nexport function HashIdentity_Reference() {\n    return HashIdentity_FromFunctions((obj) => physicalHash(obj), (e1, e2) => (e1 === e2));\n}\n\nexport function ComparisonIdentity_FromFunction(comparer) {\n    return {\n        Compare(x, y) {\n            return comparer(x, y);\n        },\n    };\n}\n\nexport function ComparisonIdentity_Structural() {\n    return ComparisonIdentity_FromFunction((e1, e2) => compare(e1, e2));\n}\n\n","import { substring, format, isNullOrEmpty, join } from \"./String.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { clear, int32ToString } from \"./Util.js\";\nimport { toString } from \"./Types.js\";\n\nexport class StringBuilder {\n    constructor(value, capacity) {\n        this.buf = [];\n        if (!isNullOrEmpty(value)) {\n            void (this.buf.push(value));\n        }\n    }\n    toString() {\n        const __ = this;\n        return join(\"\", __.buf);\n    }\n}\n\nexport function StringBuilder$reflection() {\n    return class_type(\"System.Text.StringBuilder\", void 0, StringBuilder);\n}\n\nexport function StringBuilder_$ctor_Z18115A39(value, capacity) {\n    return new StringBuilder(value, capacity);\n}\n\nexport function StringBuilder_$ctor_Z524259A4(capacity) {\n    return StringBuilder_$ctor_Z18115A39(\"\", capacity);\n}\n\nexport function StringBuilder_$ctor_Z721C83C5(value) {\n    return StringBuilder_$ctor_Z18115A39(value, 16);\n}\n\nexport function StringBuilder_$ctor() {\n    return StringBuilder_$ctor_Z18115A39(\"\", 16);\n}\n\nexport function StringBuilder__Append_Z721C83C5(x, s) {\n    void (x.buf.push(s));\n    return x;\n}\n\nexport function StringBuilder__Append_244C7CD6(x, c) {\n    void (x.buf.push(c));\n    return x;\n}\n\nexport function StringBuilder__Append_Z524259A4(x, o) {\n    void (x.buf.push(int32ToString(o)));\n    return x;\n}\n\nexport function StringBuilder__Append_5E38073B(x, o) {\n    void (x.buf.push(o.toString()));\n    return x;\n}\n\nexport function StringBuilder__Append_Z1FBCCD16(x, o) {\n    void (x.buf.push(toString(o)));\n    return x;\n}\n\nexport function StringBuilder__Append_4E60E31B(x, o) {\n    void (x.buf.push(toString(o)));\n    return x;\n}\n\nexport function StringBuilder__Append_695F1130(x, cs) {\n    void (x.buf.push(cs.join('')));\n    return x;\n}\n\nexport function StringBuilder__Append_43A65C09(x, s) {\n    void (x.buf.push(toString(s)));\n    return x;\n}\n\nexport function StringBuilder__AppendFormat_433E080(x, fmt, o) {\n    void (x.buf.push(format(fmt, o)));\n    return x;\n}\n\nexport function StringBuilder__AppendLine(x) {\n    void (x.buf.push(\"\\n\"));\n    return x;\n}\n\nexport function StringBuilder__AppendLine_Z721C83C5(x, s) {\n    void (x.buf.push(s));\n    void (x.buf.push(\"\\n\"));\n    return x;\n}\n\nexport function StringBuilder__get_Length(x) {\n    let len = 0;\n    for (let i = x.buf.length - 1; i >= 0; i--) {\n        len = ((len + x.buf[i].length) | 0);\n    }\n    return len | 0;\n}\n\nexport function StringBuilder__ToString_Z37302880(x, firstIndex, length) {\n    return substring(toString(x), firstIndex, length);\n}\n\nexport function StringBuilder__Clear(x) {\n    clear(x.buf);\n    return x;\n}\n\n","import { structuralHash, equals } from \"./Util.js\";\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\n\nexport const LanguagePrimitives_GenericEqualityComparer = {\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\n        return equals(x, y);\n    },\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\n        return structuralHash(x_1);\n    },\n};\n\nexport const LanguagePrimitives_GenericEqualityERComparer = {\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\n        return equals(x, y);\n    },\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\n        return structuralHash(x_1);\n    },\n};\n\nexport function LanguagePrimitives_FastGenericComparer() {\n    return ComparisonIdentity_Structural();\n}\n\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\n    return ComparisonIdentity_Structural();\n}\n\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\n    return HashIdentity_Structural();\n}\n\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\n    return HashIdentity_Structural();\n}\n\nexport function Operators_Failure(message) {\n    return new Error(message);\n}\n\nexport function Operators_FailurePattern(exn) {\n    return exn.message;\n}\n\nexport function Operators_NullArg(x) {\n    throw (new Error(x));\n}\n\nexport function Operators_Using(resource, action) {\n    try {\n        return action(resource);\n    }\n    finally {\n        if (equals(resource, null)) {\n        }\n        else {\n            resource.Dispose();\n        }\n    }\n}\n\nexport function Operators_Lock(_lockObj, action) {\n    return action();\n}\n\nexport function ExtraTopLevelOperators_LazyPattern(input) {\n    return input.Value;\n}\n\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\n    return format.cont((s) => {\n        void StringBuilder__Append_Z721C83C5(builder, s);\n        return continuation();\n    });\n}\n\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\n    }, builder, format);\n}\n\n","import { equals, isArrayLike, isDisposable, toIterator, getEnumerator } from \"./Util.js\";\nimport { toString } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { Operators_NullArg } from \"./FSharp.Core.js\";\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\n\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\n\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\n\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\n\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\n\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\n\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\n\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\n\nexport function Enumerator_noReset() {\n    throw (new Error(SR_resetNotSupported));\n}\n\nexport function Enumerator_notStarted() {\n    throw (new Error(SR_enumerationNotStarted));\n}\n\nexport function Enumerator_alreadyFinished() {\n    throw (new Error(SR_enumerationAlreadyFinished));\n}\n\nexport class Enumerator_Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    toString() {\n        const xs = this;\n        const maxCount = 4;\n        let i = 0;\n        let str = \"seq [\";\n        const e = getEnumerator(xs);\n        try {\n            while ((i < maxCount) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n                if (i > 0) {\n                    str = (str + \"; \");\n                }\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\n                i = ((i + 1) | 0);\n            }\n            if (i === maxCount) {\n                str = (str + \"; ...\");\n            }\n            return str + \"]\";\n        }\n        finally {\n            e.Dispose();\n        }\n    }\n    GetEnumerator() {\n        const x = this;\n        return x.f();\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const x = this;\n        return x.f();\n    }\n}\n\nexport function Enumerator_Seq$reflection(gen0) {\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\n}\n\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\n    return new Enumerator_Seq(f);\n}\n\nexport class Enumerator_FromFunctions$1 {\n    constructor(current, next, dispose) {\n        this.current = current;\n        this.next = next;\n        this.dispose = dispose;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        const __ = this;\n        return __.current();\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        const __ = this;\n        return __.current();\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const __ = this;\n        return __.next();\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        return Enumerator_noReset();\n    }\n    Dispose() {\n        const __ = this;\n        __.dispose();\n    }\n}\n\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\n}\n\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\n    return new Enumerator_FromFunctions$1(current, next, dispose);\n}\n\nexport function Enumerator_cast(e) {\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\n        if (isDisposable(e)) {\n            e.Dispose();\n        }\n    });\n}\n\nexport function Enumerator_concat(sources) {\n    let outerOpt = void 0;\n    let innerOpt = void 0;\n    let started = false;\n    let finished = false;\n    let curr = void 0;\n    const finish = () => {\n        finished = true;\n        if (innerOpt != null) {\n            const inner = innerOpt;\n            try {\n                inner.Dispose();\n            }\n            finally {\n                innerOpt = (void 0);\n            }\n        }\n        if (outerOpt != null) {\n            const outer = outerOpt;\n            try {\n                outer.Dispose();\n            }\n            finally {\n                outerOpt = (void 0);\n            }\n        }\n    };\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (!started) {\n            Enumerator_notStarted();\n        }\n        else if (finished) {\n            Enumerator_alreadyFinished();\n        }\n        if (curr != null) {\n            return value_1(curr);\n        }\n        else {\n            return Enumerator_alreadyFinished();\n        }\n    }, () => {\n        let copyOfStruct;\n        if (!started) {\n            started = true;\n        }\n        if (finished) {\n            return false;\n        }\n        else {\n            let res = void 0;\n            while (res == null) {\n                const matchValue = [outerOpt, innerOpt];\n                if (matchValue[0] != null) {\n                    if (matchValue[1] != null) {\n                        const inner_1 = matchValue[1];\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                            res = true;\n                        }\n                        else {\n                            try {\n                                inner_1.Dispose();\n                            }\n                            finally {\n                                innerOpt = (void 0);\n                            }\n                        }\n                    }\n                    else {\n                        const outer_1 = matchValue[0];\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                            innerOpt = (copyOfStruct = ie, getEnumerator(copyOfStruct));\n                        }\n                        else {\n                            finish();\n                            res = false;\n                        }\n                    }\n                }\n                else {\n                    outerOpt = getEnumerator(sources);\n                }\n            }\n            return value_1(res);\n        }\n    }, () => {\n        if (!finished) {\n            finish();\n        }\n    });\n}\n\nexport function Enumerator_enumerateThenFinally(f, e) {\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\n        try {\n            e.Dispose();\n        }\n        finally {\n            f();\n        }\n    });\n}\n\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\n    let started = false;\n    let curr = void 0;\n    let state = some(openf());\n    const dispose = () => {\n        if (state != null) {\n            const x_1 = value_1(state);\n            try {\n                closef(x_1);\n            }\n            finally {\n                state = (void 0);\n            }\n        }\n    };\n    const finish = () => {\n        try {\n            dispose();\n        }\n        finally {\n            curr = (void 0);\n        }\n    };\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (!started) {\n            Enumerator_notStarted();\n        }\n        if (curr != null) {\n            return value_1(curr);\n        }\n        else {\n            return Enumerator_alreadyFinished();\n        }\n    }, () => {\n        if (!started) {\n            started = true;\n        }\n        if (state != null) {\n            const s = value_1(state);\n            let matchValue_1;\n            try {\n                matchValue_1 = compute(s);\n            }\n            catch (matchValue) {\n                finish();\n                throw matchValue;\n            }\n            if (matchValue_1 != null) {\n                curr = matchValue_1;\n                return true;\n            }\n            else {\n                finish();\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }, dispose);\n}\n\nexport function Enumerator_unfold(f, state) {\n    let curr = void 0;\n    let acc = state;\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (curr != null) {\n            const st = curr[1];\n            return curr[0];\n        }\n        else {\n            return Enumerator_notStarted();\n        }\n    }, () => {\n        curr = f(acc);\n        if (curr != null) {\n            const x_1 = curr[0];\n            const st_1 = curr[1];\n            acc = st_1;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }, () => {\n    });\n}\n\nexport function indexNotFound() {\n    throw (new Error(SR_keyNotFoundAlt));\n}\n\nexport function checkNonNull(argName, arg) {\n    if (arg == null) {\n        Operators_NullArg(argName);\n    }\n}\n\nexport function mkSeq(f) {\n    return Enumerator_Seq_$ctor_673A07F2(f);\n}\n\nexport function ofSeq(xs) {\n    checkNonNull(\"source\", xs);\n    return getEnumerator(xs);\n}\n\nexport function delay(generator) {\n    return mkSeq(() => getEnumerator(generator()));\n}\n\nexport function concat(sources) {\n    return mkSeq(() => Enumerator_concat(sources));\n}\n\nexport function unfold(generator, state) {\n    return mkSeq(() => Enumerator_unfold(generator, state));\n}\n\nexport function empty() {\n    return delay(() => (new Array(0)));\n}\n\nexport function singleton(x) {\n    return delay(() => singleton_1(x));\n}\n\nexport function ofArray(arr) {\n    return arr;\n}\n\nexport function toArray(xs) {\n    if (isArrayLike(xs)) {\n        return xs;\n    }\n    else if (xs instanceof FSharpList) {\n        return toArray_1(xs);\n    }\n    else {\n        return Array.from(xs);\n    }\n}\n\nexport function ofList(xs) {\n    return xs;\n}\n\nexport function toList(xs) {\n    if (isArrayLike(xs)) {\n        return ofArray_1(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return xs;\n    }\n    else {\n        return ofSeq_1(xs);\n    }\n}\n\nexport function generate(create, compute, dispose) {\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\n}\n\nexport function generateIndexed(create, compute, dispose) {\n    return mkSeq(() => {\n        let i = -1;\n        return Enumerator_generateWhileSome(create, (x) => {\n            i = ((i + 1) | 0);\n            return compute(i, x);\n        }, dispose);\n    });\n}\n\nexport function append(xs, ys) {\n    return concat([xs, ys]);\n}\n\nexport function cast(xs) {\n    return mkSeq(() => {\n        checkNonNull(\"source\", xs);\n        return Enumerator_cast(getEnumerator(xs));\n    });\n}\n\nexport function choose(chooser, xs) {\n    return generate(() => ofSeq(xs), (e) => {\n        let curr = void 0;\n        while ((curr == null) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return curr;\n    }, (e_1) => {\n        e_1.Dispose();\n    });\n}\n\nexport function compareWith(comparer, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let c = 0;\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\n            while (((c === 0) ? b1 : false) ? b2 : false) {\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\n                if (c === 0) {\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\n                }\n            }\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\n        }\n        finally {\n            e2.Dispose();\n        }\n    }\n    finally {\n        e1.Dispose();\n    }\n}\n\nexport function contains(value, xs, comparer) {\n    const e = ofSeq(xs);\n    try {\n        let found = false;\n        while ((!found) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return found;\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function enumerateFromFunctions(create, moveNext, current) {\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\n        const matchValue = x_1;\n        if (isDisposable(matchValue)) {\n            matchValue.Dispose();\n        }\n    });\n}\n\nexport function enumerateThenFinally(source, compensation) {\n    const compensation_1 = compensation;\n    return mkSeq(() => {\n        try {\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\n        }\n        catch (matchValue) {\n            compensation_1();\n            throw matchValue;\n        }\n    });\n}\n\nexport function enumerateUsing(resource, source) {\n    const compensation = () => {\n        if (equals(resource, null)) {\n        }\n        else {\n            let copyOfStruct = resource;\n            copyOfStruct.Dispose();\n        }\n    };\n    return mkSeq(() => {\n        try {\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\n        }\n        catch (matchValue_1) {\n            compensation();\n            throw matchValue_1;\n        }\n    });\n}\n\nexport function enumerateWhile(guard, xs) {\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\n}\n\nexport function filter(f, xs) {\n    return choose((x) => {\n        if (f(x)) {\n            return some(x);\n        }\n        else {\n            return void 0;\n        }\n    }, xs);\n}\n\nexport function exists(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        let found = false;\n        while ((!found) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return found;\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function exists2(predicate, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let found = false;\n            while (((!found) ? e1[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            return found;\n        }\n        finally {\n            e2.Dispose();\n        }\n    }\n    finally {\n        e1.Dispose();\n    }\n}\n\nexport function exactlyOne(xs) {\n    const e = ofSeq(xs);\n    try {\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\n            }\n            else {\n                return v;\n            }\n        }\n        else {\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\n        }\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function tryExactlyOne(xs) {\n    const e = ofSeq(xs);\n    try {\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\n        }\n        else {\n            return void 0;\n        }\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function tryFind(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        let res = void 0;\n        while ((res == null) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (predicate(c)) {\n                res = some(c);\n            }\n        }\n        return res;\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function find(predicate, xs) {\n    const matchValue = tryFind(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function tryFindBack(predicate, xs) {\n    return tryFindBack_1(predicate, toArray(xs));\n}\n\nexport function findBack(predicate, xs) {\n    const matchValue = tryFindBack(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function tryFindIndex(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (i_mut) => {\n            loop:\n            while (true) {\n                const i = i_mut;\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\n                        return i;\n                    }\n                    else {\n                        i_mut = (i + 1);\n                        continue loop;\n                    }\n                }\n                else {\n                    return void 0;\n                }\n                break;\n            }\n        };\n        return loop(0);\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function findIndex(predicate, xs) {\n    const matchValue = tryFindIndex(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return matchValue | 0;\n    }\n}\n\nexport function tryFindIndexBack(predicate, xs) {\n    return tryFindIndexBack_1(predicate, toArray(xs));\n}\n\nexport function findIndexBack(predicate, xs) {\n    const matchValue = tryFindIndexBack(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return matchValue | 0;\n    }\n}\n\nexport function fold(folder, state, xs) {\n    const e = ofSeq(xs);\n    try {\n        let acc = state;\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return acc;\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function foldBack(folder, xs, state) {\n    return foldBack_1(folder, toArray(xs), state);\n}\n\nexport function fold2(folder, state, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let acc = state;\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            return acc;\n        }\n        finally {\n            e2.Dispose();\n        }\n    }\n    finally {\n        e1.Dispose();\n    }\n}\n\nexport function foldBack2(folder, xs, ys, state) {\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\n}\n\nexport function forAll(predicate, xs) {\n    return !exists((x) => (!predicate(x)), xs);\n}\n\nexport function forAll2(predicate, xs, ys) {\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\n}\n\nexport function tryHead(xs) {\n    if (isArrayLike(xs)) {\n        return tryHead_1(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return tryHead_2(xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\n        }\n        finally {\n            e.Dispose();\n        }\n    }\n}\n\nexport function head(xs) {\n    const matchValue = tryHead(xs);\n    if (matchValue == null) {\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function initialize(count, f) {\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\n}\n\nexport function initializeInfinite(f) {\n    return initialize(2147483647, f);\n}\n\nexport function isEmpty(xs) {\n    if (isArrayLike(xs)) {\n        return xs.length === 0;\n    }\n    else if (xs instanceof FSharpList) {\n        return isEmpty_1(xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\n        }\n        finally {\n            e.Dispose();\n        }\n    }\n}\n\nexport function tryItem(index, xs) {\n    if (isArrayLike(xs)) {\n        return tryItem_1(index, xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return tryItem_2(index, xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            const loop = (index_1_mut) => {\n                loop:\n                while (true) {\n                    const index_1 = index_1_mut;\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        return void 0;\n                    }\n                    else if (index_1 === 0) {\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                    }\n                    else {\n                        index_1_mut = (index_1 - 1);\n                        continue loop;\n                    }\n                    break;\n                }\n            };\n            return loop(index);\n        }\n        finally {\n            e.Dispose();\n        }\n    }\n}\n\nexport function item(index, xs) {\n    const matchValue = tryItem(index, xs);\n    if (matchValue == null) {\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function iterate(action, xs) {\n    return fold((unitVar0, x) => {\n        action(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(action, xs, ys) {\n    return fold2((unitVar0, x, y) => {\n        action(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(action, xs) {\n    void fold((i, x) => {\n        action(i, x);\n        return (i + 1) | 0;\n    }, 0, xs);\n}\n\nexport function iterateIndexed2(action, xs, ys) {\n    void fold2((i, x, y) => {\n        action(i, x, y);\n        return (i + 1) | 0;\n    }, 0, xs, ys);\n}\n\nexport function tryLast(xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (acc_mut) => {\n            loop:\n            while (true) {\n                const acc = acc_mut;\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    return acc;\n                }\n                else {\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    continue loop;\n                }\n                break;\n            }\n        };\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function last(xs) {\n    const matchValue = tryLast(xs);\n    if (matchValue == null) {\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function length(xs) {\n    if (isArrayLike(xs)) {\n        return xs.length | 0;\n    }\n    else if (xs instanceof FSharpList) {\n        return length_1(xs) | 0;\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            let count = 0;\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                count = ((count + 1) | 0);\n            }\n            return count | 0;\n        }\n        finally {\n            e.Dispose();\n        }\n    }\n}\n\nexport function map(mapping, xs) {\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\n        e_1.Dispose();\n    });\n}\n\nexport function mapIndexed(mapping, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\n        e_1.Dispose();\n    });\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(mapping, xs, ys) {\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\n    }, (tupledArg_1) => {\n        try {\n            tupledArg_1[0].Dispose();\n        }\n        finally {\n            tupledArg_1[1].Dispose();\n        }\n    });\n}\n\nexport function mapIndexed2(mapping, xs, ys) {\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\n    }, (tupledArg_1) => {\n        try {\n            tupledArg_1[0].Dispose();\n        }\n        finally {\n            tupledArg_1[1].Dispose();\n        }\n    });\n}\n\nexport function map3(mapping, xs, ys, zs) {\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        const e3 = tupledArg[2];\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? e3[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\n    }, (tupledArg_1) => {\n        try {\n            tupledArg_1[0].Dispose();\n        }\n        finally {\n            try {\n                tupledArg_1[1].Dispose();\n            }\n            finally {\n                tupledArg_1[2].Dispose();\n            }\n        }\n    });\n}\n\nexport function readOnly(xs) {\n    checkNonNull(\"source\", xs);\n    return map((x) => x, xs);\n}\n\nexport function cache(xs) {\n    let cached = false;\n    const xsCache = [];\n    return delay(() => {\n        if (!cached) {\n            cached = true;\n            return map((x) => {\n                void (xsCache.push(x));\n                return x;\n            }, xs);\n        }\n        else {\n            return xsCache;\n        }\n    });\n}\n\nexport function allPairs(xs, ys) {\n    const ysCache = cache(ys);\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\n}\n\nexport function mapFold(mapping, state, xs) {\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\n    return [readOnly(patternInput[0]), patternInput[1]];\n}\n\nexport function mapFoldBack(mapping, xs, state) {\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\n    return [readOnly(patternInput[0]), patternInput[1]];\n}\n\nexport function tryPick(chooser, xs) {\n    const e = ofSeq(xs);\n    try {\n        let res = void 0;\n        while ((res == null) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return res;\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function pick(chooser, xs) {\n    const matchValue = tryPick(chooser, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function reduce(folder, xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (acc_mut) => {\n            loop:\n            while (true) {\n                const acc = acc_mut;\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                    continue loop;\n                }\n                else {\n                    return acc;\n                }\n                break;\n            }\n        };\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else {\n            throw (new Error(SR_inputSequenceEmpty));\n        }\n    }\n    finally {\n        e.Dispose();\n    }\n}\n\nexport function reduceBack(folder, xs) {\n    const arr = toArray(xs);\n    if (arr.length > 0) {\n        return arr.reduceRight(folder);\n    }\n    else {\n        throw (new Error(SR_inputSequenceEmpty));\n    }\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reverse(xs) {\n    return delay(() => ofArray(reverse_1(toArray(xs))));\n}\n\nexport function scan(folder, state, xs) {\n    return delay(() => {\n        let acc = state;\n        return concat([singleton(state), map((x) => {\n            acc = folder(acc, x);\n            return acc;\n        }, xs)]);\n    });\n}\n\nexport function scanBack(folder, xs, state) {\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\n}\n\nexport function skip(count, xs) {\n    return mkSeq(() => {\n        const e = ofSeq(xs);\n        try {\n            for (let i = 1; i <= count; i++) {\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\n                }\n            }\n            return Enumerator_enumerateThenFinally(() => {\n            }, e);\n        }\n        catch (matchValue) {\n            e.Dispose();\n            throw matchValue;\n        }\n    });\n}\n\nexport function skipWhile(predicate, xs) {\n    return delay(() => {\n        let skipped = true;\n        return filter((x) => {\n            if (skipped) {\n                skipped = predicate(x);\n            }\n            return !skipped;\n        }, xs);\n    });\n}\n\nexport function tail(xs) {\n    return skip(1, xs);\n}\n\nexport function take(count, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if (i < count) {\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\n            }\n        }\n        else {\n            return void 0;\n        }\n    }, (e_1) => {\n        e_1.Dispose();\n    });\n}\n\nexport function takeWhile(predicate, xs) {\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() ? predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : false) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\n        e_1.Dispose();\n    });\n}\n\nexport function truncate(count, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\n        e_1.Dispose();\n    });\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function collect(mapping, xs) {\n    return delay(() => concat(map(mapping, xs)));\n}\n\nexport function where(predicate, xs) {\n    return filter(predicate, xs);\n}\n\nexport function pairwise(xs) {\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\n}\n\nexport function splitInto(chunks, xs) {\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), splitInto_1(chunks, toArray(xs)))));\n}\n\nexport function windowed(windowSize, xs) {\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), windowed_1(windowSize, toArray(xs)))));\n}\n\nexport function transpose(xss) {\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), transpose_1(map_1((xs_1) => toArray(xs_1), toArray(xss))))));\n}\n\nexport function sortWith(comparer, xs) {\n    return delay(() => {\n        const arr = toArray(xs);\n        arr.sort(comparer);\n        return ofArray(arr);\n    });\n}\n\nexport function sort(xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\n}\n\nexport function sortBy(projection, xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\n}\n\nexport function sortDescending(xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    let count = 0;\n    return averager.DivideByInt(fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs), count);\n}\n\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    return averager.DivideByInt(fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs), count);\n}\n\nexport function permute(f, xs) {\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), chunkBySize_1(chunkSize, toArray(xs)))));\n}\n\n","import { useLayoutEffectWithDeps, useLayoutEffect, useEffectWithDeps, useEffect, useDebugValue } from \"./ReactInterop.js\";\nimport { class_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { iterate } from \"../fable-library.3.1.11/Seq.js\";\nimport { defaultArg, some, toArray } from \"../fable-library.3.1.11/Option.js\";\nimport { Interop_reactApi } from \"./Interop.fs.js\";\nimport { curry, uncurry } from \"../fable-library.3.1.11/Util.js\";\nimport { useState } from \"react\";\nimport * as react from \"react\";\n\nexport const ReactInterop_useDebugValueWithFormatter = useDebugValue;\n\nexport const ReactInterop_useEffect = useEffect;\n\nexport const ReactInterop_useEffectWithDeps = useEffectWithDeps;\n\nexport const ReactInterop_useLayoutEffect = useLayoutEffect;\n\nexport const ReactInterop_useLayoutEffectWithDeps = useLayoutEffectWithDeps;\n\nexport class Internal {\n    constructor() {\n    }\n}\n\nexport function Internal$reflection() {\n    return class_type(\"Feliz.Internal\", void 0, Internal);\n}\n\nexport function Internal_$ctor() {\n    return new Internal();\n}\n\n(() => {\n})();\n\nexport function Internal_functionComponent_Z1B155329(renderElement, name, withKey) {\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    console.warn(some(\"Feliz: using React.functionComponent in Fable 3 is obsolete, please consider using the [\\u003cReactComponent\\u003e] attribute instead which makes Feliz output better Javascript code that is compatible with react-refresh\"));\n    return (props) => Interop_reactApi.createElement(renderElement, Internal_propsWithKey(withKey, props));\n}\n\nexport function Internal_memo_Z603636D8(renderElement, name, areEqual, withKey) {\n    const memoElementType = Interop_reactApi.memo(renderElement, uncurry(2, defaultArg(curry(2, areEqual), null)));\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    return (props) => Interop_reactApi.createElement(memoElementType, Internal_propsWithKey(withKey, props));\n}\n\nfunction Internal_propsWithKey(withKey, props) {\n    if (withKey == null) {\n        return props;\n    }\n    else {\n        const f = withKey;\n        props.key = f(props);\n        return props;\n    }\n}\n\nexport class React {\n    constructor() {\n    }\n}\n\nexport function React$reflection() {\n    return class_type(\"Feliz.React\", void 0, React);\n}\n\nexport function React_createDisposable_3A5B6456(dispose) {\n    return {\n        Dispose() {\n            dispose();\n        },\n    };\n}\n\nexport function useReact_useState_FCFD9EF(initializer) {\n    return Interop_reactApi.useState(initializer);\n}\n\nexport function useReact_useReducer_2B9E6EA0(update, initialState) {\n    return Interop_reactApi.useReducer(update, initialState);\n}\n\nexport function useReact_useEffect_Z5ECA432F(effect) {\n    ReactInterop_useEffect(effect);\n}\n\nexport function useReact_useEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_Z5ECA432F(effect) {\n    ReactInterop_useLayoutEffect(effect);\n}\n\nexport function useReact_useLayoutEffect_Z5234A374(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);\n}\n\nexport function useReact_useLayoutEffect_3A5B6456(effect) {\n    ReactInterop_useLayoutEffect((_arg1) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useLayoutEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps((_arg2) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useEffectOnce_3A5B6456(effect) {\n    useReact_useEffect_Z101E1A95(effect, []);\n}\n\nexport function useReact_useEffectOnce_Z5ECA432F(effect) {\n    useReact_useEffect_Z5234A374(effect, []);\n}\n\nexport function useReact_useEffectOnce_6E825304(effect) {\n    useReact_useEffect_Z5234A374(() => {\n        const disposeOption = effect();\n        return {\n            Dispose() {\n                iterate((d) => {\n                    let copyOfStruct = d;\n                    copyOfStruct.Dispose();\n                }, toArray(disposeOption));\n            },\n        };\n    }, []);\n}\n\nexport function useReact_useEffect_3A5B6456(effect) {\n    ReactInterop_useEffect((_arg3) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\nexport function useReact_useEffect_Z101E1A95(effect, dependencies) {\n    ReactInterop_useEffectWithDeps((_arg4) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\nexport function useReact_useDebugValue_Z721C83C5(value) {\n    ReactInterop_useDebugValueWithFormatter(value, (x) => x);\n}\n\nexport function useReact_useDebugValue_77A55D6D(value, formatter) {\n    ReactInterop_useDebugValueWithFormatter(value, formatter);\n}\n\nexport function useReact_useCallback_93353E(callbackFunction, dependencies) {\n    return Interop_reactApi.useCallback(callbackFunction, defaultArg(dependencies, []));\n}\n\nexport function useReact_useRef_1505(initialValue) {\n    return Interop_reactApi.useRef(initialValue);\n}\n\nexport function useReact_useInputRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useButtonRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useElementRef() {\n    return useReact_useRef_1505(void 0);\n}\n\nexport function useReact_useMemo_CF4EA67(createFunction, dependencies) {\n    return Interop_reactApi.useMemo(createFunction, defaultArg(dependencies, []));\n}\n\nexport function React_functionComponent_2F9D7239(render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, void 0, withKey);\n}\n\nexport function React_functionComponent_Z4C5FE1BE(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329(render, name, withKey);\n}\n\nexport function React_functionComponent_19A12FB2(render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, withKey);\n}\n\nexport function React_functionComponent_2E1DD889(name, render, withKey) {\n    return Internal_functionComponent_Z1B155329((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, withKey);\n}\n\nexport function React_memo_62A0F746(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, void 0, areEqual, withKey);\n}\n\nexport function React_memo_6648A89D(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8(render, name, areEqual, withKey);\n}\n\nexport function React_memo_C2C6BED(render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), void 0, areEqual, withKey);\n}\n\nexport function React_memo_Z4FCC584A(name, render, withKey, areEqual) {\n    return Internal_memo_Z603636D8((arg) => react.createElement(react.Fragment, {}, ...render(arg)), name, areEqual, withKey);\n}\n\nexport function React_createContext_1AE444D8(name, defaultValue) {\n    const contextObject = Interop_reactApi.createContext(defaultArg(defaultValue, void 0));\n    iterate((name_1) => {\n        contextObject.displayName = name_1;\n    }, toArray(name));\n    return contextObject;\n}\n\nexport function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, child);\n}\n\nexport function React_contextProvider_138D2F56(contextObject, contextValue, children) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, ...children);\n}\n\nexport function React_contextConsumer_Z68910595(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, render);\n}\n\nexport function React_contextConsumer_56D53A40(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, null, (arg) => react.createElement(react.Fragment, {}, ...render(arg)));\n}\n\nexport function useReact_useContext_37FA55CF(contextObject) {\n    return Interop_reactApi.useContext(contextObject);\n}\n\nexport function useReact_useCallbackRef_7C4B0DD6(callback) {\n    const lastRenderCallbackRef = useReact_useRef_1505(callback);\n    const callbackRef = useReact_useCallback_93353E((arg) => lastRenderCallbackRef.current(arg), []);\n    useReact_useLayoutEffect_3A5B6456(() => {\n        lastRenderCallbackRef.current = callback;\n    });\n    return callbackRef;\n}\n\nexport const React_useStateWithUpdater_1505 = useState;\n\nexport function React_forwardRef_3790D881(render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\nexport function React_forwardRef_7DC3DB1A(name, render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    render.displayName = name;\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\nexport function React_strictMode_6E3A73D(children) {\n    return Interop_reactApi.createElement(Interop_reactApi.StrictMode, void 0, ...children);\n}\n\nexport function React_lazy$0027_4712D3AE(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy((() => dynamicImport)), props);\n}\n\nexport function React_lazy$0027_Z3D8450FC(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(dynamicImport), props);\n}\n\nexport function React_suspense_6E3A73D(children) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: null,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function React_suspense_Z3796A576(children, fallback) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: fallback,\n    }, Object.assign({}, o)), ...children);\n}\n\nexport function useReact_useImperativeHandle_596DDC25(ref, createHandle) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle);\n}\n\nexport function useReact_useImperativeHandle_Z12F09548(ref, createHandle, dependencies) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);\n}\n\nexport function useFeliz_React__React_useState_Static_1505(initial) {\n    return Interop_reactApi.useState(initial);\n}\n\nexport const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = useState;\n\n","import {\n    useEffect as useEffectReact,\n    useLayoutEffect as useLayoutEffectReact,\n    useDebugValue as useDebugValueReact } from 'react'\n\nexport const useEffect = getDisposable => {\n    useEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    })\n}\n\nexport const useEffectWithDeps = (getDisposable, deps) => {\n    useEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    }, deps)\n}\n\nexport const useLayoutEffect = getDisposable => {\n    useLayoutEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    })\n}\n\nexport const useLayoutEffectWithDeps = (getDisposable, deps) => {\n    useLayoutEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    }, deps)\n}\n\nexport const useDebugValue = (value, formatter) => useDebugValueReact(value, formatter)","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\n\nexport class FSharpResult$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\n\nexport function FSharpResult$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\n\nexport function Result_Map(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, mapping(result.fields[0]));\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport function Result_MapError(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, mapping(result.fields[0]));\n    }\n}\n\nexport function Result_Bind(binder, result) {\n    if (result.tag === 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\n\nexport function FSharpChoice$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\n\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\n\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\n\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\n\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\n\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\n\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\n\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\n\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\n\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\n\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\n\nexport function Choice_makeChoice1Of2(x) {\n    return new FSharpChoice$2(0, x);\n}\n\nexport function Choice_makeChoice2Of2(x) {\n    return new FSharpChoice$2(1, x);\n}\n\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","import { Result_MapError, Result_Map, FSharpResult$2 } from \"../fable-library.3.1.11/Choice.js\";\nimport { class_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { equals, getEnumerator } from \"../fable-library.3.1.11/Util.js\";\n\nexport function reject(reason) {\n    return Promise.reject(reason);\n}\n\nexport function result(a) {\n    return a.then(((arg) => (new FSharpResult$2(0, arg))),((arg_1) => (new FSharpResult$2(1, arg_1))));\n}\n\nexport function mapResult(fn, a) {\n    return a.then(((result_1) => Result_Map(fn, result_1)));\n}\n\nexport function bindResult(fn, a) {\n    return a.then(((a_1) => {\n        if (a_1.tag === 1) {\n            return Promise.resolve((new FSharpResult$2(1, a_1.fields[0])));\n        }\n        else {\n            return result(fn(a_1.fields[0]));\n        }\n    }));\n}\n\nexport function mapResultError(fn, a) {\n    return a.then(((result_1) => Result_MapError(fn, result_1)));\n}\n\nexport function tap(fn, a) {\n    return a.then(((x) => {\n        fn(x);\n        return x;\n    }));\n}\n\nexport class PromiseBuilder {\n    constructor() {\n    }\n}\n\nexport function PromiseBuilder$reflection() {\n    return class_type(\"Promise.PromiseBuilder\", void 0, PromiseBuilder);\n}\n\nexport function PromiseBuilder_$ctor() {\n    return new PromiseBuilder();\n}\n\nexport function PromiseBuilder__For_1565554B(x, seq, body) {\n    let p = Promise.resolve(undefined);\n    const enumerator = getEnumerator(seq);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const a = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            p = (p.then((() => body(a))));\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return p;\n}\n\nexport function PromiseBuilder__While_2044D34(x, guard, p) {\n    if (guard()) {\n        return p.then((() => PromiseBuilder__While_2044D34(x, guard, p)));\n    }\n    else {\n        return Promise.resolve(undefined);\n    }\n}\n\nexport function PromiseBuilder__TryFinally_7D49A2FD(x, p, compensation) {\n    return p.then(((x_1) => {\n        compensation();\n        return x_1;\n    }),((er) => {\n        compensation();\n        throw er;\n    }));\n}\n\nexport function PromiseBuilder__Delay_62FBFDE1(x, generator) {\n    return {\n        then: (f1, f2) => {\n            try {\n                return generator().then(f1, f2);\n            }\n            catch (er) {\n                if (equals(f2, null)) {\n                    return Promise.reject(er);\n                }\n                else {\n                    try {\n                        return Promise.resolve(f2(er));\n                    }\n                    catch (er_1) {\n                        return Promise.reject(er_1);\n                    }\n                }\n            }\n        },\n        catch: (f) => {\n            try {\n                return generator().catch(f);\n            }\n            catch (er_2) {\n                try {\n                    return Promise.resolve(f(er_2));\n                }\n                catch (er_3) {\n                    return Promise.reject(er_3);\n                }\n            }\n        },\n    };\n}\n\nexport function PromiseBuilder__Run_212F1D4B(x, p) {\n    return new Promise(((success, fail) => {\n        try {\n            const p_1 = Promise.resolve(p);\n            p_1.then(success, fail);\n        }\n        catch (er) {\n            fail(er);\n        }\n    }));\n}\n\nexport function PromiseBuilder__Using_74F7E79D(x, resource, binder) {\n    return PromiseBuilder__TryFinally_7D49A2FD(x, binder(resource), () => {\n        let copyOfStruct = resource;\n        copyOfStruct.Dispose();\n    });\n}\n\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","import { Union } from \"../fable-library.3.1.11/Types.js\";\nimport { class_type, union_type, obj_type, int32_type, string_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { int32ToString } from \"../fable-library.3.1.11/Util.js\";\nimport { keyValueList } from \"../fable-library.3.1.11/MapUtil.js\";\nimport { result } from \"../Fable.Promise.2.0.0/Promise.fs.js\";\nimport { singleton } from \"../fable-library.3.1.11/List.js\";\n\nexport class Types_HttpRequestHeaders extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Accept\", \"Accept-Charset\", \"Accept-Encoding\", \"Accept-Language\", \"Accept-Datetime\", \"Authorization\", \"Cache-Control\", \"Connection\", \"Cookie\", \"Content-Length\", \"Content-MD5\", \"Content-Type\", \"Date\", \"Expect\", \"Forwarded\", \"From\", \"Host\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Range\", \"If-Unmodified-Since\", \"Max-Forwards\", \"Origin\", \"Pragma\", \"Proxy-Authorization\", \"Range\", \"Referer\", \"SOAPAction\", \"TE\", \"User-Agent\", \"Upgrade\", \"Via\", \"Warning\", \"X-Requested-With\", \"DNT\", \"X-Forwarded-For\", \"X-Forwarded-Host\", \"X-Forwarded-Proto\", \"Front-End-Https\", \"X-Http-Method-Override\", \"X-ATT-DeviceId\", \"X-Wap-Profile\", \"Proxy-Connection\", \"X-UIDH\", \"X-Csrf-Token\", \"Custom\"];\n    }\n}\n\nexport function Types_HttpRequestHeaders$reflection() {\n    return union_type(\"Fetch.Types.HttpRequestHeaders\", [], Types_HttpRequestHeaders, () => [[[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", int32_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"key\", string_type], [\"value\", obj_type]]]);\n}\n\nexport class Types_RequestProperties extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Method\", \"Headers\", \"Body\", \"Mode\", \"Credentials\", \"Cache\"];\n    }\n}\n\nexport function Types_RequestProperties$reflection() {\n    return union_type(\"Fetch.Types.RequestProperties\", [], Types_RequestProperties, () => [[[\"Item\", string_type]], [[\"Item\", class_type(\"Fetch.Types.IHttpRequestHeaders\")]], [[\"Item\", obj_type]], [[\"Item\", string_type]], [[\"Item\", string_type]], [[\"Item\", string_type]]]);\n}\n\nfunction errorString(response) {\n    return (((int32ToString(response.status) + \" \") + (response.statusText)) + \" for URL \") + (response.url);\n}\n\nexport function fetch$(url, init) {\n    const pr = fetch(url, keyValueList(init, 1));\n    return pr.then(((response) => {\n        if (response.ok) {\n            return response;\n        }\n        else {\n            const message = errorString(response);\n            throw (new Error(message));\n        }\n    }));\n}\n\nexport function tryFetch(url, init) {\n    return result(fetch$(url, init));\n}\n\nexport function tryOptionsRequest(url) {\n    return result(fetch$(url, singleton(new Types_RequestProperties(0, \"OPTIONS\"))));\n}\n\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            const isZero = xc.findIndex((xci, idx) => idx >= i && xci > 0) < 0;\n            more = more || !isZero;\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n// export function makeRangeStepFunction(step: Decimal, last: Decimal) {\n//   const stepComparedWithZero = step.cmp(get_Zero);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Decimal) => {\n//     const comparedWithLast = x.cmp(last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { singleton, ofArrayWithTail, head, tail, isEmpty as isEmpty_1, FSharpList, fold as fold_1, empty as empty_1, cons } from \"./List.js\";\nimport { fill } from \"./Array.js\";\nimport { structuralHash, compare, toIterator, equals, getEnumerator, isArrayLike } from \"./Util.js\";\nimport { Record } from \"./Types.js\";\nimport { tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, map as map_1, unfold } from \"./Seq.js\";\nimport { format, join } from \"./String.js\";\nimport { LanguagePrimitives_FastGenericComparer } from \"./FSharp.Core.js\";\n\nexport class MapTreeLeaf$2 {\n    constructor(k, v) {\n        this.k = k;\n        this.v = v;\n    }\n}\n\nexport function MapTreeLeaf$2$reflection(gen0, gen1) {\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\n}\n\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\n    return new MapTreeLeaf$2(k, v);\n}\n\nexport function MapTreeLeaf$2__get_Key(_) {\n    return _.k;\n}\n\nexport function MapTreeLeaf$2__get_Value(_) {\n    return _.v;\n}\n\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\n    constructor(k, v, left, right, h) {\n        super(k, v);\n        this.left = left;\n        this.right = right;\n        this.h = (h | 0);\n    }\n}\n\nexport function MapTreeNode$2$reflection(gen0, gen1) {\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));\n}\n\nexport function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {\n    return new MapTreeNode$2(k, v, left, right, h);\n}\n\nexport function MapTreeNode$2__get_Left(_) {\n    return _.left;\n}\n\nexport function MapTreeNode$2__get_Right(_) {\n    return _.right;\n}\n\nexport function MapTreeNode$2__get_Height(_) {\n    return _.h;\n}\n\nexport function MapTreeModule_empty() {\n    return void 0;\n}\n\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\n    MapTreeModule_sizeAux:\n    while (true) {\n        const acc = acc_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));\n                m_mut = MapTreeNode$2__get_Right(m2);\n                continue MapTreeModule_sizeAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_size(x) {\n    return MapTreeModule_sizeAux(0, x);\n}\n\nexport function MapTreeModule_mk(l, k, v, r) {\n    let hl;\n    const m = l;\n    if (m != null) {\n        const m2 = m;\n        hl = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const m_1 = r;\n    if (m_1 != null) {\n        const m2_1 = m_1;\n        hr = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\n    if (m_2 === 0) {\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n    }\n    else {\n        return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);\n    }\n}\n\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\n    let m_2, m2_2, m_3, m2_3;\n    let t1h;\n    const m = t1;\n    if (m != null) {\n        const m2 = m;\n        t1h = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const m_1 = t2;\n    if (m_1 != null) {\n        const m2_1 = m_1;\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_1(t2);\n        if (matchValue instanceof MapTreeNode$2) {\n            if ((m_2 = MapTreeNode$2__get_Left(matchValue), (m_2 != null) ? (m2_2 = m_2, (m2_2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_2) : 1) : 0) > (t1h + 1)) {\n                const matchValue_1 = value_1(MapTreeNode$2__get_Left(matchValue));\n                if (matchValue_1 instanceof MapTreeNode$2) {\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));\n                }\n                else {\n                    throw (new Error(\"internal error: Map.rebalance\"));\n                }\n            }\n            else {\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Map.rebalance\"));\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_1(t1);\n        if (matchValue_2 instanceof MapTreeNode$2) {\n            if ((m_3 = MapTreeNode$2__get_Right(matchValue_2), (m_3 != null) ? (m2_3 = m_3, (m2_3 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_3) : 1) : 0) > (t2h + 1)) {\n                const matchValue_3 = value_1(MapTreeNode$2__get_Right(matchValue_2));\n                if (matchValue_3 instanceof MapTreeNode$2) {\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));\n                }\n                else {\n                    throw (new Error(\"internal error: Map.rebalance\"));\n                }\n            }\n            else {\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Map.rebalance\"));\n        }\n    }\n    else {\n        return MapTreeModule_mk(t1, k, v, t2);\n    }\n}\n\nexport function MapTreeModule_add(comparer, k, v, m) {\n    if (m != null) {\n        const m2 = m;\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n        if (m2 instanceof MapTreeNode$2) {\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\n            }\n            else if (c === 0) {\n                return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));\n            }\n        }\n        else if (c < 0) {\n            return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);\n        }\n        else if (c === 0) {\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n        }\n        else {\n            return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);\n        }\n    }\n    else {\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\n    }\n}\n\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\n    MapTreeModule_tryFind:\n    while (true) {\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c === 0) {\n                return some(MapTreeLeaf$2__get_Value(m2));\n            }\n            else if (m2 instanceof MapTreeNode$2) {\n                comparer_mut = comparer;\n                k_mut = k;\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2));\n                continue MapTreeModule_tryFind;\n            }\n            else {\n                return void 0;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_find(comparer, k, m) {\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\n    if (matchValue == null) {\n        throw (new Error());\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\n    if (f(k, v)) {\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\n    }\n    else {\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\n    }\n}\n\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {\n    MapTreeModule_partitionAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\n        const acc = [acc_0, acc_1];\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);\n                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Left(m2);\n                acc_0_mut = acc_3[0];\n                acc_1_mut = acc_3[1];\n                continue MapTreeModule_partitionAux;\n            }\n            else {\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_partition(comparer, f, m) {\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\n}\n\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\n    if (f(k, v)) {\n        return MapTreeModule_add(comparer, k, v, acc);\n    }\n    else {\n        return acc;\n    }\n}\n\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\n    MapTreeModule_filterAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);\n                comparer_mut = comparer;\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Right(m2);\n                acc_mut = acc_2;\n                continue MapTreeModule_filterAux;\n            }\n            else {\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_filter(comparer, f, m) {\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\n}\n\nexport function MapTreeModule_spliceOutSuccessor(m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            if (MapTreeNode$2__get_Left(m2) == null) {\n                return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];\n            }\n            else {\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];\n            }\n        }\n        else {\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\n        }\n    }\n    else {\n        throw (new Error(\"internal error: Map.spliceOutSuccessor\"));\n    }\n}\n\nexport function MapTreeModule_remove(comparer, k, m) {\n    if (m != null) {\n        const m2 = m;\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n        if (m2 instanceof MapTreeNode$2) {\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\n            }\n            else if (c === 0) {\n                if (MapTreeNode$2__get_Left(m2) == null) {\n                    return MapTreeNode$2__get_Right(m2);\n                }\n                else if (MapTreeNode$2__get_Right(m2) == null) {\n                    return MapTreeNode$2__get_Left(m2);\n                }\n                else {\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\n                }\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));\n            }\n        }\n        else if (c === 0) {\n            return MapTreeModule_empty();\n        }\n        else {\n            return m;\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\n\nexport function MapTreeModule_change(comparer, k, u, m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c < 0) {\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\n            }\n            else if (c === 0) {\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(m2)));\n                if (matchValue_1 != null) {\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\n                }\n                else if (MapTreeNode$2__get_Left(m2) == null) {\n                    return MapTreeNode$2__get_Right(m2);\n                }\n                else if (MapTreeNode$2__get_Right(m2) == null) {\n                    return MapTreeNode$2__get_Left(m2);\n                }\n                else {\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\n                }\n            }\n            else {\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (c_1 < 0) {\n                const matchValue_2 = u(void 0);\n                if (matchValue_2 != null) {\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_2), MapTreeModule_empty(), m, 2);\n                }\n                else {\n                    return m;\n                }\n            }\n            else if (c_1 === 0) {\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\n                if (matchValue_3 != null) {\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue_3));\n                }\n                else {\n                    return MapTreeModule_empty();\n                }\n            }\n            else {\n                const matchValue_4 = u(void 0);\n                if (matchValue_4 != null) {\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_4), m, MapTreeModule_empty(), 2);\n                }\n                else {\n                    return m;\n                }\n            }\n        }\n    }\n    else {\n        const matchValue = u(void 0);\n        if (matchValue != null) {\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue));\n        }\n        else {\n            return m;\n        }\n    }\n}\n\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\n    MapTreeModule_mem:\n    while (true) {\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\n            if (m2 instanceof MapTreeNode$2) {\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    m_mut = MapTreeNode$2__get_Left(m2);\n                    continue MapTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    m_mut = MapTreeNode$2__get_Right(m2);\n                    continue MapTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\n    MapTreeModule_iterOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Right(m2);\n                continue MapTreeModule_iterOpt;\n            }\n            else {\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_iter(f, m) {\n    MapTreeModule_iterOpt(f, m);\n}\n\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\n    MapTreeModule_tryPickOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));\n                if (matchValue == null) {\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n                    if (matchValue_1 == null) {\n                        f_mut = f;\n                        m_mut = MapTreeNode$2__get_Right(m2);\n                        continue MapTreeModule_tryPickOpt;\n                    }\n                    else {\n                        return matchValue_1;\n                    }\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_tryPick(f, m) {\n    return MapTreeModule_tryPickOpt(f, m);\n}\n\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\n    MapTreeModule_existsOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    m_mut = MapTreeNode$2__get_Right(m2);\n                    continue MapTreeModule_existsOpt;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_exists(f, m) {\n    return MapTreeModule_existsOpt(f, m);\n}\n\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\n    MapTreeModule_forallOpt:\n    while (true) {\n        const f = f_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) ? f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)) : false) {\n                    f_mut = f;\n                    m_mut = MapTreeNode$2__get_Right(m2);\n                    continue MapTreeModule_forallOpt;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_forall(f, m) {\n    return MapTreeModule_forallOpt(f, m);\n}\n\nexport function MapTreeModule_map(f, m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));\n            const v2 = f(MapTreeLeaf$2__get_Value(m2));\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\n        }\n        else {\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\n\nexport function MapTreeModule_mapiOpt(f, m) {\n    if (m != null) {\n        const m2 = m;\n        if (m2 instanceof MapTreeNode$2) {\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));\n            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\n        }\n        else {\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\n        }\n    }\n    else {\n        return MapTreeModule_empty();\n    }\n}\n\nexport function MapTreeModule_mapi(f, m) {\n    return MapTreeModule_mapiOpt(f, m);\n}\n\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\n    MapTreeModule_foldBackOpt:\n    while (true) {\n        const f = f_mut, m = m_mut, x = x_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);\n                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\n                f_mut = f;\n                m_mut = MapTreeNode$2__get_Left(m2);\n                x_mut = x_2;\n                continue MapTreeModule_foldBackOpt;\n            }\n            else {\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_foldBack(f, m, x) {\n    return MapTreeModule_foldBackOpt(f, m, x);\n}\n\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\n    MapTreeModule_foldOpt:\n    while (true) {\n        const f = f_mut, x = x_mut, m = m_mut;\n        if (m != null) {\n            const m2 = m;\n            if (m2 instanceof MapTreeNode$2) {\n                f_mut = f;\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n                m_mut = MapTreeNode$2__get_Right(m2);\n                continue MapTreeModule_foldOpt;\n            }\n            else {\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_fold(f, x, m) {\n    return MapTreeModule_foldOpt(f, x, m);\n}\n\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\n        foldFromTo:\n        while (true) {\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\n            if (m_1 != null) {\n                const m2 = m_1;\n                if (m2 instanceof MapTreeNode$2) {\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;\n                    const x_3 = ((cLoKey <= 0) ? (cKeyHi <= 0) : false) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;\n                    if (cKeyHi < 0) {\n                        f_1_mut = f_1;\n                        m_1_mut = MapTreeNode$2__get_Right(m2);\n                        x_1_mut = x_3;\n                        continue foldFromTo;\n                    }\n                    else {\n                        return x_3;\n                    }\n                }\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) ? (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0) : false) {\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\n                }\n                else {\n                    return x_1;\n                }\n            }\n            else {\n                return x_1;\n            }\n            break;\n        }\n    };\n    if (comparer.Compare(lo, hi) === 1) {\n        return x;\n    }\n    else {\n        return foldFromTo(f, m, x);\n    }\n}\n\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\n}\n\nexport function MapTreeModule_toList(m) {\n    const loop = (m_1_mut, acc_mut) => {\n        loop:\n        while (true) {\n            const m_1 = m_1_mut, acc = acc_mut;\n            if (m_1 != null) {\n                const m2 = m_1;\n                if (m2 instanceof MapTreeNode$2) {\n                    m_1_mut = MapTreeNode$2__get_Left(m2);\n                    acc_mut = cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc));\n                    continue loop;\n                }\n                else {\n                    return cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(m, empty_1());\n}\n\nexport function MapTreeModule_copyToArray(m, arr, i) {\n    let j = i | 0;\n    MapTreeModule_iter((x, y) => {\n        arr[j] = [x, y];\n        j = ((j + 1) | 0);\n    }, m);\n}\n\nexport function MapTreeModule_toArray(m) {\n    const n = MapTreeModule_size(m) | 0;\n    const res = fill(new Array(n), 0, n, [null, null]);\n    MapTreeModule_copyToArray(m, res, 0);\n    return res;\n}\n\nexport function MapTreeModule_ofList(comparer, l) {\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\n}\n\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    MapTreeModule_mkFromEnumerator:\n    while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            comparer_mut = comparer;\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\n            e_mut = e;\n            continue MapTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_ofArray(comparer, arr) {\n    let res = MapTreeModule_empty();\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\n        const forLoopVar = arr[idx];\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\n    }\n    return res;\n}\n\nexport function MapTreeModule_ofSeq(comparer, c) {\n    if (isArrayLike(c)) {\n        return MapTreeModule_ofArray(comparer, c);\n    }\n    else if (c instanceof FSharpList) {\n        return MapTreeModule_ofList(comparer, c);\n    }\n    else {\n        const ie = getEnumerator(c);\n        try {\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\n        }\n        finally {\n            ie.Dispose();\n        }\n    }\n}\n\nexport class MapTreeModule_MapIterator$2 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\n\nexport function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2$reflection(gen0, gen1)))], [\"started\", bool_type]]);\n}\n\nexport function MapTreeModule_collapseLHS(stack_mut) {\n    MapTreeModule_collapseLHS:\n    while (true) {\n        const stack = stack_mut;\n        if (!isEmpty_1(stack)) {\n            const rest = tail(stack);\n            const m = head(stack);\n            if (m != null) {\n                const m2 = m;\n                if (m2 instanceof MapTreeNode$2) {\n                    stack_mut = ofArrayWithTail([MapTreeNode$2__get_Left(m2), MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), MapTreeNode$2__get_Right(m2)], rest);\n                    continue MapTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue MapTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return empty_1();\n        }\n        break;\n    }\n}\n\nexport function MapTreeModule_mkIterator(m) {\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(singleton(m)), false);\n}\n\nexport function MapTreeModule_notStarted() {\n    throw (new Error(\"enumeration not started\"));\n}\n\nexport function MapTreeModule_alreadyFinished() {\n    throw (new Error(\"enumeration already finished\"));\n}\n\nexport function MapTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const m = head(matchValue);\n                if (m instanceof MapTreeNode$2) {\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\n                }\n                else {\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\n                }\n            }\n            else {\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\n            }\n        }\n        else {\n            return MapTreeModule_alreadyFinished();\n        }\n    }\n    else {\n        return MapTreeModule_notStarted();\n    }\n}\n\nexport function MapTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const m = head(matchValue);\n                if (m instanceof MapTreeNode$2) {\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\n                }\n                else {\n                    i.stack = MapTreeModule_collapseLHS(tail(matchValue));\n                    return !isEmpty_1(i.stack);\n                }\n            }\n            else {\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !isEmpty_1(i.stack);\n    }\n}\n\nexport function MapTreeModule_mkIEnumerator(m) {\n    let i = MapTreeModule_mkIterator(m);\n    return {\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n            return MapTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.get_Current\"]() {\n            return MapTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\n            return MapTreeModule_moveNext(i);\n        },\n        [\"System.Collections.IEnumerator.Reset\"]() {\n            i = MapTreeModule_mkIterator(m);\n        },\n        Dispose() {\n        },\n    };\n}\n\nexport function MapTreeModule_toSeq(s) {\n    return unfold((en_1) => {\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\n        }\n        else {\n            return void 0;\n        }\n    }, MapTreeModule_mkIEnumerator(s));\n}\n\nexport class FSharpMap {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpMap__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        const this$ = this;\n        if (that instanceof FSharpMap) {\n            const e1 = getEnumerator(this$);\n            try {\n                const e2 = getEnumerator(that);\n                try {\n                    const loop = () => {\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            if (!m1) {\n                                return true;\n                            }\n                            else {\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                                if (equals(e1c[0], e2c[0]) ? equals(e1c[1], e2c[1]) : false) {\n                                    return loop();\n                                }\n                                else {\n                                    return false;\n                                }\n                            }\n                        }\n                        else {\n                            return false;\n                        }\n                    };\n                    return loop();\n                }\n                finally {\n                    e2.Dispose();\n                }\n            }\n            finally {\n                e1.Dispose();\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    toString() {\n        const this$ = this;\n        return (\"map [\" + join(\"; \", map_1((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpMap\";\n    }\n    GetEnumerator() {\n        const __ = this;\n        return MapTreeModule_mkIEnumerator(__.tree);\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const __ = this;\n        return MapTreeModule_mkIEnumerator(__.tree);\n    }\n    CompareTo(obj) {\n        const m = this;\n        if (obj instanceof FSharpMap) {\n            return compareWith((kvp1, kvp2) => {\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\n            }, m, obj) | 0;\n        }\n        else {\n            throw (new Error(\"not comparable\\\\nParameter name: obj\"));\n        }\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\n        const m = this;\n        return FSharpMap__ContainsKey(m, x[0]) ? equals(FSharpMap__get_Item(m, x[0]), x[1]) : false;\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\n        const m = this;\n        MapTreeModule_copyToArray(m.tree, arr, i);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return true;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    get size() {\n        const m = this;\n        return FSharpMap__get_Count(m) | 0;\n    }\n    clear() {\n        throw (new Error(\"Map cannot be mutated\"));\n    }\n    delete(_arg1) {\n        throw (new Error(\"Map cannot be mutated\"));\n        return false;\n    }\n    entries() {\n        const m = this;\n        return map_1((p) => [p[0], p[1]], m);\n    }\n    get(k) {\n        const m = this;\n        return FSharpMap__get_Item(m, k);\n    }\n    has(k) {\n        const m = this;\n        return FSharpMap__ContainsKey(m, k);\n    }\n    keys() {\n        const m = this;\n        return map_1((p) => p[0], m);\n    }\n    set(k, v) {\n        const m = this;\n        throw (new Error(\"Map cannot be mutated\"));\n        return m;\n    }\n    values() {\n        const m = this;\n        return map_1((p) => p[1], m);\n    }\n    forEach(f, thisArg) {\n        const m = this;\n        iterate_1((p) => {\n            f(p[1], p[0], m);\n        }, m);\n    }\n}\n\nexport function FSharpMap$reflection(gen0, gen1) {\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\n}\n\nexport function FSharpMap_$ctor(comparer, tree) {\n    return new FSharpMap(comparer, tree);\n}\n\n(() => {\n    FSharpMap.empty = FSharpMap_$ctor(LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());\n})();\n\nexport function FSharpMap_get_Empty() {\n    return FSharpMap.empty;\n}\n\nexport function FSharpMap_Create(ie) {\n    const comparer = LanguagePrimitives_FastGenericComparer();\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));\n}\n\nexport function FSharpMap__get_Comparer(m) {\n    return m.comparer;\n}\n\nexport function FSharpMap__get_Tree(m) {\n    return m.tree;\n}\n\nexport function FSharpMap__Add(m, key, value) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\n}\n\nexport function FSharpMap__Change(m, key, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\n}\n\nexport function FSharpMap__get_IsEmpty(m) {\n    return m.tree == null;\n}\n\nexport function FSharpMap__get_Item(m, key) {\n    return MapTreeModule_find(m.comparer, key, m.tree);\n}\n\nexport function FSharpMap__TryPick(m, f) {\n    return MapTreeModule_tryPick(f, m.tree);\n}\n\nexport function FSharpMap__Exists(m, predicate) {\n    return MapTreeModule_exists(predicate, m.tree);\n}\n\nexport function FSharpMap__Filter(m, predicate) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\n}\n\nexport function FSharpMap__ForAll(m, predicate) {\n    return MapTreeModule_forall(predicate, m.tree);\n}\n\nexport function FSharpMap__Fold(m, f, acc) {\n    return MapTreeModule_foldBack(f, m.tree, acc);\n}\n\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\n}\n\nexport function FSharpMap__Iterate(m, f) {\n    MapTreeModule_iter(f, m.tree);\n}\n\nexport function FSharpMap__MapRange(m, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\n}\n\nexport function FSharpMap__Map(m, f) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\n}\n\nexport function FSharpMap__Partition(m, predicate) {\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\n}\n\nexport function FSharpMap__get_Count(m) {\n    return MapTreeModule_size(m.tree);\n}\n\nexport function FSharpMap__ContainsKey(m, key) {\n    return MapTreeModule_mem(m.comparer, key, m.tree);\n}\n\nexport function FSharpMap__Remove(m, key) {\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\n}\n\nexport function FSharpMap__TryGetValue(__, key, value) {\n    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);\n    if (matchValue == null) {\n        return false;\n    }\n    else {\n        const v = value_1(matchValue);\n        value.contents = v;\n        return true;\n    }\n}\n\nexport function FSharpMap__TryFind(m, key) {\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\n}\n\nexport function FSharpMap__ToList(m) {\n    return MapTreeModule_toList(m.tree);\n}\n\nexport function FSharpMap__ToArray(m) {\n    return MapTreeModule_toArray(m.tree);\n}\n\nexport function FSharpMap__ComputeHashCode(this$) {\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const activePatternResult5203 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = (combineHash(res, structuralHash(activePatternResult5203[0])) | 0);\n            res = (combineHash(res, structuralHash(activePatternResult5203[1])) | 0);\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return res | 0;\n}\n\nexport function isEmpty(table) {\n    return FSharpMap__get_IsEmpty(table);\n}\n\nexport function add(key, value, table) {\n    return FSharpMap__Add(table, key, value);\n}\n\nexport function change(key, f, table) {\n    return FSharpMap__Change(table, key, f);\n}\n\nexport function find(key, table) {\n    return FSharpMap__get_Item(table, key);\n}\n\nexport function tryFind(key, table) {\n    return FSharpMap__TryFind(table, key);\n}\n\nexport function remove(key, table) {\n    return FSharpMap__Remove(table, key);\n}\n\nexport function containsKey(key, table) {\n    return FSharpMap__ContainsKey(table, key);\n}\n\nexport function iterate(action, table) {\n    FSharpMap__Iterate(table, action);\n}\n\nexport function tryPick(chooser, table) {\n    return FSharpMap__TryPick(table, chooser);\n}\n\nexport function pick(chooser, table) {\n    const matchValue = tryPick(chooser, table);\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw (new Error());\n    }\n}\n\nexport function exists(predicate, table) {\n    return FSharpMap__Exists(table, predicate);\n}\n\nexport function filter(predicate, table) {\n    return FSharpMap__Filter(table, predicate);\n}\n\nexport function partition(predicate, table) {\n    return FSharpMap__Partition(table, predicate);\n}\n\nexport function forAll(predicate, table) {\n    return FSharpMap__ForAll(table, predicate);\n}\n\nexport function map(mapping, table) {\n    return FSharpMap__Map(table, mapping);\n}\n\nexport function fold(folder, state, table) {\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\n}\n\nexport function foldBack(folder, table, state) {\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\n}\n\nexport function toSeq(table) {\n    return map_1((kvp) => [kvp[0], kvp[1]], table);\n}\n\nexport function findKey(predicate, table) {\n    return pick_1((kvp) => {\n        const k = kvp[0];\n        if (predicate(k, kvp[1])) {\n            return some(k);\n        }\n        else {\n            return void 0;\n        }\n    }, table);\n}\n\nexport function tryFindKey(predicate, table) {\n    return tryPick_1((kvp) => {\n        const k = kvp[0];\n        if (predicate(k, kvp[1])) {\n            return some(k);\n        }\n        else {\n            return void 0;\n        }\n    }, table);\n}\n\nexport function ofList(elements) {\n    return FSharpMap_Create(elements);\n}\n\nexport function ofSeq(elements) {\n    return FSharpMap_Create(elements);\n}\n\nexport function ofArray(elements) {\n    const comparer = LanguagePrimitives_FastGenericComparer();\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));\n}\n\nexport function toList(table) {\n    return FSharpMap__ToList(table);\n}\n\nexport function toArray(table) {\n    return FSharpMap__ToArray(table);\n}\n\nexport function empty() {\n    return FSharpMap_get_Empty();\n}\n\nexport function count(table) {\n    return FSharpMap__get_Count(table);\n}\n\n","import { Record } from \"../Types.js\";\nimport { record_type, array_type, int32_type } from \"../Reflection.js\";\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, fromInteger, op_Multiply, op_Modulus, toInt, fromBits } from \"../Long.js\";\nimport { copy, initialize, map, fill } from \"../Array.js\";\nimport { toArray, empty, head, tail, isEmpty, cons } from \"../List.js\";\nimport { int32ToString } from \"../Util.js\";\nimport { isNullOrEmpty, join } from \"../String.js\";\n\nexport class BigNat extends Record {\n    constructor(bound, digits) {\n        super();\n        this.bound = (bound | 0);\n        this.digits = digits;\n    }\n}\n\nexport function BigNat$reflection() {\n    return record_type(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32_type], [\"digits\", array_type(int32_type)]]);\n}\n\nexport function BigNatModule_FFT_pow32(x_mut, n_mut) {\n    BigNatModule_FFT_pow32:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return 1;\n        }\n        else if ((n % 2) === 0) {\n            x_mut = (x * x);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_FFT_pow32;\n        }\n        else {\n            return (x * BigNatModule_FFT_pow32(x * x, ~(~(n / 2)))) | 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_FFT_leastBounding2Power(b) {\n    const findBounding2Power = (b_1_mut, tp_mut, i_mut) => {\n        findBounding2Power:\n        while (true) {\n            const b_1 = b_1_mut, tp = tp_mut, i = i_mut;\n            if (b_1 <= tp) {\n                return [tp, i];\n            }\n            else {\n                b_1_mut = b_1;\n                tp_mut = (tp * 2);\n                i_mut = (i + 1);\n                continue findBounding2Power;\n            }\n            break;\n        }\n    };\n    return findBounding2Power(b, 1, 0);\n}\n\nexport const BigNatModule_FFT_p = fromBits(2013265921, 0, false);\n\nconst BigNatModule_FFT_patternInput$004075 = [27, 15, 31, 440564289];\n\nexport const BigNatModule_FFT_w = BigNatModule_FFT_patternInput$004075[3];\n\nexport const BigNatModule_FFT_m = BigNatModule_FFT_patternInput$004075[1];\n\nexport const BigNatModule_FFT_k = BigNatModule_FFT_patternInput$004075[0];\n\nexport const BigNatModule_FFT_g = BigNatModule_FFT_patternInput$004075[2];\n\nexport const BigNatModule_FFT_primeP = BigNatModule_FFT_p;\n\nexport const BigNatModule_FFT_maxBitsInsideFp = 30;\n\nexport const BigNatModule_FFT_Fp_p = 2013265921;\n\nexport const BigNatModule_FFT_Fp_p64 = fromBits(2013265921, 0, true);\n\nexport function BigNatModule_FFT_Fp_toInt(x) {\n    return ~(~x);\n}\n\nexport function BigNatModule_FFT_Fp_ofInt32(x) {\n    return x >>> 0;\n}\n\nexport const BigNatModule_FFT_Fp_mzero = 0;\n\nexport const BigNatModule_FFT_Fp_mone = 1;\n\nexport const BigNatModule_FFT_Fp_mtwo = 2;\n\nexport function BigNatModule_FFT_Fp_mpow(x_mut, n_mut) {\n    BigNatModule_FFT_Fp_mpow:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return BigNatModule_FFT_Fp_mone;\n        }\n        else if ((n % 2) === 0) {\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_FFT_Fp_mpow;\n        }\n        else {\n            const y_2 = BigNatModule_FFT_Fp_mpow(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, ~(~(n / 2)));\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_FFT_Fp_mpowL(x_mut, n_mut) {\n    BigNatModule_FFT_Fp_mpowL:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (equals(n, fromBits(0, 0, false))) {\n            return BigNatModule_FFT_Fp_mone;\n        }\n        else if (equals(op_Modulus(n, fromBits(2, 0, false)), fromBits(0, 0, false))) {\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\n            n_mut = op_Division(n, fromBits(2, 0, false));\n            continue BigNatModule_FFT_Fp_mpowL;\n        }\n        else {\n            const y_2 = BigNatModule_FFT_Fp_mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, op_Division(n, fromBits(2, 0, false)));\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_FFT_Fp_m2PowNthRoot(n) {\n    return BigNatModule_FFT_Fp_mpow(BigNatModule_FFT_w >>> 0, BigNatModule_FFT_pow32(2, BigNatModule_FFT_k - n));\n}\n\nexport function BigNatModule_FFT_Fp_minv(x) {\n    return BigNatModule_FFT_Fp_mpowL(x, op_Subtraction(BigNatModule_FFT_primeP, fromBits(2, 0, false)));\n}\n\nexport function BigNatModule_FFT_computeFFT(lambda, mu, n, w, u, res, offset) {\n    let x_1, x_3, y_5;\n    if (n === 1) {\n        res[offset] = u[mu];\n    }\n    else {\n        const halfN = (~(~(n / 2))) | 0;\n        const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n        const offsetHalfN = (offset + halfN) | 0;\n        BigNatModule_FFT_computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\n        BigNatModule_FFT_computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\n        let wj = BigNatModule_FFT_Fp_mone;\n        for (let j = 0; j <= (halfN - 1); j++) {\n            const even = res[offset + j];\n            const odd = res[offsetHalfN + j];\n            res[offset + j] = ((even + (x_1 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_1, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0)) % BigNatModule_FFT_Fp_p);\n            res[offsetHalfN + j] = (((even + BigNatModule_FFT_Fp_p) - (x_3 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_3, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0)) % BigNatModule_FFT_Fp_p);\n            wj = (y_5 = wj, toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(y_5, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\n        }\n    }\n}\n\nexport function BigNatModule_FFT_computFftInPlace(n, w, u) {\n    const res = fill(new Uint32Array(n), 0, n, BigNatModule_FFT_Fp_mzero);\n    BigNatModule_FFT_computeFFT(1, 0, n, w, u, res, 0);\n    return res;\n}\n\nexport function BigNatModule_FFT_computeInverseFftInPlace(n, w, uT) {\n    const bigKInv = BigNatModule_FFT_Fp_minv(n >>> 0);\n    return map((y) => (toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0), BigNatModule_FFT_computFftInPlace(n, BigNatModule_FFT_Fp_minv(w), uT), Uint32Array);\n}\n\nexport const BigNatModule_FFT_maxTwoPower = 29;\n\nexport const BigNatModule_FFT_twoPowerTable = initialize(BigNatModule_FFT_maxTwoPower - 1, (i) => BigNatModule_FFT_pow32(2, i), Int32Array);\n\nexport function BigNatModule_FFT_computeFftPaddedPolynomialProduct(bigK, k, u, v) {\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(k);\n    const n = bigK | 0;\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u);\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v);\n    return BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\n        const x = uT[i];\n        const y = vT[i];\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n    }, Uint32Array));\n}\n\nexport function BigNatModule_FFT_padTo(n, u) {\n    const uBound = u.length | 0;\n    return initialize(n, (i) => ((i < uBound) ? BigNatModule_FFT_Fp_ofInt32(u[i]) : BigNatModule_FFT_Fp_mzero), Uint32Array);\n}\n\nexport function BigNatModule_FFT_computeFftPolynomialProduct(degu, u, degv, v) {\n    const patternInput = BigNatModule_FFT_leastBounding2Power((degu + degv) + 1);\n    const bigK = patternInput[0] | 0;\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(patternInput[1]);\n    const u_1 = BigNatModule_FFT_padTo(bigK, u);\n    const v_1 = BigNatModule_FFT_padTo(bigK, v);\n    const n = bigK | 0;\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u_1);\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v_1);\n    return map((x_1) => BigNatModule_FFT_Fp_toInt(x_1), BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\n        const x = uT[i];\n        const y = vT[i];\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\n    }, Uint32Array)), Int32Array);\n}\n\nexport const BigNatModule_FFT_mzero = BigNatModule_FFT_Fp_mzero;\n\nexport const BigNatModule_FFT_mone = BigNatModule_FFT_Fp_mone;\n\nexport const BigNatModule_FFT_maxFp = ((BigNatModule_FFT_Fp_p + BigNatModule_FFT_Fp_p) - BigNatModule_FFT_mone) % BigNatModule_FFT_Fp_p;\n\nexport function BigNatModule_bound(n) {\n    return n.bound;\n}\n\nexport function BigNatModule_setBound(n, v) {\n    n.bound = (v | 0);\n}\n\nexport function BigNatModule_coeff(n, i) {\n    return n.digits[i];\n}\n\nexport function BigNatModule_coeff64(n, i) {\n    return fromInteger(BigNatModule_coeff(n, i), false, 2);\n}\n\nexport function BigNatModule_setCoeff(n, i, v) {\n    n.digits[i] = (v | 0);\n}\n\nexport function BigNatModule_pow64(x_mut, n_mut) {\n    BigNatModule_pow64:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return fromBits(1, 0, false);\n        }\n        else if ((n % 2) === 0) {\n            x_mut = op_Multiply(x, x);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_pow64;\n        }\n        else {\n            return op_Multiply(x, BigNatModule_pow64(op_Multiply(x, x), ~(~(n / 2))));\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_pow32(x_mut, n_mut) {\n    BigNatModule_pow32:\n    while (true) {\n        const x = x_mut, n = n_mut;\n        if (n === 0) {\n            return 1;\n        }\n        else if ((n % 2) === 0) {\n            x_mut = (x * x);\n            n_mut = (~(~(n / 2)));\n            continue BigNatModule_pow32;\n        }\n        else {\n            return (x * BigNatModule_pow32(x * x, ~(~(n / 2)))) | 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_hash(n) {\n    let res = 0;\n    for (let i = 0; i <= (n.bound - 1); i++) {\n        res = ((n.digits[i] + (res << 3)) | 0);\n    }\n    return res | 0;\n}\n\nexport function BigNatModule_maxInt(a, b) {\n    if (a < b) {\n        return b | 0;\n    }\n    else {\n        return a | 0;\n    }\n}\n\nexport function BigNatModule_minInt(a, b) {\n    if (a < b) {\n        return a | 0;\n    }\n    else {\n        return b | 0;\n    }\n}\n\nexport const BigNatModule_baseBits = 24;\n\nexport const BigNatModule_baseN = 16777216;\n\nexport const BigNatModule_baseMask = 16777215;\n\nexport const BigNatModule_baseNi64 = fromBits(16777216, 0, false);\n\nexport const BigNatModule_baseMaski64 = fromBits(16777215, 0, false);\n\nexport const BigNatModule_baseMaskU = fromBits(16777215, 0, true);\n\nexport const BigNatModule_baseMask32A = 16777215;\n\nexport const BigNatModule_baseMask32B = 255;\n\nexport const BigNatModule_baseShift32B = 24;\n\nexport const BigNatModule_baseMask64A = 16777215;\n\nexport const BigNatModule_baseMask64B = 16777215;\n\nexport const BigNatModule_baseMask64C = 65535;\n\nexport const BigNatModule_baseShift64B = 24;\n\nexport const BigNatModule_baseShift64C = 48;\n\nexport function BigNatModule_divbase(x) {\n    return ~(~((x >>> 0) >>> BigNatModule_baseBits));\n}\n\nexport function BigNatModule_modbase(x) {\n    return x & BigNatModule_baseMask;\n}\n\nexport function BigNatModule_createN(b) {\n    return new BigNat(b, new Int32Array(b));\n}\n\nexport function BigNatModule_copyN(x) {\n    return new BigNat(x.bound, copy(x.digits));\n}\n\nexport function BigNatModule_normN(n) {\n    const findLeastBound = (na_mut, i_mut) => {\n        findLeastBound:\n        while (true) {\n            const na = na_mut, i = i_mut;\n            if ((i === -1) ? true : (na[i] !== 0)) {\n                return (i + 1) | 0;\n            }\n            else {\n                na_mut = na;\n                i_mut = (i - 1);\n                continue findLeastBound;\n            }\n            break;\n        }\n    };\n    const bound = findLeastBound(n.digits, n.bound - 1) | 0;\n    n.bound = (bound | 0);\n    return n;\n}\n\nexport const BigNatModule_boundInt = 2;\n\nexport const BigNatModule_boundInt64 = 3;\n\nexport const BigNatModule_boundBase = 1;\n\nexport function BigNatModule_embed(x) {\n    const x_1 = ((x < 0) ? 0 : x) | 0;\n    if (x_1 < BigNatModule_baseN) {\n        const r = BigNatModule_createN(1);\n        r.digits[0] = (x_1 | 0);\n        return BigNatModule_normN(r);\n    }\n    else {\n        const r_1 = BigNatModule_createN(BigNatModule_boundInt);\n        for (let i = 0; i <= (BigNatModule_boundInt - 1); i++) {\n            r_1.digits[i] = (((~(~(x_1 / BigNatModule_pow32(BigNatModule_baseN, i)))) % BigNatModule_baseN) | 0);\n        }\n        return BigNatModule_normN(r_1);\n    }\n}\n\nexport function BigNatModule_embed64(x) {\n    const x_1 = (compare(x, fromBits(0, 0, false)) < 0) ? fromBits(0, 0, false) : x;\n    const r = BigNatModule_createN(BigNatModule_boundInt64);\n    for (let i = 0; i <= (BigNatModule_boundInt64 - 1); i++) {\n        r.digits[i] = ((~(~toInt(op_Modulus(op_Division(x_1, BigNatModule_pow64(BigNatModule_baseNi64, i)), BigNatModule_baseNi64)))) | 0);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_eval32(n) {\n    if (n.bound === 1) {\n        return n.digits[0] | 0;\n    }\n    else {\n        let acc = 0;\n        for (let i = n.bound - 1; i >= 0; i--) {\n            acc = ((n.digits[i] + (BigNatModule_baseN * acc)) | 0);\n        }\n        return acc | 0;\n    }\n}\n\nexport function BigNatModule_eval64(n) {\n    if (n.bound === 1) {\n        return fromInteger(n.digits[0], false, 2);\n    }\n    else {\n        let acc = fromBits(0, 0, false);\n        for (let i = n.bound - 1; i >= 0; i--) {\n            acc = op_Addition(fromInteger(n.digits[i], false, 2), op_Multiply(BigNatModule_baseNi64, acc));\n        }\n        return acc;\n    }\n}\n\nexport const BigNatModule_one = BigNatModule_embed(1);\n\nexport const BigNatModule_zero = BigNatModule_embed(0);\n\nexport function BigNatModule_restrictTo(d, n) {\n    return new BigNat(BigNatModule_minInt(d, n.bound), n.digits);\n}\n\nexport function BigNatModule_shiftUp(d, n) {\n    const m = BigNatModule_createN(n.bound + d);\n    for (let i = 0; i <= (n.bound - 1); i++) {\n        m.digits[i + d] = (n.digits[i] | 0);\n    }\n    return m;\n}\n\nexport function BigNatModule_shiftDown(d, n) {\n    if ((n.bound - d) <= 0) {\n        return BigNatModule_zero;\n    }\n    else {\n        const m = BigNatModule_createN(n.bound - d);\n        for (let i = 0; i <= (m.bound - 1); i++) {\n            m.digits[i] = (n.digits[i + d] | 0);\n        }\n        return m;\n    }\n}\n\nexport function BigNatModule_degree(n) {\n    return n.bound - 1;\n}\n\nexport function BigNatModule_addP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\n    let z, i_1, z_1, i_2;\n    BigNatModule_addP:\n    while (true) {\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\n        if (i < n) {\n            const x = (((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0)) + (z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0))) + c) | 0;\n            r.digits[i] = (BigNatModule_modbase(x) | 0);\n            i_mut = (i + 1);\n            n_mut = n;\n            c_mut = BigNatModule_divbase(x);\n            p_mut = p;\n            q_mut = q;\n            r_mut = r;\n            continue BigNatModule_addP;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_add(p, q) {\n    const rbound = (1 + BigNatModule_maxInt(p.bound, q.bound)) | 0;\n    const r = BigNatModule_createN(rbound);\n    BigNatModule_addP(0, rbound, 0, p, q, r);\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_subP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\n    let z, i_1, z_1, i_2;\n    BigNatModule_subP:\n    while (true) {\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\n        if (i < n) {\n            const x = (((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0)) - (z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0))) + c) | 0;\n            if (x > 0) {\n                r.digits[i] = (BigNatModule_modbase(x) | 0);\n                i_mut = (i + 1);\n                n_mut = n;\n                c_mut = BigNatModule_divbase(x);\n                p_mut = p;\n                q_mut = q;\n                r_mut = r;\n                continue BigNatModule_subP;\n            }\n            else {\n                const x_1 = (x + BigNatModule_baseN) | 0;\n                r.digits[i] = (BigNatModule_modbase(x_1) | 0);\n                i_mut = (i + 1);\n                n_mut = n;\n                c_mut = (BigNatModule_divbase(x_1) - 1);\n                p_mut = p;\n                q_mut = q;\n                r_mut = r;\n                continue BigNatModule_subP;\n            }\n        }\n        else {\n            return c !== 0;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_sub(p, q) {\n    const rbound = BigNatModule_maxInt(p.bound, q.bound) | 0;\n    const r = BigNatModule_createN(rbound);\n    if (BigNatModule_subP(0, rbound, 0, p, q, r)) {\n        return BigNatModule_embed(0);\n    }\n    else {\n        return BigNatModule_normN(r);\n    }\n}\n\nexport function BigNatModule_isZero(p) {\n    return p.bound === 0;\n}\n\nexport function BigNatModule_IsZero(p) {\n    return BigNatModule_isZero(p);\n}\n\nexport function BigNatModule_isOne(p) {\n    if (p.bound === 1) {\n        return p.digits[0] === 1;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigNatModule_equal(p, q) {\n    if (p.bound === q.bound) {\n        const check = (pa_mut, qa_mut, i_mut) => {\n            check:\n            while (true) {\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\n                if (i === -1) {\n                    return true;\n                }\n                else if (pa[i] === qa[i]) {\n                    pa_mut = pa;\n                    qa_mut = qa;\n                    i_mut = (i - 1);\n                    continue check;\n                }\n                else {\n                    return false;\n                }\n                break;\n            }\n        };\n        return check(p.digits, q.digits, p.bound - 1);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigNatModule_shiftCompare(p, pn, q, qn) {\n    if ((p.bound + pn) < (q.bound + qn)) {\n        return -1;\n    }\n    else if ((p.bound + pn) > (q.bound + pn)) {\n        return 1;\n    }\n    else {\n        const check = (pa_mut, qa_mut, i_mut) => {\n            check:\n            while (true) {\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\n                if (i === -1) {\n                    return 0;\n                }\n                else {\n                    const pai = ((i < pn) ? 0 : pa[i - pn]) | 0;\n                    const qai = ((i < qn) ? 0 : qa[i - qn]) | 0;\n                    if (pai === qai) {\n                        pa_mut = pa;\n                        qa_mut = qa;\n                        i_mut = (i - 1);\n                        continue check;\n                    }\n                    else if (pai < qai) {\n                        return -1;\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                break;\n            }\n        };\n        return check(p.digits, q.digits, (p.bound + pn) - 1) | 0;\n    }\n}\n\nexport function BigNatModule_compare(p, q) {\n    if (p.bound < q.bound) {\n        return -1;\n    }\n    else if (p.bound > q.bound) {\n        return 1;\n    }\n    else {\n        const check = (pa_mut, qa_mut, i_mut) => {\n            check:\n            while (true) {\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\n                if (i === -1) {\n                    return 0;\n                }\n                else if (pa[i] === qa[i]) {\n                    pa_mut = pa;\n                    qa_mut = qa;\n                    i_mut = (i - 1);\n                    continue check;\n                }\n                else if (pa[i] < qa[i]) {\n                    return -1;\n                }\n                else {\n                    return 1;\n                }\n                break;\n            }\n        };\n        return check(p.digits, q.digits, p.bound - 1) | 0;\n    }\n}\n\nexport function BigNatModule_lt(p, q) {\n    return BigNatModule_compare(p, q) === -1;\n}\n\nexport function BigNatModule_gt(p, q) {\n    return BigNatModule_compare(p, q) === 1;\n}\n\nexport function BigNatModule_lte(p, q) {\n    return BigNatModule_compare(p, q) !== 1;\n}\n\nexport function BigNatModule_gte(p, q) {\n    return BigNatModule_compare(p, q) !== -1;\n}\n\nexport function BigNatModule_min(a, b) {\n    if (BigNatModule_lt(a, b)) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n\nexport function BigNatModule_max(a, b) {\n    if (BigNatModule_lt(a, b)) {\n        return b;\n    }\n    else {\n        return a;\n    }\n}\n\nexport function BigNatModule_contributeArr(a_mut, i_mut, c_mut) {\n    BigNatModule_contributeArr:\n    while (true) {\n        const a = a_mut, i = i_mut, c = c_mut;\n        const x = op_Addition(fromInteger(a[i], false, 2), c);\n        const c_1 = op_Division(x, BigNatModule_baseNi64);\n        const x_3 = (~(~toInt(op_BitwiseAnd(x, BigNatModule_baseMaski64)))) | 0;\n        a[i] = (x_3 | 0);\n        if (compare(c_1, fromBits(0, 0, false)) > 0) {\n            a_mut = a;\n            i_mut = (i + 1);\n            c_mut = c_1;\n            continue BigNatModule_contributeArr;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_scale(k, p) {\n    const r = BigNatModule_createN(p.bound + BigNatModule_boundInt);\n    const k_1 = fromInteger(k, false, 2);\n    for (let i = 0; i <= (p.bound - 1); i++) {\n        BigNatModule_contributeArr(r.digits, i, op_Multiply(k_1, fromInteger(p.digits[i], false, 2)));\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBookBothSmall(p, q) {\n    const r = BigNatModule_createN(2);\n    const rak = op_Multiply(fromInteger(p, false, 2), fromInteger(q, false, 2));\n    BigNatModule_setCoeff(r, 0, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n    BigNatModule_setCoeff(r, 1, ~(~toInt(op_Division(rak, BigNatModule_baseNi64))));\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBookCarry(r_mut, c_mut, k_mut) {\n    BigNatModule_mulSchoolBookCarry:\n    while (true) {\n        const r = r_mut, c = c_mut, k = k_mut;\n        if (compare(c, fromBits(0, 0, false)) > 0) {\n            const rak = op_Addition(BigNatModule_coeff64(r, k), c);\n            BigNatModule_setCoeff(r, k, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n            r_mut = r;\n            c_mut = op_Division(rak, BigNatModule_baseNi64);\n            k_mut = (k + 1);\n            continue BigNatModule_mulSchoolBookCarry;\n        }\n        break;\n    }\n}\n\nexport function BigNatModule_mulSchoolBookOneSmall(p, q) {\n    const bp = BigNatModule_bound(p) | 0;\n    const r = BigNatModule_createN(bp + 1);\n    const q_1 = fromInteger(q, false, 2);\n    let c = fromBits(0, 0, false);\n    for (let i = 0; i <= (bp - 1); i++) {\n        const rak = op_Addition(op_Addition(c, BigNatModule_coeff64(r, i)), op_Multiply(BigNatModule_coeff64(p, i), q_1));\n        BigNatModule_setCoeff(r, i, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\n        c = op_Division(rak, BigNatModule_baseNi64);\n    }\n    BigNatModule_mulSchoolBookCarry(r, c, bp);\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBookNeitherSmall(p, q) {\n    const r = BigNatModule_createN(p.bound + q.bound);\n    const ra = r.digits;\n    for (let i = 0; i <= (p.bound - 1); i++) {\n        const pai = fromInteger(p.digits[i], false, 2);\n        let c = fromBits(0, 0, false);\n        let k = i | 0;\n        for (let j = 0; j <= (q.bound - 1); j++) {\n            const qaj = fromInteger(q.digits[j], false, 2);\n            const rak = op_Addition(op_Addition(fromInteger(ra[k], false, 2), c), op_Multiply(pai, qaj));\n            ra[k] = ((~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64)))) | 0);\n            c = op_Division(rak, BigNatModule_baseNi64);\n            k = ((k + 1) | 0);\n        }\n        BigNatModule_mulSchoolBookCarry(r, c, k);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_mulSchoolBook(p, q) {\n    const pSmall = BigNatModule_bound(p) === 1;\n    const qSmall = BigNatModule_bound(q) === 1;\n    if (pSmall ? qSmall : false) {\n        return BigNatModule_mulSchoolBookBothSmall(BigNatModule_coeff(p, 0), BigNatModule_coeff(q, 0));\n    }\n    else if (pSmall) {\n        return BigNatModule_mulSchoolBookOneSmall(q, BigNatModule_coeff(p, 0));\n    }\n    else if (qSmall) {\n        return BigNatModule_mulSchoolBookOneSmall(p, BigNatModule_coeff(q, 0));\n    }\n    else {\n        return BigNatModule_mulSchoolBookNeitherSmall(p, q);\n    }\n}\n\nexport class BigNatModule_encoding extends Record {\n    constructor(bigL, twoToBigL, k, bigK, bigN, split, splits) {\n        super();\n        this.bigL = (bigL | 0);\n        this.twoToBigL = (twoToBigL | 0);\n        this.k = (k | 0);\n        this.bigK = (bigK | 0);\n        this.bigN = (bigN | 0);\n        this.split = (split | 0);\n        this.splits = splits;\n    }\n}\n\nexport function BigNatModule_encoding$reflection() {\n    return record_type(\"BigInt.BigNatModule.encoding\", [], BigNatModule_encoding, () => [[\"bigL\", int32_type], [\"twoToBigL\", int32_type], [\"k\", int32_type], [\"bigK\", int32_type], [\"bigN\", int32_type], [\"split\", int32_type], [\"splits\", array_type(int32_type)]]);\n}\n\nexport function BigNatModule_mkEncoding(bigL, k, bigK, bigN) {\n    return new BigNatModule_encoding(bigL, BigNatModule_pow32(2, bigL), k, bigK, bigN, ~(~(BigNatModule_baseBits / bigL)), initialize(~(~(BigNatModule_baseBits / bigL)), (i) => BigNatModule_pow32(2, bigL * i), Int32Array));\n}\n\nexport const BigNatModule_table = [BigNatModule_mkEncoding(1, 28, 268435456, 268435456), BigNatModule_mkEncoding(2, 26, 67108864, 134217728), BigNatModule_mkEncoding(3, 24, 16777216, 50331648), BigNatModule_mkEncoding(4, 22, 4194304, 16777216), BigNatModule_mkEncoding(5, 20, 1048576, 5242880), BigNatModule_mkEncoding(6, 18, 262144, 1572864), BigNatModule_mkEncoding(7, 16, 65536, 458752), BigNatModule_mkEncoding(8, 14, 16384, 131072), BigNatModule_mkEncoding(9, 12, 4096, 36864), BigNatModule_mkEncoding(10, 10, 1024, 10240), BigNatModule_mkEncoding(11, 8, 256, 2816), BigNatModule_mkEncoding(12, 6, 64, 768), BigNatModule_mkEncoding(13, 4, 16, 208)];\n\nexport function BigNatModule_calculateTableTow(bigL) {\n    const k = (BigNatModule_FFT_maxBitsInsideFp - (2 * bigL)) | 0;\n    const bigK = BigNatModule_pow64(fromBits(2, 0, false), k);\n    return [bigL, k, bigK, op_Multiply(bigK, fromInteger(bigL, false, 2))];\n}\n\nexport function BigNatModule_encodingGivenResultBits(bitsRes) {\n    const selectFrom = (i_mut) => {\n        selectFrom:\n        while (true) {\n            const i = i_mut;\n            if (((i + 1) < BigNatModule_table.length) ? (bitsRes < BigNatModule_table[i + 1].bigN) : false) {\n                i_mut = (i + 1);\n                continue selectFrom;\n            }\n            else {\n                return BigNatModule_table[i];\n            }\n            break;\n        }\n    };\n    if (bitsRes >= BigNatModule_table[0].bigN) {\n        throw (new Error(\"Product is huge, around 268435456 bits, beyond quickmul\"));\n    }\n    else {\n        return selectFrom(0);\n    }\n}\n\nexport const BigNatModule_bitmask = initialize(BigNatModule_baseBits, (i) => (BigNatModule_pow32(2, i) - 1), Int32Array);\n\nexport const BigNatModule_twopowers = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow32(2, i), Int32Array);\n\nexport const BigNatModule_twopowersI64 = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow64(fromBits(2, 0, false), i));\n\nexport function BigNatModule_wordBits(word) {\n    const hi = (k_mut) => {\n        hi:\n        while (true) {\n            const k = k_mut;\n            if (k === 0) {\n                return 0;\n            }\n            else if ((word & BigNatModule_twopowers[k - 1]) !== 0) {\n                return k | 0;\n            }\n            else {\n                k_mut = (k - 1);\n                continue hi;\n            }\n            break;\n        }\n    };\n    return hi(BigNatModule_baseBits) | 0;\n}\n\nexport function BigNatModule_bits(u) {\n    if (u.bound === 0) {\n        return 0;\n    }\n    else {\n        return ((BigNatModule_degree(u) * BigNatModule_baseBits) + BigNatModule_wordBits(u.digits[BigNatModule_degree(u)])) | 0;\n    }\n}\n\nexport function BigNatModule_extractBits(n, enc, bi) {\n    let z, i, z_1, i_1, z_2, i_2;\n    const biw = (~(~(bi / BigNatModule_baseBits))) | 0;\n    const bjw = (~(~(((bi + enc.bigL) - 1) / BigNatModule_baseBits))) | 0;\n    if (biw !== bjw) {\n        const xbit = (bi % BigNatModule_baseBits) | 0;\n        return ((((z = n, (i = (biw | 0), (i < z.bound) ? z.digits[i] : 0)) >> xbit) | ((z_1 = n, (i_1 = (bjw | 0), (i_1 < z_1.bound) ? z_1.digits[i_1] : 0)) << (BigNatModule_baseBits - xbit))) & BigNatModule_bitmask[enc.bigL]) | 0;\n    }\n    else {\n        return (((z_2 = n, (i_2 = (biw | 0), (i_2 < z_2.bound) ? z_2.digits[i_2] : 0)) >> (bi % BigNatModule_baseBits)) & BigNatModule_bitmask[enc.bigL]) | 0;\n    }\n}\n\nexport function BigNatModule_encodePoly(enc, n) {\n    const poly = fill(new Uint32Array(enc.bigK), 0, enc.bigK, BigNatModule_FFT_Fp_ofInt32(0));\n    const biMax = (n.bound * BigNatModule_baseBits) | 0;\n    const encoder = (i_mut, bi_mut) => {\n        encoder:\n        while (true) {\n            const i = i_mut, bi = bi_mut;\n            if ((i === enc.bigK) ? true : (bi > biMax)) {\n            }\n            else {\n                const pi = BigNatModule_extractBits(n, enc, bi) | 0;\n                poly[i] = BigNatModule_FFT_Fp_ofInt32(pi);\n                i_mut = (i + 1);\n                bi_mut = (bi + enc.bigL);\n                continue encoder;\n            }\n            break;\n        }\n    };\n    encoder(0, 0);\n    return poly;\n}\n\nexport function BigNatModule_decodeResultBits(enc, poly) {\n    let n = 0;\n    for (let i = 0; i <= (poly.length - 1); i++) {\n        if (poly[i] !== BigNatModule_FFT_mzero) {\n            n = (i | 0);\n        }\n    }\n    return (((BigNatModule_FFT_maxBitsInsideFp + (enc.bigL * n)) + 1) + 1) | 0;\n}\n\nexport function BigNatModule_decodePoly(enc, poly) {\n    const rbound = ((~(~(BigNatModule_decodeResultBits(enc, poly) / BigNatModule_baseBits))) + 1) | 0;\n    const r = BigNatModule_createN(rbound);\n    const evaluate = (i_mut, j_mut, d_mut) => {\n        evaluate:\n        while (true) {\n            const i = i_mut, j = j_mut, d = d_mut;\n            if (i === enc.bigK) {\n            }\n            else {\n                if (j >= rbound) {\n                }\n                else {\n                    BigNatModule_contributeArr(r.digits, j, op_Multiply(fromInteger(BigNatModule_FFT_Fp_toInt(poly[i]), false, 2), BigNatModule_twopowersI64[d]));\n                }\n                const d_1 = (d + enc.bigL) | 0;\n                const patternInput = (d_1 >= BigNatModule_baseBits) ? [j + 1, d_1 - BigNatModule_baseBits] : [j, d_1];\n                i_mut = (i + 1);\n                j_mut = patternInput[0];\n                d_mut = patternInput[1];\n                continue evaluate;\n            }\n            break;\n        }\n    };\n    evaluate(0, 0, 0);\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_quickMulUsingFft(u, v) {\n    const enc = BigNatModule_encodingGivenResultBits(BigNatModule_bits(u) + BigNatModule_bits(v));\n    return BigNatModule_normN(BigNatModule_decodePoly(enc, BigNatModule_FFT_computeFftPaddedPolynomialProduct(enc.bigK, enc.k, BigNatModule_encodePoly(enc, u), BigNatModule_encodePoly(enc, v))));\n}\n\nexport const BigNatModule_minDigitsKaratsuba = 16;\n\nexport function BigNatModule_recMulKaratsuba(mul, p, q) {\n    const bmax = BigNatModule_maxInt(p.bound, q.bound) | 0;\n    if (bmax > BigNatModule_minDigitsKaratsuba) {\n        const k = (~(~(bmax / 2))) | 0;\n        const a0 = BigNatModule_restrictTo(k, p);\n        const a1 = BigNatModule_shiftDown(k, p);\n        const b0 = BigNatModule_restrictTo(k, q);\n        const b1 = BigNatModule_shiftDown(k, q);\n        const q0 = mul(a0, b0);\n        const q1 = mul(BigNatModule_add(a0, a1), BigNatModule_add(b0, b1));\n        const q2 = mul(a1, b1);\n        return BigNatModule_add(q0, BigNatModule_shiftUp(k, BigNatModule_add(BigNatModule_sub(q1, BigNatModule_add(q0, q2)), BigNatModule_shiftUp(k, q2))));\n    }\n    else {\n        return BigNatModule_mulSchoolBook(p, q);\n    }\n}\n\nexport function BigNatModule_mulKaratsuba(x, y) {\n    return BigNatModule_recMulKaratsuba((x_1, y_1) => BigNatModule_mulKaratsuba(x_1, y_1), x, y);\n}\n\nexport const BigNatModule_productDigitsUpperSchoolBook = ~(~(64000 / BigNatModule_baseBits));\n\nexport const BigNatModule_singleDigitForceSchoolBook = ~(~(32000 / BigNatModule_baseBits));\n\nexport const BigNatModule_productDigitsUpperFft = ~(~(BigNatModule_table[0].bigN / BigNatModule_baseBits));\n\nexport function BigNatModule_mul(p, q) {\n    return BigNatModule_mulSchoolBook(p, q);\n}\n\nexport function BigNatModule_scaleSubInPlace(x, f, a, n) {\n    const patternInput = [x.digits, BigNatModule_degree(x)];\n    const x_1 = patternInput[0];\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\n    const ad = patternInput_1[1] | 0;\n    const a_1 = patternInput_1[0];\n    const f_1 = fromInteger(f, false, 2);\n    let j = 0;\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\n        if (j > patternInput[1]) {\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\n        }\n        let zLo = (~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)))) | 0;\n        let zHi = op_Division(z, BigNatModule_baseNi64);\n        if (zLo <= x_1[j + n]) {\n            x_1[j + n] = ((x_1[j + n] - zLo) | 0);\n        }\n        else {\n            x_1[j + n] = ((x_1[j + n] + (BigNatModule_baseN - zLo)) | 0);\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\n        }\n        if (j < ad) {\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\n        }\n        else {\n            z = zHi;\n        }\n        j = ((j + 1) | 0);\n    }\n    void BigNatModule_normN(x);\n}\n\nexport function BigNatModule_scaleSub(x, f, a, n) {\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\n    BigNatModule_scaleSubInPlace(freshx, f, a, n);\n    return BigNatModule_normN(freshx);\n}\n\nexport function BigNatModule_scaleAddInPlace(x, f, a, n) {\n    const patternInput = [x.digits, BigNatModule_degree(x)];\n    const x_1 = patternInput[0];\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\n    const ad = patternInput_1[1] | 0;\n    const a_1 = patternInput_1[0];\n    const f_1 = fromInteger(f, false, 2);\n    let j = 0;\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\n        if (j > patternInput[1]) {\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\n        }\n        let zLo = (~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)))) | 0;\n        let zHi = op_Division(z, BigNatModule_baseNi64);\n        if (zLo < (BigNatModule_baseN - x_1[j + n])) {\n            x_1[j + n] = ((x_1[j + n] + zLo) | 0);\n        }\n        else {\n            x_1[j + n] = ((zLo - (BigNatModule_baseN - x_1[j + n])) | 0);\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\n        }\n        if (j < ad) {\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\n        }\n        else {\n            z = zHi;\n        }\n        j = ((j + 1) | 0);\n    }\n    void BigNatModule_normN(x);\n}\n\nexport function BigNatModule_scaleAdd(x, f, a, n) {\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\n    BigNatModule_scaleAddInPlace(freshx, f, a, n);\n    return BigNatModule_normN(freshx);\n}\n\nexport function BigNatModule_removeFactor(x, a, n) {\n    const patternInput = [BigNatModule_degree(a), BigNatModule_degree(x)];\n    const degx = patternInput[1] | 0;\n    const dega = patternInput[0] | 0;\n    if (degx < (dega + n)) {\n        return 0;\n    }\n    else {\n        const patternInput_1 = [a.digits, x.digits];\n        const xa = patternInput_1[1];\n        const aa = patternInput_1[0];\n        const f = ((dega === 0) ? ((degx === n) ? (~(~(xa[n] / aa[0]))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), fromInteger(aa[0], false, 2)))))) : ((degx === (dega + n)) ? (~(~(xa[degx] / (aa[dega] + 1)))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), op_Addition(fromInteger(aa[dega], false, 2), fromBits(1, 0, false)))))))) | 0;\n        if (f === 0) {\n            if (BigNatModule_shiftCompare(a, n, x, 0) !== 1) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return f | 0;\n        }\n    }\n}\n\nexport function BigNatModule_divmod(b, a) {\n    if (BigNatModule_isZero(a)) {\n        throw (new Error());\n    }\n    else if (BigNatModule_degree(b) < BigNatModule_degree(a)) {\n        return [BigNatModule_zero, b];\n    }\n    else {\n        const x = BigNatModule_copyN(b);\n        const d = BigNatModule_createN(((BigNatModule_degree(b) - BigNatModule_degree(a)) + 1) + 1);\n        let p = BigNatModule_degree(b) | 0;\n        const m = BigNatModule_degree(a) | 0;\n        let n = (p - m) | 0;\n        const Invariant = (tupledArg) => {\n        };\n        let finished = false;\n        while (!finished) {\n            Invariant([d, x, n, p]);\n            const f = BigNatModule_removeFactor(x, a, n) | 0;\n            if (f > 0) {\n                BigNatModule_scaleSubInPlace(x, f, a, n);\n                BigNatModule_scaleAddInPlace(d, f, BigNatModule_one, n);\n                Invariant([d, x, n, p]);\n            }\n            else {\n                finished = ((f === 0) ? (n === 0) : false);\n                if (!finished) {\n                    if (p === (m + n)) {\n                        Invariant([d, x, n - 1, p]);\n                        n = ((n - 1) | 0);\n                    }\n                    else {\n                        Invariant([d, x, n - 1, p - 1]);\n                        n = ((n - 1) | 0);\n                        p = ((p - 1) | 0);\n                    }\n                }\n            }\n        }\n        return [BigNatModule_normN(d), BigNatModule_normN(x)];\n    }\n}\n\nexport function BigNatModule_div(b, a) {\n    return BigNatModule_divmod(b, a)[0];\n}\n\nexport function BigNatModule_rem(b, a) {\n    return BigNatModule_divmod(b, a)[1];\n}\n\nexport function BigNatModule_bitAnd(a, b) {\n    const r = BigNatModule_createN(BigNatModule_minInt(a.bound, b.bound));\n    for (let i = 0; i <= (r.bound - 1); i++) {\n        r.digits[i] = ((a.digits[i] & b.digits[i]) | 0);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_bitOr(a, b) {\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\n    for (let i = 0; i <= (a.bound - 1); i++) {\n        r.digits[i] = ((r.digits[i] | a.digits[i]) | 0);\n    }\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\n        r.digits[i_1] = ((r.digits[i_1] | b.digits[i_1]) | 0);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_bitXor(a, b) {\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\n    for (let i = 0; i <= (a.bound - 1); i++) {\n        r.digits[i] = ((r.digits[i] ^ a.digits[i]) | 0);\n    }\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\n        r.digits[i_1] = ((r.digits[i_1] ^ b.digits[i_1]) | 0);\n    }\n    return BigNatModule_normN(r);\n}\n\nexport function BigNatModule_hcf(a, b) {\n    const hcfloop = (a_1_mut, b_1_mut) => {\n        hcfloop:\n        while (true) {\n            const a_1 = a_1_mut, b_1 = b_1_mut;\n            if (BigNatModule_equal(BigNatModule_zero, a_1)) {\n                return b_1;\n            }\n            else {\n                a_1_mut = BigNatModule_divmod(b_1, a_1)[1];\n                b_1_mut = a_1;\n                continue hcfloop;\n            }\n            break;\n        }\n    };\n    if (BigNatModule_lt(a, b)) {\n        return hcfloop(a, b);\n    }\n    else {\n        return hcfloop(b, a);\n    }\n}\n\nexport const BigNatModule_two = BigNatModule_embed(2);\n\nexport function BigNatModule_powi(x, n) {\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\n        power:\n        while (true) {\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\n            if (n_1 === 0) {\n                return acc;\n            }\n            else if ((n_1 % 2) === 0) {\n                acc_mut = acc;\n                x_1_mut = BigNatModule_mul(x_1, x_1);\n                n_1_mut = (~(~(n_1 / 2)));\n                continue power;\n            }\n            else {\n                acc_mut = BigNatModule_mul(x_1, acc);\n                x_1_mut = BigNatModule_mul(x_1, x_1);\n                n_1_mut = (~(~(n_1 / 2)));\n                continue power;\n            }\n            break;\n        }\n    };\n    return power(BigNatModule_one, x, n);\n}\n\nexport function BigNatModule_pow(x, n) {\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\n        power:\n        while (true) {\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\n            if (BigNatModule_isZero(n_1)) {\n                return acc;\n            }\n            else {\n                const patternInput = BigNatModule_divmod(n_1, BigNatModule_two);\n                const ndiv2 = patternInput[0];\n                if (BigNatModule_isZero(patternInput[1])) {\n                    acc_mut = acc;\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\n                    n_1_mut = ndiv2;\n                    continue power;\n                }\n                else {\n                    acc_mut = BigNatModule_mul(x_1, acc);\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\n                    n_1_mut = ndiv2;\n                    continue power;\n                }\n            }\n            break;\n        }\n    };\n    return power(BigNatModule_one, x, n);\n}\n\nexport function BigNatModule_toFloat(n) {\n    const evalFloat = (acc_mut, k_mut, i_mut) => {\n        evalFloat:\n        while (true) {\n            const acc = acc_mut, k = k_mut, i = i_mut;\n            if (i === n.bound) {\n                return acc;\n            }\n            else {\n                acc_mut = (acc + (k * n.digits[i]));\n                k_mut = (k * BigNatModule_baseN);\n                i_mut = (i + 1);\n                continue evalFloat;\n            }\n            break;\n        }\n    };\n    return evalFloat(0, 1, 0);\n}\n\nexport function BigNatModule_ofInt32(n) {\n    return BigNatModule_embed(n);\n}\n\nexport function BigNatModule_ofInt64(n) {\n    return BigNatModule_embed64(n);\n}\n\nexport function BigNatModule_toUInt32(n) {\n    const matchValue = n.bound | 0;\n    switch (matchValue) {\n        case 0: {\n            return 0;\n        }\n        case 1: {\n            const value = n.digits[0] | 0;\n            return value >>> 0;\n        }\n        case 2: {\n            const patternInput = [n.digits[0], n.digits[1]];\n            const xB = patternInput[1] | 0;\n            if (xB > BigNatModule_baseMask32B) {\n                throw (new Error());\n            }\n            return ((patternInput[0] & BigNatModule_baseMask32A) >>> 0) + ((((xB & BigNatModule_baseMask32B) >>> 0) << BigNatModule_baseShift32B) >>> 0);\n        }\n        default: {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigNatModule_toUInt64(n) {\n    const matchValue = n.bound | 0;\n    switch (matchValue) {\n        case 0: {\n            return fromBits(0, 0, true);\n        }\n        case 1: {\n            return fromInteger(n.digits[0], true, 2);\n        }\n        case 2: {\n            const patternInput = [n.digits[0], n.digits[1]];\n            return op_Addition(fromInteger(patternInput[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B));\n        }\n        case 3: {\n            const patternInput_1 = [n.digits[0], n.digits[1], n.digits[2]];\n            const xC = patternInput_1[2] | 0;\n            if (xC > BigNatModule_baseMask64C) {\n                throw (new Error());\n            }\n            return op_Addition(op_Addition(fromInteger(patternInput_1[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput_1[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B)), op_LeftShift(fromInteger(xC & BigNatModule_baseMask64C, true, 2), BigNatModule_baseShift64C));\n        }\n        default: {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigNatModule_toString(n) {\n    const degn = BigNatModule_degree(n) | 0;\n    const route = (prior_mut, k_mut, ten2k_mut) => {\n        route:\n        while (true) {\n            const prior = prior_mut, k = k_mut, ten2k = ten2k_mut;\n            if (BigNatModule_degree(ten2k) > degn) {\n                return cons([k, ten2k], prior);\n            }\n            else {\n                prior_mut = cons([k, ten2k], prior);\n                k_mut = (k + 1);\n                ten2k_mut = BigNatModule_mul(ten2k, ten2k);\n                continue route;\n            }\n            break;\n        }\n    };\n    const collect = (isLeading_mut, digits_mut, n_1_mut, _arg1_mut) => {\n        collect:\n        while (true) {\n            const isLeading = isLeading_mut, digits = digits_mut, n_1 = n_1_mut, _arg1 = _arg1_mut;\n            if (!isEmpty(_arg1)) {\n                const prior_1 = tail(_arg1);\n                const patternInput = BigNatModule_divmod(n_1, head(_arg1)[1]);\n                const nL = patternInput[1];\n                const nH = patternInput[0];\n                if (isLeading ? BigNatModule_isZero(nH) : false) {\n                    isLeading_mut = isLeading;\n                    digits_mut = digits;\n                    n_1_mut = nL;\n                    _arg1_mut = prior_1;\n                    continue collect;\n                }\n                else {\n                    isLeading_mut = isLeading;\n                    digits_mut = collect(false, digits, nL, prior_1);\n                    n_1_mut = nH;\n                    _arg1_mut = prior_1;\n                    continue collect;\n                }\n            }\n            else {\n                const n_2 = BigNatModule_eval32(n_1) | 0;\n                if (isLeading ? (n_2 === 0) : false) {\n                    return digits;\n                }\n                else {\n                    return cons(int32ToString(n_2), digits);\n                }\n            }\n            break;\n        }\n    };\n    const digits_4 = collect(true, empty(), n, route(empty(), 0, BigNatModule_embed(10)));\n    if (isEmpty(digits_4)) {\n        return \"0\";\n    }\n    else {\n        return join(\"\", toArray(digits_4));\n    }\n}\n\nexport function BigNatModule_ofString(str) {\n    const len = str.length | 0;\n    if (isNullOrEmpty(str)) {\n        throw (new Error(\"empty string\\\\nParameter name: str\"));\n    }\n    const ten = BigNatModule_embed(10);\n    const build = (acc_mut, i_mut) => {\n        build:\n        while (true) {\n            const acc = acc_mut, i = i_mut;\n            if (i === len) {\n                return acc;\n            }\n            else {\n                const d = (str[i].charCodeAt(0) - \"0\".charCodeAt(0)) | 0;\n                if ((0 <= d) ? (d <= 9) : false) {\n                    acc_mut = BigNatModule_add(BigNatModule_mul(ten, acc), BigNatModule_embed(d));\n                    i_mut = (i + 1);\n                    continue build;\n                }\n                else {\n                    throw (new Error());\n                }\n            }\n            break;\n        }\n    };\n    return build(BigNatModule_embed(0), 0);\n}\n\nexport function BigNatModule_isSmall(n) {\n    return n.bound <= 1;\n}\n\nexport function BigNatModule_getSmall(n) {\n    const z = n;\n    const i = 0;\n    if (i < z.bound) {\n        return z.digits[i] | 0;\n    }\n    else {\n        return 0;\n    }\n}\n\nexport function BigNatModule_factorial(n) {\n    const productR = (a, b) => {\n        if (BigNatModule_equal(a, b)) {\n            return a;\n        }\n        else {\n            const m = BigNatModule_div(BigNatModule_add(a, b), BigNatModule_ofInt32(2));\n            return BigNatModule_mul(productR(a, m), productR(BigNatModule_add(m, BigNatModule_one), b));\n        }\n    };\n    return productR(BigNatModule_one, n);\n}\n\n","import { BigNatModule_factorial, BigNatModule_ofString, BigNatModule_toFloat, BigNatModule_toUInt64, BigNatModule_toUInt32, BigNatModule_pow, BigNatModule_two, BigNatModule_rem, BigNatModule_lte, BigNatModule_hcf, BigNatModule_bitXor, BigNatModule_bitOr, BigNatModule_bitAnd, BigNatModule_divmod, BigNatModule_mul, BigNatModule_isOne, BigNatModule_sub, BigNatModule_gte, BigNatModule_scale, BigNatModule_one, BigNatModule_add, BigNatModule_ofInt64, BigNatModule_hash, BigNatModule_gt, BigNatModule_lt, BigNatModule_equal, BigNatModule_getSmall, BigNatModule_isSmall, BigNatModule_ofInt32, BigNatModule_toString, BigNatModule_isZero } from \"./n.js\";\nimport { toString, Record } from \"../Types.js\";\nimport { class_type } from \"../Reflection.js\";\nimport { initialize } from \"../Array.js\";\nimport { op_Addition, op_Multiply, fromValue, equals, fromBits, compare, fromInteger, op_UnaryNegation } from \"../Long.js\";\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\nimport Decimal from \"../Decimal.js\";\n\nexport class BigInteger extends Record {\n    constructor(signInt, v) {\n        super();\n        this.signInt = (signInt | 0);\n        this.v = v;\n    }\n    toString() {\n        const x = this;\n        const matchValue = BigInteger__get_SignInt(x) | 0;\n        switch (matchValue) {\n            case -1: {\n                return BigNatModule_isZero(BigInteger__get_V(x)) ? \"0\" : (\"-\" + BigNatModule_toString(BigInteger__get_V(x)));\n            }\n            case 0: {\n                return \"0\";\n            }\n            case 1: {\n                return BigNatModule_toString(BigInteger__get_V(x));\n            }\n            default: {\n                throw (new Error(\"signs should be +/- 1 or 0\"));\n            }\n        }\n    }\n    Equals(obj) {\n        const this$ = this;\n        return (obj instanceof BigInteger) ? BigInteger_op_Equality_56F059C0(this$, obj) : false;\n    }\n    GetHashCode() {\n        const x = this;\n        return BigInteger_hash_Z665282C2(x) | 0;\n    }\n    CompareTo(obj) {\n        const this$ = this;\n        if (obj instanceof BigInteger) {\n            return BigInteger_compare_56F059C0(this$, obj) | 0;\n        }\n        else {\n            throw (new Error(\"the objects are not comparable\\\\nParameter name: obj\"));\n        }\n    }\n}\n\nexport function BigInteger$reflection() {\n    return class_type(\"BigInt.BigInteger\", void 0, BigInteger, class_type(\"System.ValueType\"));\n}\n\nexport function BigInteger_$ctor_Z2BE94A1(signInt, v) {\n    return new BigInteger(signInt, v);\n}\n\n(() => {\n    BigInteger.smallLim = 4096;\n    BigInteger.smallPosTab = initialize(BigInteger.smallLim, (n) => BigNatModule_ofInt32(n));\n    BigInteger.one = BigInteger_$ctor_Z524259A4(1);\n    BigInteger.two = BigInteger_$ctor_Z524259A4(2);\n    BigInteger.zero = BigInteger_$ctor_Z524259A4(0);\n})();\n\nexport function BigInteger_nat_Z67CCE57D(n) {\n    if (BigNatModule_isSmall(n) ? (BigNatModule_getSmall(n) < BigInteger.smallLim) : false) {\n        return BigInteger.smallPosTab[BigNatModule_getSmall(n)];\n    }\n    else {\n        return n;\n    }\n}\n\nexport function BigInteger_create_Z2BE94A1(s, n) {\n    return BigInteger_$ctor_Z2BE94A1(s, BigInteger_nat_Z67CCE57D(n));\n}\n\nexport function BigInteger_posn_Z67CCE57D(n) {\n    return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(n));\n}\n\nexport function BigInteger_negn_Z67CCE57D(n) {\n    return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(n));\n}\n\nexport function BigInteger__get_Sign(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return 0;\n    }\n    else {\n        return x.signInt | 0;\n    }\n}\n\nexport function BigInteger__get_SignInt(x) {\n    return x.signInt;\n}\n\nexport function BigInteger__get_V(x) {\n    return x.v;\n}\n\nexport function BigInteger_op_Equality_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 5;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 7;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 2: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 3: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 4: {\n            return true;\n        }\n        case 5: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 6: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 7: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 8: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_op_Inequality_56F059C0(x, y) {\n    return !BigInteger_op_Equality_56F059C0(x, y);\n}\n\nexport function BigInteger_op_LessThan_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 5;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 7;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_lt(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_lt(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            return false;\n        }\n        case 3: {\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\n                return true;\n            }\n            else {\n                return !BigNatModule_isZero(BigInteger__get_V(y));\n            }\n        }\n        case 4: {\n            return false;\n        }\n        case 5: {\n            return !BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 6: {\n            return false;\n        }\n        case 7: {\n            return false;\n        }\n        case 8: {\n            return !BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_op_GreaterThan_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 5;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 7;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_gt(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_gt(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\n                return true;\n            }\n            else {\n                return !BigNatModule_isZero(BigInteger__get_V(y));\n            }\n        }\n        case 3: {\n            return false;\n        }\n        case 4: {\n            return false;\n        }\n        case 5: {\n            return false;\n        }\n        case 6: {\n            return !BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 7: {\n            return !BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 8: {\n            return false;\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_compare_56F059C0(n, nn) {\n    if (BigInteger_op_LessThan_56F059C0(n, nn)) {\n        return -1;\n    }\n    else if (BigInteger_op_Equality_56F059C0(n, nn)) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n\nexport function BigInteger_hash_Z665282C2(z) {\n    if (BigInteger__get_SignInt(z) === 0) {\n        return 1;\n    }\n    else {\n        return (BigInteger__get_SignInt(z) + BigNatModule_hash(BigInteger__get_V(z))) | 0;\n    }\n}\n\nexport function BigInteger__get_StructuredDisplayString(x) {\n    return toString(x);\n}\n\nexport function BigInteger_$ctor_Z524259A4(n) {\n    if (n >= 0) {\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(n)));\n    }\n    else if (n === -2147483648) {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(fromInteger(n, false, 2)))));\n    }\n    else {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(op_UnaryNegation_Int32(n))));\n    }\n}\n\nexport function BigInteger_$ctor_Z524259C1(n) {\n    if (compare(n, fromBits(0, 0, false)) >= 0) {\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(n)));\n    }\n    else if (equals(n, fromBits(0, 2147483648, false))) {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_add(BigNatModule_ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule_one)));\n    }\n    else {\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(n))));\n    }\n}\n\nexport function BigInteger_get_One() {\n    return BigInteger.one;\n}\n\nexport function BigInteger_get_Two() {\n    return BigInteger.two;\n}\n\nexport function BigInteger_get_Zero() {\n    return BigInteger.zero;\n}\n\nexport function BigInteger_op_UnaryNegation_Z665282C2(z) {\n    const matchValue = BigInteger__get_SignInt(z) | 0;\n    if (matchValue === 0) {\n        return BigInteger_get_Zero();\n    }\n    else {\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(matchValue), BigInteger__get_V(z));\n    }\n}\n\nexport function BigInteger_Scale_Z320F31E(k, z) {\n    if (BigInteger__get_SignInt(z) === 0) {\n        return BigInteger_get_Zero();\n    }\n    else if (k < 0) {\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(BigInteger__get_SignInt(z)), BigNatModule_scale(op_UnaryNegation_Int32(k), BigInteger__get_V(z)));\n    }\n    else {\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(z), BigNatModule_scale(k, BigInteger__get_V(z)));\n    }\n}\n\nexport function BigInteger_subnn_6A57060(nx, ny) {\n    if (BigNatModule_gte(nx, ny)) {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_sub(nx, ny));\n    }\n    else {\n        return BigInteger_negn_Z67CCE57D(BigNatModule_sub(ny, nx));\n    }\n}\n\nexport function BigInteger_addnn_6A57060(nx, ny) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_add(nx, ny));\n}\n\nexport function BigInteger__get_IsZero(x) {\n    if (BigInteger__get_SignInt(x) === 0) {\n        return true;\n    }\n    else {\n        return BigNatModule_isZero(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger__get_IsOne(x) {\n    if (BigInteger__get_SignInt(x) === 1) {\n        return BigNatModule_isOne(BigInteger__get_V(x));\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigInteger_op_Addition_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(y)) {\n        return x;\n    }\n    else if (BigInteger__get_IsZero(x)) {\n        return y;\n    }\n    else {\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n        let pattern_matching_result;\n        if (matchValue[0] === -1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 1;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 3;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 2;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 1: {\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\n            }\n            case 2: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 3: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\n            }\n            case 4: {\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\n            }\n        }\n    }\n}\n\nexport function BigInteger_op_Subtraction_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(y)) {\n        return x;\n    }\n    else if (BigInteger__get_IsZero(x)) {\n        return BigInteger_op_UnaryNegation_Z665282C2(y);\n    }\n    else {\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n        let pattern_matching_result;\n        if (matchValue[0] === -1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 1;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 3;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 2;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 1: {\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\n            }\n            case 2: {\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\n            }\n            case 3: {\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\n            }\n            case 4: {\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\n            }\n        }\n    }\n}\n\nexport function BigInteger_op_Multiply_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(x)) {\n        return x;\n    }\n    else if (BigInteger__get_IsZero(y)) {\n        return y;\n    }\n    else if (BigInteger__get_IsOne(x)) {\n        return y;\n    }\n    else if (BigInteger__get_IsOne(y)) {\n        return x;\n    }\n    else {\n        const m = BigNatModule_mul(BigInteger__get_V(x), BigInteger__get_V(y));\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(x) * BigInteger__get_SignInt(y), m);\n    }\n}\n\nexport function BigInteger_DivRem_56F059C0(x, y) {\n    if (BigInteger__get_IsZero(y)) {\n        throw (new Error());\n    }\n    if (BigInteger__get_IsZero(x)) {\n        return [BigInteger_get_Zero(), BigInteger_get_Zero()];\n    }\n    else {\n        const patternInput = BigNatModule_divmod(BigInteger__get_V(x), BigInteger__get_V(y));\n        const r = patternInput[1];\n        const d = patternInput[0];\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n        let pattern_matching_result;\n        if (matchValue[0] === -1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 1;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 3;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1] === -1) {\n                pattern_matching_result = 2;\n            }\n            else if (matchValue[1] === 1) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 4;\n            }\n        }\n        else {\n            pattern_matching_result = 4;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\n            }\n            case 1: {\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\n            }\n            case 2: {\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\n            }\n            case 3: {\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\n            }\n            case 4: {\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\n            }\n        }\n    }\n}\n\nexport function BigInteger_op_Division_56F059C0(x, y) {\n    return BigInteger_DivRem_56F059C0(x, y)[0];\n}\n\nexport function BigInteger_op_Modulus_56F059C0(x, y) {\n    return BigInteger_DivRem_56F059C0(x, y)[1];\n}\n\nexport function BigInteger_op_RightShift_62E082A2(x, y) {\n    return BigInteger_op_Division_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\n}\n\nexport function BigInteger_op_LeftShift_62E082A2(x, y) {\n    return BigInteger_op_Multiply_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\n}\n\nexport function BigInteger_op_BitwiseAnd_56F059C0(x, y) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitAnd(BigInteger__get_V(x), BigInteger__get_V(y)));\n}\n\nexport function BigInteger_op_BitwiseOr_56F059C0(x, y) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitOr(BigInteger__get_V(x), BigInteger__get_V(y)));\n}\n\nexport function BigInteger_op_ExclusiveOr_56F059C0(x, y) {\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitXor(BigInteger__get_V(x), BigInteger__get_V(y)));\n}\n\nexport function BigInteger_GreatestCommonDivisor_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    if (matchValue[0] === 0) {\n        if (matchValue[1] === 0) {\n            return BigInteger_get_Zero();\n        }\n        else {\n            return BigInteger_posn_Z67CCE57D(BigInteger__get_V(y));\n        }\n    }\n    else if (matchValue[1] === 0) {\n        return BigInteger_posn_Z67CCE57D(BigInteger__get_V(x));\n    }\n    else {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_hcf(BigInteger__get_V(x), BigInteger__get_V(y)));\n    }\n}\n\nexport function BigInteger__get_IsNegative(x) {\n    if (BigInteger__get_SignInt(x) === -1) {\n        return !BigInteger__get_IsZero(x);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigInteger__get_IsPositive(x) {\n    if (BigInteger__get_SignInt(x) === 1) {\n        return !BigInteger__get_IsZero(x);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function BigInteger_Abs_Z665282C2(x) {\n    if (BigInteger__get_SignInt(x) === -1) {\n        return BigInteger_op_UnaryNegation_Z665282C2(x);\n    }\n    else {\n        return x;\n    }\n}\n\nexport function BigInteger_op_LessThanOrEqual_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 7;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 5;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_lte(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_lte(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 3: {\n            return true;\n        }\n        case 4: {\n            return true;\n        }\n        case 5: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 6: {\n            return true;\n        }\n        case 7: {\n            return true;\n        }\n        case 8: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_op_GreaterThanOrEqual_56F059C0(x, y) {\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\n    let pattern_matching_result;\n    if (matchValue[0] === -1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 1;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 6;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 3;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 0) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 8;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 4;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 7;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else if (matchValue[0] === 1) {\n        if (matchValue[1] === -1) {\n            pattern_matching_result = 2;\n        }\n        else if (matchValue[1] === 0) {\n            pattern_matching_result = 5;\n        }\n        else if (matchValue[1] === 1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 9;\n        }\n    }\n    else {\n        pattern_matching_result = 9;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return BigNatModule_gte(BigInteger__get_V(x), BigInteger__get_V(y));\n        }\n        case 1: {\n            return BigNatModule_gte(BigInteger__get_V(y), BigInteger__get_V(x));\n        }\n        case 2: {\n            return true;\n        }\n        case 3: {\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\n                return BigNatModule_isZero(BigInteger__get_V(y));\n            }\n            else {\n                return false;\n            }\n        }\n        case 4: {\n            return true;\n        }\n        case 5: {\n            return true;\n        }\n        case 6: {\n            return BigNatModule_isZero(BigInteger__get_V(x));\n        }\n        case 7: {\n            return BigNatModule_isZero(BigInteger__get_V(y));\n        }\n        case 8: {\n            return true;\n        }\n        case 9: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger_Pow_62E082A2(x, y) {\n    if (y < 0) {\n        throw (new Error(\"y\"));\n    }\n    const matchValue = [BigInteger__get_IsZero(x), y];\n    if (matchValue[0]) {\n        if (matchValue[1] === 0) {\n            return BigInteger_get_One();\n        }\n        else {\n            return BigInteger_get_Zero();\n        }\n    }\n    else {\n        const yval = BigInteger_$ctor_Z524259A4(y);\n        return BigInteger_create_Z2BE94A1(BigNatModule_isZero(BigNatModule_rem(BigInteger__get_V(yval), BigNatModule_two)) ? 1 : BigInteger__get_SignInt(x), BigNatModule_pow(BigInteger__get_V(x), BigInteger__get_V(yval)));\n    }\n}\n\nexport function BigInteger__get_ToInt32(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return 0;\n    }\n    else {\n        const u = BigNatModule_toUInt32(BigInteger__get_V(x));\n        if (u <= (2147483647 >>> 0)) {\n            return (BigInteger__get_SignInt(x) * (~(~u))) | 0;\n        }\n        else if ((BigInteger__get_SignInt(x) === -1) ? (u === ((2147483647 + 1) >>> 0)) : false) {\n            return -2147483648;\n        }\n        else {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigInteger__get_ToUInt32(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return 0;\n    }\n    else {\n        return BigNatModule_toUInt32(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger__get_ToInt64(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return fromBits(0, 0, false);\n    }\n    else {\n        const u = BigNatModule_toUInt64(BigInteger__get_V(x));\n        if (compare(u, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\n            return op_Multiply(fromInteger(BigInteger__get_SignInt(x), false, 2), fromValue(u, false));\n        }\n        else if ((BigInteger__get_SignInt(x) === -1) ? equals(u, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\n            return fromBits(0, 2147483648, false);\n        }\n        else {\n            throw (new Error());\n        }\n    }\n}\n\nexport function BigInteger__get_ToUInt64(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return fromBits(0, 0, true);\n    }\n    else {\n        return BigNatModule_toUInt64(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger__get_ToDouble(x) {\n    const matchValue = BigInteger__get_SignInt(x) | 0;\n    switch (matchValue) {\n        case -1: {\n            return -BigNatModule_toFloat(BigInteger__get_V(x));\n        }\n        case 0: {\n            return 0;\n        }\n        case 1: {\n            return BigNatModule_toFloat(BigInteger__get_V(x));\n        }\n        default: {\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\n        }\n    }\n}\n\nexport function BigInteger__get_ToSByte(x) {\n    return (BigInteger__get_ToInt32(x) + 0x80 & 0xFF) - 0x80;\n}\n\nexport function BigInteger__get_ToByte(x) {\n    return BigInteger__get_ToUInt32(x) & 0xFF;\n}\n\nexport function BigInteger__get_ToInt16(x) {\n    return (BigInteger__get_ToInt32(x) + 0x8000 & 0xFFFF) - 0x8000;\n}\n\nexport function BigInteger__get_ToUInt16(x) {\n    return BigInteger__get_ToUInt32(x) & 0xFFFF;\n}\n\nexport function BigInteger__get_ToSingle(x) {\n    return BigInteger__get_ToDouble(x);\n}\n\nexport function BigInteger__get_ToDecimal(x) {\n    return new Decimal(BigInteger__get_ToDouble(x));\n}\n\nexport function BigInteger_Parse_Z721C83C5(text) {\n    if (text == null) {\n        throw (new Error(\"text\"));\n    }\n    const text_1 = text.trim();\n    const len = text_1.length | 0;\n    if (len === 0) {\n        throw (new Error());\n    }\n    const matchValue = [text_1[0], len];\n    if (matchValue[0] === \"+\") {\n        if (matchValue[1] === 1) {\n            throw (new Error());\n        }\n        else {\n            return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\n        }\n    }\n    else if (matchValue[0] === \"-\") {\n        if (matchValue[1] === 1) {\n            throw (new Error());\n        }\n        else {\n            return BigInteger_negn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\n        }\n    }\n    else {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1));\n    }\n}\n\nexport function BigInteger__get_IsSmall(x) {\n    if (BigInteger__get_IsZero(x)) {\n        return true;\n    }\n    else {\n        return BigNatModule_isSmall(BigInteger__get_V(x));\n    }\n}\n\nexport function BigInteger_Factorial_Z665282C2(x) {\n    if (BigInteger__get_IsNegative(x)) {\n        throw (new Error(\"mustBeNonNegative\\\\nParameter name: x\"));\n    }\n    if (BigInteger__get_IsPositive(x)) {\n        return BigInteger_posn_Z67CCE57D(BigNatModule_factorial(BigInteger__get_V(x)));\n    }\n    else {\n        return BigInteger_get_One();\n    }\n}\n\nexport function BigInteger_op_UnaryPlus_Z665282C2(n1) {\n    return n1;\n}\n\nexport function BigInteger_FromInt64_Z524259C1(x) {\n    return BigInteger_$ctor_Z524259C1(x);\n}\n\nexport function BigInteger_FromInt32_Z524259A4(x) {\n    return BigInteger_$ctor_Z524259A4(x);\n}\n\n","import { BigInteger_op_Inequality_56F059C0, BigInteger_op_Equality_56F059C0, BigInteger_op_GreaterThanOrEqual_56F059C0, BigInteger_op_GreaterThan_56F059C0, BigInteger_op_LessThanOrEqual_56F059C0, BigInteger_op_LessThan_56F059C0, BigInteger_op_ExclusiveOr_56F059C0, BigInteger_op_BitwiseOr_56F059C0, BigInteger_op_BitwiseAnd_56F059C0, BigInteger_op_LeftShift_62E082A2, BigInteger_op_RightShift_62E082A2, BigInteger_op_UnaryPlus_Z665282C2, BigInteger_op_UnaryNegation_Z665282C2, BigInteger_op_Modulus_56F059C0, BigInteger_op_Division_56F059C0, BigInteger_op_Multiply_56F059C0, BigInteger_op_Subtraction_56F059C0, BigInteger_op_Addition_56F059C0, BigInteger__get_IsOne, BigInteger__get_IsZero, BigInteger__get_Sign, BigInteger__get_ToDecimal, BigInteger__get_ToDouble, BigInteger__get_ToSingle, BigInteger__get_ToUInt64, BigInteger__get_ToInt64, BigInteger__get_ToUInt32, BigInteger__get_ToInt32, BigInteger__get_ToUInt16, BigInteger__get_ToInt16, BigInteger__get_ToByte, BigInteger__get_ToSByte, BigInteger_$ctor_Z524259A4, BigInteger_$ctor_Z524259C1, BigInteger_get_Two, BigInteger_get_One, BigInteger_get_Zero, BigInteger_Abs_Z665282C2, BigInteger_Pow_62E082A2, BigInteger_GreatestCommonDivisor_56F059C0, BigInteger_DivRem_56F059C0, BigInteger_Parse_Z721C83C5, BigInteger } from \"./BigInt/z.js\";\nimport { fromInteger } from \"./Long.js\";\nimport { comparePrimitives, min, compare as compare_1, equals as equals_1, safeHash } from \"./Util.js\";\nimport { toString as toString_1 } from \"./Types.js\";\nimport { fold, empty, ofArrayWithTail, cons, toArray, head, skipWhile } from \"./List.js\";\nimport { fill, reverse } from \"./Array.js\";\n\nexport function isBigInt(x) {\n    return x instanceof BigInteger;\n}\n\nexport function tryParse(str, res) {\n    try {\n        res.contents = BigInteger_Parse_Z721C83C5(str);\n        return true;\n    }\n    catch (matchValue) {\n        return false;\n    }\n}\n\nexport function divRem(x, y, remainder) {\n    const patternInput = BigInteger_DivRem_56F059C0(x, y);\n    remainder.contents = patternInput[1];\n    return patternInput[0];\n}\n\nexport function parse(arg00) {\n    return BigInteger_Parse_Z721C83C5(arg00);\n}\n\nexport function greatestCommonDivisor(arg00, arg01) {\n    return BigInteger_GreatestCommonDivisor_56F059C0(arg00, arg01);\n}\n\nexport function pow(arg00, arg01) {\n    return BigInteger_Pow_62E082A2(arg00, arg01);\n}\n\nexport function abs(arg00) {\n    return BigInteger_Abs_Z665282C2(arg00);\n}\n\nexport const zero = BigInteger_get_Zero();\n\nexport const one = BigInteger_get_One();\n\nexport const two = BigInteger_get_Two();\n\nexport function fromString(s) {\n    return BigInteger_Parse_Z721C83C5(s);\n}\n\nexport function fromZero() {\n    return BigInteger_get_Zero();\n}\n\nexport function fromOne() {\n    return BigInteger_get_One();\n}\n\nexport function fromInt64(i) {\n    return BigInteger_$ctor_Z524259C1(i);\n}\n\nexport function fromInt32(i) {\n    if (i > 2147483647) {\n        return BigInteger_$ctor_Z524259C1(fromInteger(i, false, 6));\n    }\n    else {\n        return BigInteger_$ctor_Z524259A4(i);\n    }\n}\n\nexport function toSByte(x) {\n    return BigInteger__get_ToSByte(x);\n}\n\nexport function toByte(x) {\n    return BigInteger__get_ToByte(x);\n}\n\nexport function toInt16(x) {\n    return BigInteger__get_ToInt16(x);\n}\n\nexport function toUInt16(x) {\n    return BigInteger__get_ToUInt16(x);\n}\n\nexport function toInt32(x) {\n    return BigInteger__get_ToInt32(x);\n}\n\nexport function toUInt32(x) {\n    return BigInteger__get_ToUInt32(x);\n}\n\nexport function toInt64(x) {\n    return BigInteger__get_ToInt64(x);\n}\n\nexport function toUInt64(x) {\n    return BigInteger__get_ToUInt64(x);\n}\n\nexport function toSingle(x) {\n    return BigInteger__get_ToSingle(x);\n}\n\nexport function toDouble(x) {\n    return BigInteger__get_ToDouble(x);\n}\n\nexport function toDecimal(x) {\n    return BigInteger__get_ToDecimal(x);\n}\n\nexport function sign(x) {\n    return BigInteger__get_Sign(x);\n}\n\nexport function isZero(x) {\n    return BigInteger__get_IsZero(x);\n}\n\nexport function isOne(x) {\n    return BigInteger__get_IsOne(x);\n}\n\nexport function hash(x) {\n    return safeHash(x);\n}\n\nexport function compare(x, y) {\n    return x.CompareTo(y);\n}\n\nexport function equals(x, y) {\n    return equals_1(x, y);\n}\n\nexport function toString(x) {\n    return toString_1(x);\n}\n\nexport const get_Zero = BigInteger_get_Zero();\n\nexport const get_One = BigInteger_get_One();\n\nexport function op_Addition(arg00, arg01) {\n    return BigInteger_op_Addition_56F059C0(arg00, arg01);\n}\n\nexport function op_Subtraction(arg00, arg01) {\n    return BigInteger_op_Subtraction_56F059C0(arg00, arg01);\n}\n\nexport function op_Multiply(arg00, arg01) {\n    return BigInteger_op_Multiply_56F059C0(arg00, arg01);\n}\n\nexport function op_Division(arg00, arg01) {\n    return BigInteger_op_Division_56F059C0(arg00, arg01);\n}\n\nexport function op_Modulus(arg00, arg01) {\n    return BigInteger_op_Modulus_56F059C0(arg00, arg01);\n}\n\nexport function op_UnaryNegation(arg00) {\n    return BigInteger_op_UnaryNegation_Z665282C2(arg00);\n}\n\nexport function op_UnaryPlus(arg00) {\n    return BigInteger_op_UnaryPlus_Z665282C2(arg00);\n}\n\nexport function op_RightShift(arg00, arg01) {\n    return BigInteger_op_RightShift_62E082A2(arg00, arg01);\n}\n\nexport function op_LeftShift(arg00, arg01) {\n    return BigInteger_op_LeftShift_62E082A2(arg00, arg01);\n}\n\nexport function op_BitwiseAnd(arg00, arg01) {\n    return BigInteger_op_BitwiseAnd_56F059C0(arg00, arg01);\n}\n\nexport function op_BitwiseOr(arg00, arg01) {\n    return BigInteger_op_BitwiseOr_56F059C0(arg00, arg01);\n}\n\nexport function op_ExclusiveOr(arg00, arg01) {\n    return BigInteger_op_ExclusiveOr_56F059C0(arg00, arg01);\n}\n\nexport function op_LessThan(arg00, arg01) {\n    return BigInteger_op_LessThan_56F059C0(arg00, arg01);\n}\n\nexport function op_LessThanOrEqual(arg00, arg01) {\n    return BigInteger_op_LessThanOrEqual_56F059C0(arg00, arg01);\n}\n\nexport function op_GreaterThan(arg00, arg01) {\n    return BigInteger_op_GreaterThan_56F059C0(arg00, arg01);\n}\n\nexport function op_GreaterThanOrEqual(arg00, arg01) {\n    return BigInteger_op_GreaterThanOrEqual_56F059C0(arg00, arg01);\n}\n\nexport function op_Equality(arg00, arg01) {\n    return BigInteger_op_Equality_56F059C0(arg00, arg01);\n}\n\nexport function op_Inequality(arg00, arg01) {\n    return BigInteger_op_Inequality_56F059C0(arg00, arg01);\n}\n\nfunction flipTwosComplement(currByte, lowBitFound) {\n    const matchValue = [currByte, lowBitFound];\n    if (matchValue[1]) {\n        return [(currByte ^ 255) & 255, true];\n    }\n    else if (matchValue[0] === 0) {\n        return [0, false];\n    }\n    else {\n        return [(currByte ^ (254 << (new Int32Array([0, 1, 2, 3, 4, 5, 6, 7])).find((i) => ((currByte & (1 << i)) > 0)))) & 255, true];\n    }\n}\n\nexport function toByteArray(value) {\n    if (equals_1(value, zero)) {\n        return new Uint8Array([0]);\n    }\n    else {\n        const isPositive = compare_1(value, zero) > 0;\n        const value_1 = isPositive ? value : BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value);\n        const mask32 = fromInt64(fromInteger(4294967295, false, 6));\n        const loop = (accumBytes_mut, consumeValue_mut, lowBitFound_mut) => {\n            let value_6, value_8, value_9, value_10;\n            loop:\n            while (true) {\n                const accumBytes = accumBytes_mut, consumeValue = consumeValue_mut, lowBitFound = lowBitFound_mut;\n                if (compare_1(consumeValue, zero) <= 0) {\n                    const accumBytes_1 = isPositive ? skipWhile((b) => (b === 0), accumBytes) : skipWhile((b_1) => (b_1 === 255), accumBytes);\n                    const isHighBitOne = (head(accumBytes_1) & 128) !== 0;\n                    return reverse(toArray((isPositive ? isHighBitOne : false) ? cons(0, accumBytes_1) : (((!isPositive) ? (!isHighBitOne) : false) ? cons(255, accumBytes_1) : accumBytes_1)));\n                }\n                else {\n                    const currValue = toUInt32(BigInteger_op_BitwiseAnd_56F059C0(consumeValue, mask32));\n                    if (isPositive) {\n                        const b0 = currValue & 0xFF;\n                        let b1;\n                        const value_4 = currValue >>> 8;\n                        b1 = (value_4 & 0xFF);\n                        let b2;\n                        const value_5 = currValue >>> 16;\n                        b2 = (value_5 & 0xFF);\n                        accumBytes_mut = ofArrayWithTail([(value_6 = (currValue >>> 24), value_6 & 0xFF), b2, b1, b0], accumBytes);\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\n                        lowBitFound_mut = false;\n                        continue loop;\n                    }\n                    else {\n                        const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound);\n                        const patternInput_1 = flipTwosComplement((value_8 = (currValue >>> 8), value_8 & 0xFF), patternInput[1]);\n                        const patternInput_2 = flipTwosComplement((value_9 = (currValue >>> 16), value_9 & 0xFF), patternInput_1[1]);\n                        const patternInput_3 = flipTwosComplement((value_10 = (currValue >>> 24), value_10 & 0xFF), patternInput_2[1]);\n                        accumBytes_mut = ofArrayWithTail([patternInput_3[0], patternInput_2[0], patternInput_1[0], patternInput[0]], accumBytes);\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\n                        lowBitFound_mut = patternInput_3[1];\n                        continue loop;\n                    }\n                }\n                break;\n            }\n        };\n        return loop(empty(), value_1, false);\n    }\n}\n\nexport function fromByteArray(bytes) {\n    if (bytes == null) {\n        throw (new Error(\"bytes\"));\n    }\n    if (bytes.length === 0) {\n        return zero;\n    }\n    else {\n        const isPositive = (bytes[bytes.length - 1] & 128) === 0;\n        const buffer = fill(new Uint8Array(4), 0, 4, 0);\n        const loop = (accumUInt32_mut, currIndex_mut, bytesRemaining_mut, lowBitFound_mut) => {\n            loop:\n            while (true) {\n                const accumUInt32 = accumUInt32_mut, currIndex = currIndex_mut, bytesRemaining = bytesRemaining_mut, lowBitFound = lowBitFound_mut;\n                if (bytesRemaining === 0) {\n                    const value_2 = fold((acc, value) => BigInteger_op_Addition_56F059C0(BigInteger_op_LeftShift_62E082A2(acc, 32), fromInt64(fromInteger(value, false, 6))), zero, accumUInt32);\n                    if (isPositive) {\n                        return value_2;\n                    }\n                    else {\n                        return BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value_2);\n                    }\n                }\n                else {\n                    const bytesToProcess = min((x, y) => comparePrimitives(x, y), bytesRemaining, 4) | 0;\n                    for (let i_1 = 0; i_1 <= (bytesToProcess - 1); i_1++) {\n                        buffer[i_1] = bytes[currIndex + i_1];\n                    }\n                    if (isPositive) {\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\n                        accumUInt32_mut = cons((((((buffer[0] | ((buffer[1] << 8) >>> 0)) >>> 0) | ((buffer[2] << 16) >>> 0)) >>> 0) | ((buffer[3] << 24) >>> 0)) >>> 0, accumUInt32);\n                        currIndex_mut = (currIndex + bytesToProcess);\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\n                        lowBitFound_mut = false;\n                        continue loop;\n                    }\n                    else {\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\n                        const patternInput = flipTwosComplement(buffer[0], lowBitFound);\n                        const patternInput_1 = flipTwosComplement(buffer[1], patternInput[1]);\n                        const patternInput_2 = flipTwosComplement(buffer[2], patternInput_1[1]);\n                        const patternInput_3 = flipTwosComplement(buffer[3], patternInput_2[1]);\n                        accumUInt32_mut = cons((((((patternInput[0] | ((patternInput_1[0] << 8) >>> 0)) >>> 0) | ((patternInput_2[0] << 16) >>> 0)) >>> 0) | ((patternInput_3[0] << 24) >>> 0)) >>> 0, accumUInt32);\n                        currIndex_mut = (currIndex + bytesToProcess);\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\n                        lowBitFound_mut = patternInput_3[1];\n                        continue loop;\n                    }\n                }\n                break;\n            }\n        };\n        return loop(empty(), 0, bytes.length, false);\n    }\n}\n\n","// tslint:disable:max-line-length\nimport { fromNumber, op_Division, op_Multiply, toNumber } from \"./Long.js\";\nimport { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util.js\";\n// TimeSpan in runtime just becomes a number representing milliseconds\n/**\n * Calls:\n * - `Math.ceil` if the `value` is **negative**\n * - `Math.floor` if the `value` is **positive**\n * @param value Value to round\n */\nfunction signedRound(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n}\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return toNumber(op_Division(ticks, 10000));\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return signedRound(ts / 86400000);\n}\nexport function hours(ts) {\n    return signedRound(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return signedRound(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return signedRound(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return signedRound(ts % 1000);\n}\nexport function ticks(ts) {\n    return op_Multiply(fromNumber(ts), 10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\", _provider) {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = Math.abs(days(ts));\n    const h = Math.abs(hours(ts));\n    const m = Math.abs(minutes(ts));\n    const s = Math.abs(seconds(ts));\n    const ms = Math.abs(milliseconds(ts));\n    const sign = ts < 0 ? \"-\" : \"\";\n    return `${sign}${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // WIP: (-?)(((\\d+)\\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\\d+)(:\\d+(\\.\\d{1,7})?)?|\\d+(?:(?!\\.)))\n        const r = /^(-?)((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[4] != null && r[5] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const sign = r[1] != null && r[1] === \"-\" ? -1 : 1;\n            const h = +r[4];\n            const m = +r[5];\n            if (r[3] != null) {\n                d = +r[3];\n            }\n            if (r[7] != null) {\n                s = +r[7];\n            }\n            if (r[8] != null) {\n                // Depending on the number of decimals passed, we need to adapt the numbers\n                switch (r[8].length) {\n                    case 1:\n                        ms = +r[8] * 100;\n                        break;\n                    case 2:\n                        ms = +r[8] * 10;\n                        break;\n                    case 3:\n                        ms = +r[8];\n                        break;\n                    case 4:\n                        ms = +r[8] / 10;\n                        break;\n                    case 5:\n                        ms = +r[8] / 100;\n                        break;\n                    case 6:\n                        ms = +r[8] / 1000;\n                        break;\n                    case 7:\n                        ms = +r[8] / 10000;\n                        break;\n                    default:\n                        throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n                }\n            }\n            return sign * create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n","import { FSharpRef, Record, Union } from \"../fable-library.3.1.11/Types.js\";\nimport { record_type, class_type, tuple_type, lambda_type, union_type, list_type, obj_type, string_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { FSharpResult$2 } from \"../fable-library.3.1.11/Choice.js\";\nimport { addToDict, tryGetValue } from \"../fable-library.3.1.11/MapUtil.js\";\nimport { replace } from \"../fable-library.3.1.11/RegExp.js\";\n\nexport class ErrorReason extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"BadPrimitive\", \"BadPrimitiveExtra\", \"BadType\", \"BadField\", \"BadPath\", \"TooSmallArray\", \"FailMessage\", \"BadOneOf\"];\n    }\n}\n\nexport function ErrorReason$reflection() {\n    return union_type(\"Thoth.Json.ErrorReason\", [], ErrorReason, () => [[[\"Item1\", string_type], [\"Item2\", obj_type]], [[\"Item1\", string_type], [\"Item2\", obj_type], [\"Item3\", string_type]], [[\"Item1\", string_type], [\"Item2\", obj_type]], [[\"Item1\", string_type], [\"Item2\", obj_type]], [[\"Item1\", string_type], [\"Item2\", obj_type], [\"Item3\", string_type]], [[\"Item1\", string_type], [\"Item2\", obj_type]], [[\"Item\", string_type]], [[\"Item\", list_type(string_type)]]]);\n}\n\nexport class CaseStrategy extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"PascalCase\", \"CamelCase\", \"SnakeCase\"];\n    }\n}\n\nexport function CaseStrategy$reflection() {\n    return union_type(\"Thoth.Json.CaseStrategy\", [], CaseStrategy, () => [[], [], []]);\n}\n\nexport class ExtraCoders extends Record {\n    constructor(Hash, Coders) {\n        super();\n        this.Hash = Hash;\n        this.Coders = Coders;\n    }\n}\n\nexport function ExtraCoders$reflection() {\n    return record_type(\"Thoth.Json.ExtraCoders\", [], ExtraCoders, () => [[\"Hash\", string_type], [\"Coders\", class_type(\"Microsoft.FSharp.Collections.FSharpMap`2\", [string_type, tuple_type(lambda_type(obj_type, obj_type), lambda_type(string_type, lambda_type(obj_type, union_type(\"Microsoft.FSharp.Core.FSharpResult`2\", [obj_type, tuple_type(string_type, ErrorReason$reflection())], FSharpResult$2, () => [[[\"ResultValue\", obj_type]], [[\"ErrorValue\", tuple_type(string_type, ErrorReason$reflection())]]]))))])]]);\n}\n\nexport class Util_Cache$1 {\n    constructor() {\n        this.cache = (new Map([]));\n    }\n}\n\nexport function Util_Cache$1$reflection(gen0) {\n    return class_type(\"Thoth.Json.Util.Cache`1\", [gen0], Util_Cache$1);\n}\n\nexport function Util_Cache$1_$ctor() {\n    return new Util_Cache$1();\n}\n\nexport function Util_Cache$1__GetOrAdd_43981464(__, key, factory) {\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(__.cache, key, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        const x_1 = factory();\n        addToDict(__.cache, key, x_1);\n        return x_1;\n    }\n}\n\nexport const Util_CachedEncoders = Util_Cache$1_$ctor();\n\nexport const Util_CachedDecoders = Util_Cache$1_$ctor();\n\nexport function Util_Casing_lowerFirst(str) {\n    return str.slice(void 0, 0 + 1).toLowerCase() + str.slice(1, str.length);\n}\n\nexport function Util_Casing_convert(caseStrategy, fieldName) {\n    switch (caseStrategy.tag) {\n        case 2: {\n            return replace(Util_Casing_lowerFirst(fieldName), \"[A-Z]\", \"_$0\").toLowerCase();\n        }\n        case 0: {\n            return fieldName;\n        }\n        default: {\n            return Util_Casing_lowerFirst(fieldName);\n        }\n    }\n}\n\n","import { toString as toString_1 } from \"../fable-library.3.1.11/Decimal.js\";\nimport { Lazy, mapCurriedArgs, uncurry, getEnumerator } from \"../fable-library.3.1.11/Util.js\";\nimport { empty, map as map_3, tryFind, add, toList } from \"../fable-library.3.1.11/Map.js\";\nimport { toString as toString_2 } from \"../fable-library.3.1.11/BigInt.js\";\nimport { toString as toString_3 } from \"../fable-library.3.1.11/Date.js\";\nimport { toString as toString_4 } from \"../fable-library.3.1.11/TimeSpan.js\";\nimport { defaultArg, value as value_34, map, defaultArgWith, some } from \"../fable-library.3.1.11/Option.js\";\nimport { toString as toString_5, FSharpRef } from \"../fable-library.3.1.11/Types.js\";\nimport { class_type, getGenerics, getGenericTypeDefinition, getTupleFields, getTupleElements, isTuple, isGenericType, getEnumUnderlyingType, isEnum, getElementType, isArray, getUnionCaseFields, getUnionFields, isUnion, getRecordElements, getRecordField, name, isRecord, fullName } from \"../fable-library.3.1.11/Reflection.js\";\nimport { fill, map as map_1 } from \"../fable-library.3.1.11/Array.js\";\nimport { Util_CachedEncoders, Util_Cache$1__GetOrAdd_43981464, CaseStrategy, Util_Casing_convert } from \"./Types.fs.js\";\nimport { mapIndexed, map as map_2, fold } from \"../fable-library.3.1.11/Seq.js\";\nimport { toFail, printf, toText } from \"../fable-library.3.1.11/String.js\";\n\nexport function guid(value) {\n    return value;\n}\n\nexport function decimal(value) {\n    return toString_1(value);\n}\n\nexport const nil = null;\n\nexport function object(values) {\n    const o = {};\n    const enumerator = getEnumerator(values);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const forLoopVar = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            o[forLoopVar[0]] = forLoopVar[1];\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return o;\n}\n\nexport function list(values) {\n    return Array.from(values);\n}\n\nexport function seq(values) {\n    return Array.from(values);\n}\n\nexport function dict(values) {\n    return object(toList(values));\n}\n\nexport function bigint(value) {\n    return toString_2(value);\n}\n\nexport function datetimeOffset(value) {\n    return toString_3(value, \"O\", {});\n}\n\nexport function timespan(value) {\n    return toString_4(value);\n}\n\nexport function sbyte(value) {\n    return String(value);\n}\n\nexport function byte(value) {\n    return String(value);\n}\n\nexport function int16(value) {\n    return String(value);\n}\n\nexport function uint16(value) {\n    return String(value);\n}\n\nexport function int64(value) {\n    return String(value);\n}\n\nexport function uint64(value) {\n    return String(value);\n}\n\nexport function unit() {\n    return null;\n}\n\nexport function tuple2(enc1, enc2, v1, v2) {\n    return [enc1(v1), enc2(v2)];\n}\n\nexport function tuple3(enc1, enc2, enc3, v1, v2, v3) {\n    return [enc1(v1), enc2(v2), enc3(v3)];\n}\n\nexport function tuple4(enc1, enc2, enc3, enc4, v1, v2, v3, v4) {\n    return [enc1(v1), enc2(v2), enc3(v3), enc4(v4)];\n}\n\nexport function tuple5(enc1, enc2, enc3, enc4, enc5, v1, v2, v3, v4, v5) {\n    return [enc1(v1), enc2(v2), enc3(v3), enc4(v4), enc5(v5)];\n}\n\nexport function tuple6(enc1, enc2, enc3, enc4, enc5, enc6, v1, v2, v3, v4, v5, v6) {\n    return [enc1(v1), enc2(v2), enc3(v3), enc4(v4), enc5(v5), enc6(v6)];\n}\n\nexport function tuple7(enc1, enc2, enc3, enc4, enc5, enc6, enc7, v1, v2, v3, v4, v5, v6, v7) {\n    return [enc1(v1), enc2(v2), enc3(v3), enc4(v4), enc5(v5), enc6(v6), enc7(v7)];\n}\n\nexport function tuple8(enc1, enc2, enc3, enc4, enc5, enc6, enc7, enc8, v1, v2, v3, v4, v5, v6, v7, v8) {\n    return [enc1(v1), enc2(v2), enc3(v3), enc4(v4), enc5(v5), enc6(v6), enc7(v7), enc8(v8)];\n}\n\nexport function Enum_byte(value) {\n    return byte(value);\n}\n\nexport function Enum_sbyte(value) {\n    return sbyte(value);\n}\n\nexport function Enum_int16(value) {\n    return int16(value);\n}\n\nexport function Enum_uint16(value) {\n    return uint16(value);\n}\n\nexport function Enum_int(value) {\n    return value;\n}\n\nexport function Enum_uint32(value) {\n    return value;\n}\n\nexport function datetime(value) {\n    return toString_3(value, \"O\", {});\n}\n\nexport function toString(space, value) {\n    return JSON.stringify(value, uncurry(2, null), some(space));\n}\n\nexport function option(encoder) {\n    return (arg) => defaultArgWith(map(encoder, arg), () => nil);\n}\n\nfunction autoEncodeRecordsAndUnions(extra, caseStrategy, skipNullField, t) {\n    const encoderRef = new FSharpRef(null);\n    const extra_1 = add(fullName(t), encoderRef, extra);\n    let encoder;\n    if (isRecord(t, true)) {\n        const setters = map_1((fi) => {\n            const targetKey = Util_Casing_convert(caseStrategy, name(fi));\n            const encode_1 = autoEncoder(extra_1, caseStrategy, skipNullField, fi[1]);\n            return (source) => ((target) => {\n                const value = getRecordField(source, fi);\n                if ((!skipNullField) ? true : (skipNullField ? (!(value == null)) : false)) {\n                    target[targetKey]=encode_1(value);\n                }\n                return target;\n            });\n        }, getRecordElements(t, true));\n        encoder = ((source_1) => fold(uncurry(2, mapCurriedArgs((target_1) => ((set$) => set$(source_1, target_1)), [0, [0, 2]])), {}, setters));\n    }\n    else if (isUnion(t, true)) {\n        encoder = ((value_1) => {\n            const patternInput = getUnionFields(value_1, t, true);\n            const info = patternInput[0];\n            const fields = patternInput[1];\n            const matchValue = fields.length | 0;\n            if (matchValue === 0) {\n                return name(info);\n            }\n            else {\n                const len = matchValue | 0;\n                const fieldTypes = getUnionCaseFields(info);\n                const target_2 = fill(new Array(len + 1), 0, len + 1, null);\n                target_2[0] = name(info);\n                for (let i = 1; i <= len; i++) {\n                    const encode_2 = autoEncoder(extra_1, caseStrategy, skipNullField, fieldTypes[i - 1][1]);\n                    target_2[i] = encode_2(fields[i - 1]);\n                }\n                return target_2;\n            }\n        });\n    }\n    else {\n        let message;\n        const arg10 = fullName(t);\n        message = toText(printf(\"Cannot generate auto encoder for %s. Please pass an extra encoder.\"))(arg10);\n        throw (new Error(message));\n    }\n    encoderRef.contents = encoder;\n    return encoder;\n}\n\nfunction autoEncoder(extra, caseStrategy, skipNullField, t) {\n    const fullname = fullName(t);\n    const matchValue = tryFind(fullname, extra);\n    if (matchValue == null) {\n        if (isArray(t)) {\n            const encoder = autoEncoder(extra, caseStrategy, skipNullField, getElementType(t));\n            return (value) => seq(map_2(encoder, value));\n        }\n        else if (isEnum(t)) {\n            const enumType = fullName(getEnumUnderlyingType(t));\n            if (enumType === \"System.SByte\") {\n                return (value_1) => sbyte(value_1);\n            }\n            else if (enumType === \"System.Byte\") {\n                return (value_2) => byte(value_2);\n            }\n            else if (enumType === \"System.Int16\") {\n                return (value_3) => int16(value_3);\n            }\n            else if (enumType === \"System.UInt16\") {\n                return (value_4) => uint16(value_4);\n            }\n            else if (enumType === \"System.Int32\") {\n                return (value_5) => value_5;\n            }\n            else if (enumType === \"System.UInt32\") {\n                return (value_7) => value_7;\n            }\n            else {\n                const arg10 = fullName(t);\n                const clo2 = toFail(printf(\"Cannot generate auto encoder for %s.\\nThoth.Json.Net only support the folluwing enum types:\\n- sbyte\\n- byte\\n- int16\\n- uint16\\n- int\\n- uint32\\nIf you can\\u0027t use one of these types, please pass an extra encoder.\\n                    \"))(arg10);\n                return (arg20) => clo2(arg20);\n            }\n        }\n        else if (isGenericType(t)) {\n            if (isTuple(t)) {\n                const encoders = map_1((t_2) => autoEncoder(extra, caseStrategy, skipNullField, t_2), getTupleElements(t));\n                return (value_9) => seq(mapIndexed((i, x) => encoders[i](x), getTupleFields(value_9)));\n            }\n            else {\n                const fullname_1 = fullName(getGenericTypeDefinition(t));\n                if (fullname_1 === \"Microsoft.FSharp.Core.FSharpOption`1[System.Object]\") {\n                    const encoder_2 = new Lazy(() => option(autoEncoder(extra, caseStrategy, skipNullField, getGenerics(t)[0])));\n                    return (value_10) => {\n                        if (value_10 == null) {\n                            return nil;\n                        }\n                        else {\n                            return encoder_2.Value(value_10);\n                        }\n                    };\n                }\n                else if ((fullname_1 === \"Microsoft.FSharp.Collections.FSharpList`1[System.Object]\") ? true : (fullname_1 === \"Microsoft.FSharp.Collections.FSharpSet`1[System.Object]\")) {\n                    const encoder_3 = autoEncoder(extra, caseStrategy, skipNullField, getGenerics(t)[0]);\n                    return (value_11) => seq(map_2(encoder_3, value_11));\n                }\n                else if (fullname_1 === \"Microsoft.FSharp.Collections.FSharpMap`2[System.Object,System.Object]\") {\n                    const keyType = getGenerics(t)[0];\n                    const valueEncoder = autoEncoder(extra, caseStrategy, skipNullField, getGenerics(t)[1]);\n                    if ((fullName(keyType) === \"System.String\") ? true : (fullName(keyType) === \"System.Guid\")) {\n                        return (value_12) => fold((target, _arg1) => {\n                            const activePatternResult15098 = _arg1;\n                            target[activePatternResult15098[0]]=valueEncoder(activePatternResult15098[1]);\n                            return target;\n                        }, {}, value_12);\n                    }\n                    else {\n                        let keyEncoder;\n                        const clo4 = autoEncoder(extra, caseStrategy, skipNullField, keyType);\n                        keyEncoder = ((arg40) => clo4(arg40));\n                        return (value_13) => seq(map_2((_arg2) => {\n                            const activePatternResult15102 = _arg2;\n                            return [keyEncoder(activePatternResult15102[0]), valueEncoder(activePatternResult15102[1])];\n                        }, value_13));\n                    }\n                }\n                else {\n                    return autoEncodeRecordsAndUnions(extra, caseStrategy, skipNullField, t);\n                }\n            }\n        }\n        else if (fullname === \"System.Boolean\") {\n            return (value_14) => value_14;\n        }\n        else if (fullname === \"Microsoft.FSharp.Core.Unit\") {\n            return unit;\n        }\n        else if (fullname === \"System.String\") {\n            return (value_16) => value_16;\n        }\n        else if (fullname === \"System.SByte\") {\n            return (value_18) => sbyte(value_18);\n        }\n        else if (fullname === \"System.Byte\") {\n            return (value_19) => byte(value_19);\n        }\n        else if (fullname === \"System.Int16\") {\n            return (value_20) => int16(value_20);\n        }\n        else if (fullname === \"System.UInt16\") {\n            return (value_21) => uint16(value_21);\n        }\n        else if (fullname === \"System.Int32\") {\n            return (value_22) => value_22;\n        }\n        else if (fullname === \"System.UInt32\") {\n            return (value_24) => value_24;\n        }\n        else if (fullname === \"System.Double\") {\n            return (value_26) => value_26;\n        }\n        else if (fullname === \"System.Single\") {\n            return (value_28) => value_28;\n        }\n        else if (fullname === \"System.DateTime\") {\n            return (value_30) => datetime(value_30);\n        }\n        else if (fullname === \"System.DateTimeOffset\") {\n            return (value_31) => datetimeOffset(value_31);\n        }\n        else if (fullname === \"System.TimeSpan\") {\n            return (value_32) => timespan(value_32);\n        }\n        else if (fullname === \"System.Guid\") {\n            return (value_33) => guid(value_33);\n        }\n        else if (fullname === \"System.Object\") {\n            return (x_1) => x_1;\n        }\n        else {\n            return autoEncodeRecordsAndUnions(extra, caseStrategy, skipNullField, t);\n        }\n    }\n    else {\n        const encoderRef = matchValue;\n        return (v) => encoderRef.contents(v);\n    }\n}\n\nfunction makeExtra(extra) {\n    if (extra != null) {\n        return map_3((_arg2, tupledArg) => (new FSharpRef(tupledArg[0])), extra.Coders);\n    }\n    else {\n        return empty();\n    }\n}\n\nexport class Auto {\n    constructor() {\n    }\n}\n\nexport function Auto$reflection() {\n    return class_type(\"Thoth.Json.Encode.Auto\", void 0, Auto);\n}\n\nexport function Auto_generateEncoderCached_Z127D9D79(caseStrategy, extra, skipNullField, resolver) {\n    let y_1, y;\n    const t = value_34(resolver).ResolveType();\n    const caseStrategy_1 = defaultArg(caseStrategy, new CaseStrategy(0));\n    const skipNullField_1 = defaultArg(skipNullField, true);\n    return Util_Cache$1__GetOrAdd_43981464(Util_CachedEncoders, (y_1 = (y = fullName(t), toString_5(caseStrategy_1) + y), defaultArg(map((e) => e.Hash, extra), \"\") + y_1), () => autoEncoder(makeExtra(extra), caseStrategy_1, skipNullField_1, t));\n}\n\nexport function Auto_generateEncoder_Z127D9D79(caseStrategy, extra, skipNullField, resolver) {\n    const caseStrategy_1 = defaultArg(caseStrategy, new CaseStrategy(0));\n    const skipNullField_1 = defaultArg(skipNullField, true);\n    const t = value_34(resolver).ResolveType();\n    return autoEncoder(makeExtra(extra), caseStrategy_1, skipNullField_1, t);\n}\n\nexport function Auto_toString_5A41365E(space, value, caseStrategy, extra, skipNullField, resolver) {\n    return toString(space, Auto_generateEncoder_Z127D9D79(caseStrategy, extra, skipNullField, resolver)(value));\n}\n\nexport function encode(space, value) {\n    return toString(space, value);\n}\n\n","import { trim } from \"./String.js\";\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nconst guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nconst guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nconst guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nexport function toString(str, format, _provider) {\n    if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) {\n        switch (format) {\n            case \"N\":\n                return str.replace(/-/g, '');\n            case \"D\":\n                return str;\n            case \"B\":\n                return \"{\" + str + \"}\";\n            case \"P\":\n                return \"(\" + str + \")\";\n            case \"X\":\n                return str.replace(guidHexCaptures, \"{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}\");\n            default:\n                throw new Error(\"Unrecognized Guid print format\");\n        }\n    }\n    else {\n        return str;\n    }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nexport function parse(str) {\n    function hyphenateGuid(str) {\n        return str.replace(guidRegexNoHyphen, \"$1-$2-$3-$4-$5\");\n    }\n    const wsTrimAndLowered = str.trim().toLowerCase();\n    if (guidRegex.test(wsTrimAndLowered)) {\n        return trim(wsTrimAndLowered, \"{\", \"}\", \"(\", \")\");\n    }\n    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered);\n    }\n    else if (guidRegexHex.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, ''));\n    }\n    else {\n        throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n    }\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = parse(str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: DateOffset instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * However, this means that in order to construct an UTC date\n * from a DateOffset with offset of +5 hours, you first need\n * to subtract those 5 hours, than add the \"local\" offset.\n * As said, all kinds of messed up.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { create as createDate, dateOffsetToString, daysInMonth, offsetRegex, parseRaw } from \"./Date.js\";\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, padWithZeros } from \"./Util.js\";\nexport default function DateTimeOffset(value, offset) {\n    const d = new Date(value);\n    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;\n    return d;\n}\nexport function fromDate(date, offset) {\n    const isUtc = date.kind === 1 /* UTC */;\n    const offset2 = isUtc ? 0 : date.getTimezoneOffset() * -60000;\n    if (offset != null && offset !== offset2) {\n        throw new Error(isUtc\n            ? \"The UTC Offset for Utc DateTime instances must be 0.\"\n            : \"The UTC Offset of the local dateTime parameter does not match the offset argument.\");\n    }\n    return DateTimeOffset(date.getTime(), offset2);\n}\nexport function fromTicks(ticks, offset) {\n    ticks = fromValue(ticks);\n    const epoc = ticksToUnixEpochMilliseconds(ticks) - offset;\n    return DateTimeOffset(epoc, offset);\n}\nexport function getUtcTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), 0);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTimeOffset(-62135596800000, 0);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTimeOffset(253402300799999, 0);\n}\nexport function parse(str) {\n    const date = parseRaw(str);\n    const offsetMatch = offsetRegex.exec(str);\n    const offset = offsetMatch == null\n        ? date.getTimezoneOffset() * -60000\n        : (offsetMatch[0] === \"Z\"\n            ? 0\n            : parseInt(offsetMatch[1], 10) * 3600000\n                + parseInt(offsetMatch[2], 10) * 60000);\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h, m, s, ms, offset) {\n    if (offset == null) {\n        offset = ms;\n        ms = 0;\n    }\n    if (offset !== 0) {\n        if (offset % 60000 !== 0) {\n            throw new Error(\"Offset must be specified in whole minutes\");\n        }\n        if (~~(offset / 3600000) > 14) {\n            throw new Error(\"Offset must be within plus or minus 14 hour\");\n        }\n    }\n    let date;\n    if (offset === 0) {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n        if (year <= 99) {\n            date.setFullYear(year, month - 1, day);\n        }\n    }\n    else {\n        const str = padWithZeros(year, 4) + \"-\" +\n            padWithZeros(month, 2) + \"-\" +\n            padWithZeros(day, 2) + \"T\" +\n            padWithZeros(h, 2) + \":\" +\n            padWithZeros(m, 2) + \":\" +\n            padWithZeros(s, 2) + \".\" +\n            padWithZeros(ms, 3) +\n            dateOffsetToString(offset);\n        date = new Date(str);\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date\");\n    }\n    return DateTimeOffset(dateValue, offset);\n}\nexport function now() {\n    const date = new Date();\n    const offset = date.getTimezoneOffset() * -60000;\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function utcNow() {\n    const date = now();\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toUniversalTime(date) {\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toLocalTime(date) {\n    return DateTimeOffset(date.getTime(), date.getTimezoneOffset() * -60000);\n}\nexport function timeOfDay(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    return d2.getUTCHours() * 3600000\n        + d2.getUTCMinutes() * 60000\n        + d2.getUTCSeconds() * 1000\n        + d2.getUTCMilliseconds();\n}\nexport function date(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    return createDate(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);\n}\nexport function day(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDate();\n}\nexport function hour(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCHours();\n}\nexport function millisecond(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMilliseconds();\n}\nexport function minute(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMinutes();\n}\nexport function month(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMonth() + 1;\n}\nexport function second(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCSeconds();\n}\nexport function year(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDay();\n}\nexport function dayOfYear(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    const _year = d2.getUTCFullYear();\n    const _month = d2.getUTCMonth() + 1;\n    let _day = d2.getUTCDate();\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    var _a;\n    return DateTimeOffset(d.getTime() + ts, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addDays(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 86400000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addHours(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 3600000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMinutes(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 60000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addSeconds(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 1000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMilliseconds(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addYears(d, v) {\n    var _a;\n    const newMonth = d.getUTCMonth() + 1;\n    const newYear = d.getUTCFullYear() + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d.getUTCDate());\n    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMonths(d, v) {\n    var _a, _b;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    let newMonth = d2.getUTCMonth() + 1 + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = d2.getUTCFullYear() + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d2.getUTCDate());\n    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), ((_b = d.offset) !== null && _b !== void 0 ? _b : 0));\n}\nexport function subtract(d, that) {\n    var _a;\n    return typeof that === \"number\"\n        ? DateTimeOffset(d.getTime() - that, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0))\n        : d.getTime() - that.getTime();\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport function equalsExact(d1, d2) {\n    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;\n}\nexport function compare(d1, d2) {\n    return compareDates(d1, d2);\n}\nexport const compareTo = compare;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { toString, Record } from \"./Types.js\";\nimport { FSharpList, fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1 } from \"./List.js\";\nimport { fold as fold_1, fill } from \"./Array.js\";\nimport { structuralHash, toIterator, getEnumerator, isArrayLike } from \"./Util.js\";\nimport { join } from \"./String.js\";\nimport { fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\n\nexport class SetTreeLeaf$1 {\n    constructor(k) {\n        this.k = k;\n    }\n}\n\nexport function SetTreeLeaf$1$reflection(gen0) {\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\n}\n\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\n    return new SetTreeLeaf$1(k);\n}\n\nexport function SetTreeLeaf$1__get_Key(_) {\n    return _.k;\n}\n\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\n    constructor(v, left, right, h) {\n        super(v);\n        this.left = left;\n        this.right = right;\n        this.h = (h | 0);\n    }\n}\n\nexport function SetTreeNode$1$reflection(gen0) {\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));\n}\n\nexport function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {\n    return new SetTreeNode$1(v, left, right, h);\n}\n\nexport function SetTreeNode$1__get_Left(_) {\n    return _.left;\n}\n\nexport function SetTreeNode$1__get_Right(_) {\n    return _.right;\n}\n\nexport function SetTreeNode$1__get_Height(_) {\n    return _.h;\n}\n\nexport function SetTreeModule_empty() {\n    return void 0;\n}\n\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\n    SetTreeModule_countAux:\n    while (true) {\n        const t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);\n                continue SetTreeModule_countAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_count(s) {\n    return SetTreeModule_countAux(s, 0);\n}\n\nexport function SetTreeModule_mk(l, k, r) {\n    let hl;\n    const t = l;\n    if (t != null) {\n        const t2 = t;\n        hl = ((t2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const t_1 = r;\n    if (t_1 != null) {\n        const t2_1 = t_1;\n        hr = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m = ((hl < hr) ? hr : hl) | 0;\n    if (m === 0) {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n    else {\n        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);\n    }\n}\n\nexport function SetTreeModule_rebalance(t1, v, t2) {\n    let t_2, t2_3, t_3, t2_4;\n    let t1h;\n    const t = t1;\n    if (t != null) {\n        const t2_1 = t;\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const t_1 = t2;\n    if (t_1 != null) {\n        const t2_2 = t_1;\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_2) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_1(t2);\n        if (matchValue instanceof SetTreeNode$1) {\n            if ((t_2 = SetTreeNode$1__get_Left(matchValue), (t_2 != null) ? (t2_3 = t_2, (t2_3 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_3) : 1) : 0) > (t1h + 1)) {\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(matchValue));\n                if (matchValue_1 instanceof SetTreeNode$1) {\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));\n                }\n                else {\n                    throw (new Error(\"internal error: Set.rebalance\"));\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Set.rebalance\"));\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_1(t1);\n        if (matchValue_2 instanceof SetTreeNode$1) {\n            if ((t_3 = SetTreeNode$1__get_Right(matchValue_2), (t_3 != null) ? (t2_4 = t_3, (t2_4 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_4) : 1) : 0) > (t2h + 1)) {\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(matchValue_2));\n                if (matchValue_3 instanceof SetTreeNode$1) {\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));\n                }\n                else {\n                    throw (new Error(\"internal error: Set.rebalance\"));\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));\n            }\n        }\n        else {\n            throw (new Error(\"internal error: Set.rebalance\"));\n        }\n    }\n    else {\n        return SetTreeModule_mk(t1, v, t2);\n    }\n}\n\nexport function SetTreeModule_add(comparer, k, t) {\n    if (t != null) {\n        const t2 = t;\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\n            }\n            else if (c === 0) {\n                return t;\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (c_1 < 0) {\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);\n            }\n            else if (c_1 === 0) {\n                return t;\n            }\n            else {\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);\n            }\n        }\n    }\n    else {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n}\n\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\n    if (t1 != null) {\n        const t1$0027 = t1;\n        if (t2 != null) {\n            const t2$0027 = t2;\n            if (t1$0027 instanceof SetTreeNode$1) {\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    if ((SetTreeNode$1__get_Height(t1$0027) + 2) < SetTreeNode$1__get_Height(t2$0027)) {\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\n                    }\n                    else if ((SetTreeNode$1__get_Height(t2$0027) + 2) < SetTreeNode$1__get_Height(t1$0027)) {\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));\n                    }\n                    else {\n                        return SetTreeModule_mk(t1, k, t2);\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\n            }\n        }\n        else {\n            return SetTreeModule_add(comparer, k, t1);\n        }\n    }\n    else {\n        return SetTreeModule_add(comparer, k, t2);\n    }\n}\n\nexport function SetTreeModule_split(comparer, pivot, t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (c < 0) {\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\n            }\n            else if (c === 0) {\n                return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];\n            }\n            else {\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\n            if (c_1 < 0) {\n                return [t, false, SetTreeModule_empty()];\n            }\n            else if (c_1 === 0) {\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\n            }\n            else {\n                return [SetTreeModule_empty(), false, t];\n            }\n        }\n    }\n    else {\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\n    }\n}\n\nexport function SetTreeModule_spliceOutSuccessor(t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            if (SetTreeNode$1__get_Left(t2) == null) {\n                return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];\n            }\n            else {\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\n            }\n        }\n        else {\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\n        }\n    }\n    else {\n        throw (new Error(\"internal error: Set.spliceOutSuccessor\"));\n    }\n}\n\nexport function SetTreeModule_remove(comparer, k, t) {\n    if (t != null) {\n        const t2 = t;\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\n            }\n            else if (c === 0) {\n                if (SetTreeNode$1__get_Left(t2) == null) {\n                    return SetTreeNode$1__get_Right(t2);\n                }\n                else if (SetTreeNode$1__get_Right(t2) == null) {\n                    return SetTreeNode$1__get_Left(t2);\n                }\n                else {\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);\n                }\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));\n            }\n        }\n        else if (c === 0) {\n            return SetTreeModule_empty();\n        }\n        else {\n            return t;\n        }\n    }\n    else {\n        return t;\n    }\n}\n\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\n    SetTreeModule_mem:\n    while (true) {\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (t2 instanceof SetTreeNode$1) {\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Left(t2);\n                    continue SetTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Right(t2);\n                    continue SetTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_iter(f_mut, t_mut) {\n    SetTreeModule_iter:\n    while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));\n                f(SetTreeLeaf$1__get_Key(t2));\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Right(t2);\n                continue SetTreeModule_iter;\n            }\n            else {\n                f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\n    SetTreeModule_foldBackOpt:\n    while (true) {\n        const f = f_mut, t = t_mut, x = x_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));\n                continue SetTreeModule_foldBackOpt;\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_foldBack(f, m, x) {\n    return SetTreeModule_foldBackOpt(f, m, x);\n}\n\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\n    SetTreeModule_foldOpt:\n    while (true) {\n        const f = f_mut, x = x_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                f_mut = f;\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));\n                t_mut = SetTreeNode$1__get_Right(t2);\n                continue SetTreeModule_foldOpt;\n            }\n            else {\n                return f(x, SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_fold(f, x, m) {\n    return SetTreeModule_foldOpt(f, x, m);\n}\n\nexport function SetTreeModule_forall(f_mut, t_mut) {\n    SetTreeModule_forall:\n    while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2)) : false) {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(t2);\n                    continue SetTreeModule_forall;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_exists(f_mut, t_mut) {\n    SetTreeModule_exists:\n    while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(t2);\n                    continue SetTreeModule_exists;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_subset(comparer, a, b) {\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\n}\n\nexport function SetTreeModule_properSubset(comparer, a, b) {\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\n        return SetTreeModule_exists((x_1) => (!SetTreeModule_mem(comparer, x_1, a)), b);\n    }\n    else {\n        return false;\n    }\n}\n\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\n    SetTreeModule_filterAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);\n                continue SetTreeModule_filterAux;\n            }\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_filter(comparer, f, s) {\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\n}\n\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\n    SetTreeModule_diffAux:\n    while (true) {\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\n        if (acc == null) {\n            return acc;\n        }\n        else if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                comparer_mut = comparer;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));\n                continue SetTreeModule_diffAux;\n            }\n            else {\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_diff(comparer, a, b) {\n    return SetTreeModule_diffAux(comparer, b, a);\n}\n\nexport function SetTreeModule_union(comparer, t1, t2) {\n    if (t1 != null) {\n        const t1$0027 = t1;\n        if (t2 != null) {\n            const t2$0027 = t2;\n            if (t1$0027 instanceof SetTreeNode$1) {\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));\n                    }\n                    else {\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\n            }\n        }\n        else {\n            return t1;\n        }\n    }\n    else {\n        return t2;\n    }\n}\n\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\n    SetTreeModule_intersectionAux:\n    while (true) {\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;\n                comparer_mut = comparer;\n                b_mut = b;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_mut = acc_2;\n                continue SetTreeModule_intersectionAux;\n            }\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_intersection(comparer, a, b) {\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\n}\n\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\n    if (f(k)) {\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\n    }\n    else {\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\n    }\n}\n\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {\n    SetTreeModule_partitionAux:\n    while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\n        const acc = [acc_0, acc_1];\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);\n                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(t2);\n                acc_0_mut = acc_3[0];\n                acc_1_mut = acc_3[1];\n                continue SetTreeModule_partitionAux;\n            }\n            else {\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_partition(comparer, f, s) {\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\n}\n\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\n    SetTreeModule_minimumElementAux:\n    while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                t_mut = SetTreeNode$1__get_Left(t2);\n                n_mut = SetTreeLeaf$1__get_Key(t2);\n                continue SetTreeModule_minimumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_minimumElementOpt(t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\n    SetTreeModule_maximumElementAux:\n    while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = t;\n            if (t2 instanceof SetTreeNode$1) {\n                t_mut = SetTreeNode$1__get_Right(t2);\n                n_mut = SetTreeLeaf$1__get_Key(t2);\n                continue SetTreeModule_maximumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_maximumElementOpt(t) {\n    if (t != null) {\n        const t2 = t;\n        if (t2 instanceof SetTreeNode$1) {\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function SetTreeModule_minimumElement(s) {\n    const matchValue = SetTreeModule_minimumElementOpt(s);\n    if (matchValue == null) {\n        throw (new Error(\"Set contains no elements\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport function SetTreeModule_maximumElement(s) {\n    const matchValue = SetTreeModule_maximumElementOpt(s);\n    if (matchValue == null) {\n        throw (new Error(\"Set contains no elements\"));\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\n\nexport class SetTreeModule_SetIterator$1 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\n\nexport function SetTreeModule_SetIterator$1$reflection(gen0) {\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1$reflection(gen0)))], [\"started\", bool_type]]);\n}\n\nexport function SetTreeModule_collapseLHS(stack_mut) {\n    SetTreeModule_collapseLHS:\n    while (true) {\n        const stack = stack_mut;\n        if (!isEmpty_1(stack)) {\n            const x = head(stack);\n            const rest = tail(stack);\n            if (x != null) {\n                const x2 = x;\n                if (x2 instanceof SetTreeNode$1) {\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), SetTreeNode$1__get_Right(x2)], rest);\n                    continue SetTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue SetTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return empty_1();\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_mkIterator(s) {\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\n}\n\nexport function SetTreeModule_notStarted() {\n    throw (new Error(\"Enumeration not started\"));\n}\n\nexport function SetTreeModule_alreadyFinished() {\n    throw (new Error(\"Enumeration already started\"));\n}\n\nexport function SetTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (isEmpty_1(matchValue)) {\n            return SetTreeModule_alreadyFinished();\n        }\n        else if (head(matchValue) != null) {\n            const t = head(matchValue);\n            return SetTreeLeaf$1__get_Key(t);\n        }\n        else {\n            throw (new Error(\"Please report error: Set iterator, unexpected stack for current\"));\n        }\n    }\n    else {\n        return SetTreeModule_notStarted();\n    }\n}\n\nexport function SetTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const t = head(matchValue);\n                if (t instanceof SetTreeNode$1) {\n                    throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\n                }\n                else {\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\n                    return !isEmpty_1(i.stack);\n                }\n            }\n            else {\n                throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !isEmpty_1(i.stack);\n    }\n}\n\nexport function SetTreeModule_mkIEnumerator(s) {\n    let i = SetTreeModule_mkIterator(s);\n    return {\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n            return SetTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.get_Current\"]() {\n            return SetTreeModule_current(i);\n        },\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\n            return SetTreeModule_moveNext(i);\n        },\n        [\"System.Collections.IEnumerator.Reset\"]() {\n            i = SetTreeModule_mkIterator(s);\n        },\n        Dispose() {\n        },\n    };\n}\n\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\n    SetTreeModule_compareStacks:\n    while (true) {\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\n        const matchValue = [l1, l2];\n        if (!isEmpty_1(matchValue[0])) {\n            if (!isEmpty_1(matchValue[1])) {\n                if (head(matchValue[1]) != null) {\n                    if (head(matchValue[0]) != null) {\n                        const x1_3 = head(matchValue[0]);\n                        const x2_3 = head(matchValue[1]);\n                        if (x1_3 instanceof SetTreeNode$1) {\n                            if (SetTreeNode$1__get_Left(x1_3) == null) {\n                                if (x2_3 instanceof SetTreeNode$1) {\n                                    if (SetTreeNode$1__get_Left(x2_3) == null) {\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                        if (c !== 0) {\n                                            return c | 0;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    else {\n                                        const matchValue_3 = [l1, l2];\n                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;\n                                        if (!isEmpty_1(matchValue_3[0])) {\n                                            if (head(matchValue_3[0]) != null) {\n                                                pattern_matching_result = 0;\n                                                t1_6 = tail(matchValue_3[0]);\n                                                x1_4 = head(matchValue_3[0]);\n                                            }\n                                            else if (!isEmpty_1(matchValue_3[1])) {\n                                                if (head(matchValue_3[1]) != null) {\n                                                    pattern_matching_result = 1;\n                                                    t2_6 = tail(matchValue_3[1]);\n                                                    x2_4 = head(matchValue_3[1]);\n                                                }\n                                                else {\n                                                    pattern_matching_result = 2;\n                                                }\n                                            }\n                                            else {\n                                                pattern_matching_result = 2;\n                                            }\n                                        }\n                                        else if (!isEmpty_1(matchValue_3[1])) {\n                                            if (head(matchValue_3[1]) != null) {\n                                                pattern_matching_result = 1;\n                                                t2_6 = tail(matchValue_3[1]);\n                                                x2_4 = head(matchValue_3[1]);\n                                            }\n                                            else {\n                                                pattern_matching_result = 2;\n                                            }\n                                        }\n                                        else {\n                                            pattern_matching_result = 2;\n                                        }\n                                        switch (pattern_matching_result) {\n                                            case 0: {\n                                                if (x1_4 instanceof SetTreeNode$1) {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0)], t1_6);\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            }\n                                            case 1: {\n                                                if (x2_4 instanceof SetTreeNode$1) {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0)], t2_6);\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            }\n                                            case 2: {\n                                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                    if (c_1 !== 0) {\n                                        return c_1 | 0;\n                                    }\n                                    else {\n                                        comparer_mut = comparer;\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\n                                        l2_mut = cons(SetTreeModule_empty(), tail(matchValue[1]));\n                                        continue SetTreeModule_compareStacks;\n                                    }\n                                }\n                            }\n                            else {\n                                const matchValue_4 = [l1, l2];\n                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;\n                                if (!isEmpty_1(matchValue_4[0])) {\n                                    if (head(matchValue_4[0]) != null) {\n                                        pattern_matching_result_1 = 0;\n                                        t1_7 = tail(matchValue_4[0]);\n                                        x1_5 = head(matchValue_4[0]);\n                                    }\n                                    else if (!isEmpty_1(matchValue_4[1])) {\n                                        if (head(matchValue_4[1]) != null) {\n                                            pattern_matching_result_1 = 1;\n                                            t2_7 = tail(matchValue_4[1]);\n                                            x2_5 = head(matchValue_4[1]);\n                                        }\n                                        else {\n                                            pattern_matching_result_1 = 2;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_1 = 2;\n                                    }\n                                }\n                                else if (!isEmpty_1(matchValue_4[1])) {\n                                    if (head(matchValue_4[1]) != null) {\n                                        pattern_matching_result_1 = 1;\n                                        t2_7 = tail(matchValue_4[1]);\n                                        x2_5 = head(matchValue_4[1]);\n                                    }\n                                    else {\n                                        pattern_matching_result_1 = 2;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_1 = 2;\n                                }\n                                switch (pattern_matching_result_1) {\n                                    case 0: {\n                                        if (x1_5 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0)], t1_7);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 1: {\n                                        if (x2_5 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0)], t2_7);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 2: {\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                                    }\n                                }\n                            }\n                        }\n                        else if (x2_3 instanceof SetTreeNode$1) {\n                            if (SetTreeNode$1__get_Left(x2_3) == null) {\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                if (c_2 !== 0) {\n                                    return c_2 | 0;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = cons(SetTreeModule_empty(), tail(matchValue[0]));\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            else {\n                                const matchValue_5 = [l1, l2];\n                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;\n                                if (!isEmpty_1(matchValue_5[0])) {\n                                    if (head(matchValue_5[0]) != null) {\n                                        pattern_matching_result_2 = 0;\n                                        t1_8 = tail(matchValue_5[0]);\n                                        x1_6 = head(matchValue_5[0]);\n                                    }\n                                    else if (!isEmpty_1(matchValue_5[1])) {\n                                        if (head(matchValue_5[1]) != null) {\n                                            pattern_matching_result_2 = 1;\n                                            t2_8 = tail(matchValue_5[1]);\n                                            x2_6 = head(matchValue_5[1]);\n                                        }\n                                        else {\n                                            pattern_matching_result_2 = 2;\n                                        }\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 2;\n                                    }\n                                }\n                                else if (!isEmpty_1(matchValue_5[1])) {\n                                    if (head(matchValue_5[1]) != null) {\n                                        pattern_matching_result_2 = 1;\n                                        t2_8 = tail(matchValue_5[1]);\n                                        x2_6 = head(matchValue_5[1]);\n                                    }\n                                    else {\n                                        pattern_matching_result_2 = 2;\n                                    }\n                                }\n                                else {\n                                    pattern_matching_result_2 = 2;\n                                }\n                                switch (pattern_matching_result_2) {\n                                    case 0: {\n                                        if (x1_6 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0)], t1_8);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 1: {\n                                        if (x2_6 instanceof SetTreeNode$1) {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0)], t2_8);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    case 2: {\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                            if (c_3 !== 0) {\n                                return c_3 | 0;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = tail(matchValue[0]);\n                                l2_mut = tail(matchValue[1]);\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                    }\n                    else {\n                        const x2 = head(matchValue[1]);\n                        const matchValue_1 = [l1, l2];\n                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;\n                        if (!isEmpty_1(matchValue_1[0])) {\n                            if (head(matchValue_1[0]) != null) {\n                                pattern_matching_result_3 = 0;\n                                t1_2 = tail(matchValue_1[0]);\n                                x1 = head(matchValue_1[0]);\n                            }\n                            else if (!isEmpty_1(matchValue_1[1])) {\n                                if (head(matchValue_1[1]) != null) {\n                                    pattern_matching_result_3 = 1;\n                                    t2_2 = tail(matchValue_1[1]);\n                                    x2_1 = head(matchValue_1[1]);\n                                }\n                                else {\n                                    pattern_matching_result_3 = 2;\n                                }\n                            }\n                            else {\n                                pattern_matching_result_3 = 2;\n                            }\n                        }\n                        else if (!isEmpty_1(matchValue_1[1])) {\n                            if (head(matchValue_1[1]) != null) {\n                                pattern_matching_result_3 = 1;\n                                t2_2 = tail(matchValue_1[1]);\n                                x2_1 = head(matchValue_1[1]);\n                            }\n                            else {\n                                pattern_matching_result_3 = 2;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_3 = 2;\n                        }\n                        switch (pattern_matching_result_3) {\n                            case 0: {\n                                if (x1 instanceof SetTreeNode$1) {\n                                    comparer_mut = comparer;\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0)], t1_2);\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            case 1: {\n                                if (x2_1 instanceof SetTreeNode$1) {\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0)], t2_2);\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            case 2: {\n                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                            }\n                        }\n                    }\n                }\n                else if (head(matchValue[0]) != null) {\n                    const x1_1 = head(matchValue[0]);\n                    const matchValue_2 = [l1, l2];\n                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;\n                    if (!isEmpty_1(matchValue_2[0])) {\n                        if (head(matchValue_2[0]) != null) {\n                            pattern_matching_result_4 = 0;\n                            t1_4 = tail(matchValue_2[0]);\n                            x1_2 = head(matchValue_2[0]);\n                        }\n                        else if (!isEmpty_1(matchValue_2[1])) {\n                            if (head(matchValue_2[1]) != null) {\n                                pattern_matching_result_4 = 1;\n                                t2_4 = tail(matchValue_2[1]);\n                                x2_2 = head(matchValue_2[1]);\n                            }\n                            else {\n                                pattern_matching_result_4 = 2;\n                            }\n                        }\n                        else {\n                            pattern_matching_result_4 = 2;\n                        }\n                    }\n                    else if (!isEmpty_1(matchValue_2[1])) {\n                        if (head(matchValue_2[1]) != null) {\n                            pattern_matching_result_4 = 1;\n                            t2_4 = tail(matchValue_2[1]);\n                            x2_2 = head(matchValue_2[1]);\n                        }\n                        else {\n                            pattern_matching_result_4 = 2;\n                        }\n                    }\n                    else {\n                        pattern_matching_result_4 = 2;\n                    }\n                    switch (pattern_matching_result_4) {\n                        case 0: {\n                            if (x1_2 instanceof SetTreeNode$1) {\n                                comparer_mut = comparer;\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0)], t1_4);\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                        case 1: {\n                            if (x2_2 instanceof SetTreeNode$1) {\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0)], t2_4);\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                        case 2: {\n                            throw (new Error(\"unexpected state in SetTree.compareStacks\"));\n                        }\n                    }\n                }\n                else {\n                    comparer_mut = comparer;\n                    l1_mut = tail(matchValue[0]);\n                    l2_mut = tail(matchValue[1]);\n                    continue SetTreeModule_compareStacks;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        else if (isEmpty_1(matchValue[1])) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_compare(comparer, t1, t2) {\n    if (t1 == null) {\n        if (t2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (t2 == null) {\n        return 1;\n    }\n    else {\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\n    }\n}\n\nexport function SetTreeModule_choose(s) {\n    return SetTreeModule_minimumElement(s);\n}\n\nexport function SetTreeModule_toList(t) {\n    const loop = (t$0027_mut, acc_mut) => {\n        loop:\n        while (true) {\n            const t$0027 = t$0027_mut, acc = acc_mut;\n            if (t$0027 != null) {\n                const t2 = t$0027;\n                if (t2 instanceof SetTreeNode$1) {\n                    t$0027_mut = SetTreeNode$1__get_Left(t2);\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));\n                    continue loop;\n                }\n                else {\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(t, empty_1());\n}\n\nexport function SetTreeModule_copyToArray(s, arr, i) {\n    let j = i | 0;\n    SetTreeModule_iter((x) => {\n        arr[j] = x;\n        j = ((j + 1) | 0);\n    }, s);\n}\n\nexport function SetTreeModule_toArray(s) {\n    const n = SetTreeModule_count(s) | 0;\n    const res = fill(new Array(n), 0, n, null);\n    SetTreeModule_copyToArray(s, res, 0);\n    return res;\n}\n\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    SetTreeModule_mkFromEnumerator:\n    while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            comparer_mut = comparer;\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\n            e_mut = e;\n            continue SetTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function SetTreeModule_ofArray(comparer, l) {\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\n\nexport function SetTreeModule_ofList(comparer, l) {\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\n\nexport function SetTreeModule_ofSeq(comparer, c) {\n    if (isArrayLike(c)) {\n        return SetTreeModule_ofArray(comparer, c);\n    }\n    else if (c instanceof FSharpList) {\n        return SetTreeModule_ofList(comparer, c);\n    }\n    else {\n        const ie = getEnumerator(c);\n        try {\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\n        }\n        finally {\n            ie.Dispose();\n        }\n    }\n}\n\nexport class FSharpSet {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpSet__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        const this$ = this;\n        return (that instanceof FSharpSet) ? (SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0) : false;\n    }\n    toString() {\n        const this$ = this;\n        return (\"set [\" + join(\"; \", map_1((x) => {\n            let copyOfStruct = x;\n            return toString(copyOfStruct);\n        }, this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpSet\";\n    }\n    CompareTo(that) {\n        const s = this;\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\n        throw (new Error(\"ReadOnlyCollection\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        throw (new Error(\"ReadOnlyCollection\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\n        throw (new Error(\"ReadOnlyCollection\"));\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\n        const s = this;\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\n        const s = this;\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return true;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    GetEnumerator() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    get size() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    add(k) {\n        const s = this;\n        throw (new Error(\"Set cannot be mutated\"));\n        return s;\n    }\n    clear() {\n        throw (new Error(\"Set cannot be mutated\"));\n    }\n    delete(k) {\n        throw (new Error(\"Set cannot be mutated\"));\n        return false;\n    }\n    has(k) {\n        const s = this;\n        return FSharpSet__Contains(s, k);\n    }\n    keys() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    values() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    entries() {\n        const s = this;\n        return map_1((v) => [v, v], s);\n    }\n    forEach(f, thisArg) {\n        const s = this;\n        iterate_1((x) => {\n            f(x, x, s);\n        }, s);\n    }\n}\n\nexport function FSharpSet$reflection(gen0) {\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\n}\n\nexport function FSharpSet_$ctor(comparer, tree) {\n    return new FSharpSet(comparer, tree);\n}\n\nexport function FSharpSet__get_Comparer(set$) {\n    return set$.comparer;\n}\n\nexport function FSharpSet__get_Tree(set$) {\n    return set$.tree;\n}\n\nexport function FSharpSet_Empty(comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\n}\n\nexport function FSharpSet__Add(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\n\nexport function FSharpSet__Remove(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\n\nexport function FSharpSet__get_Count(s) {\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__Contains(s, value) {\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__Iterate(s, x) {\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__Fold(s, f, z) {\n    const f_1 = f;\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__get_IsEmpty(s) {\n    return FSharpSet__get_Tree(s) == null;\n}\n\nexport function FSharpSet__Partition(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return [s, s];\n    }\n    else {\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\n    }\n}\n\nexport function FSharpSet__Filter(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return s;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\n    }\n}\n\nexport function FSharpSet__Map(s, f, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\n}\n\nexport function FSharpSet__Exists(s, f) {\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet__ForAll(s, f) {\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\n}\n\nexport function FSharpSet_op_Subtraction(set1, set2) {\n    if (FSharpSet__get_Tree(set1) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\n\nexport function FSharpSet_op_Addition(set1, set2) {\n    if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set1) == null) {\n        return set2;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\n\nexport function FSharpSet_Intersection(a, b) {\n    if (FSharpSet__get_Tree(b) == null) {\n        return b;\n    }\n    else if (FSharpSet__get_Tree(a) == null) {\n        return a;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\n    }\n}\n\nexport function FSharpSet_IntersectionMany(sets) {\n    return reduce((s1, s2) => FSharpSet_Intersection(s1, s2), sets);\n}\n\nexport function FSharpSet_Equality(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\n}\n\nexport function FSharpSet_Compare(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\n}\n\nexport function FSharpSet__get_Choose(x) {\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__get_MinimumElement(x) {\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__get_MaximumElement(x) {\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\n\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\n\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__ToList(x) {\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__ToArray(x) {\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\n}\n\nexport function FSharpSet__ComputeHashCode(this$) {\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = ((((res << 1) + structuralHash(x_1)) + 631) | 0);\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n    return Math.abs(res) | 0;\n}\n\nexport function isEmpty(set$) {\n    return FSharpSet__get_IsEmpty(set$);\n}\n\nexport function contains(element, set$) {\n    return FSharpSet__Contains(set$, element);\n}\n\nexport function add(value, set$) {\n    return FSharpSet__Add(set$, value);\n}\n\nexport function singleton(value, comparer) {\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\n}\n\nexport function remove(value, set$) {\n    return FSharpSet__Remove(set$, value);\n}\n\nexport function union(set1, set2) {\n    return FSharpSet_op_Addition(set1, set2);\n}\n\nexport function unionMany(sets, comparer) {\n    return fold_3((s1, s2) => FSharpSet_op_Addition(s1, s2), FSharpSet_Empty(comparer), sets);\n}\n\nexport function intersect(set1, set2) {\n    return FSharpSet_Intersection(set1, set2);\n}\n\nexport function intersectMany(sets) {\n    return FSharpSet_IntersectionMany(sets);\n}\n\nexport function iterate(action, set$) {\n    FSharpSet__Iterate(set$, action);\n}\n\nexport function empty(comparer) {\n    return FSharpSet_Empty(comparer);\n}\n\nexport function forAll(predicate, set$) {\n    return FSharpSet__ForAll(set$, predicate);\n}\n\nexport function exists(predicate, set$) {\n    return FSharpSet__Exists(set$, predicate);\n}\n\nexport function filter(predicate, set$) {\n    return FSharpSet__Filter(set$, predicate);\n}\n\nexport function partition(predicate, set$) {\n    return FSharpSet__Partition(set$, predicate);\n}\n\nexport function fold(folder, state, set$) {\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\n}\n\nexport function foldBack(folder, set$, state) {\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\n}\n\nexport function map(mapping, set$, comparer) {\n    return FSharpSet__Map(set$, mapping, comparer);\n}\n\nexport function count(set$) {\n    return FSharpSet__get_Count(set$);\n}\n\nexport function ofList(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\n\nexport function ofArray(array, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\n}\n\nexport function toList(set$) {\n    return FSharpSet__ToList(set$);\n}\n\nexport function toArray(set$) {\n    return FSharpSet__ToArray(set$);\n}\n\nexport function toSeq(set$) {\n    return map_1((x) => x, set$);\n}\n\nexport function ofSeq(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\n\nexport function difference(set1, set2) {\n    return FSharpSet_op_Subtraction(set1, set2);\n}\n\nexport function isSubset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\n\nexport function isSuperset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\n\nexport function isProperSubset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\n\nexport function isProperSuperset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\n\nexport function minElement(set$) {\n    return FSharpSet__get_MinimumElement(set$);\n}\n\nexport function maxElement(set$) {\n    return FSharpSet__get_MaximumElement(set$);\n}\n\nexport function unionWith(s1, s2) {\n    return fold_3((acc, x) => acc.add(x), s1, s2);\n}\n\nexport function intersectWith(s1, s2, comparer) {\n    const s2_1 = ofSeq(s2, comparer);\n    const enumerator = getEnumerator(s1.keys());\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (!FSharpSet__Contains(s2_1, x)) {\n                void s1.delete(x);\n            }\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n}\n\nexport function exceptWith(s1, s2) {\n    const enumerator = getEnumerator(s2);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            void s1.delete(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n    }\n    finally {\n        enumerator.Dispose();\n    }\n}\n\nexport function isSubsetOf(s1, s2, comparer) {\n    return isSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\nexport function isSupersetOf(s1, s2, comparer) {\n    return isSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\nexport function isProperSubsetOf(s1, s2, comparer) {\n    return isProperSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\nexport function isProperSupersetOf(s1, s2, comparer) {\n    return isProperSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\n}\n\n","import { toFail, printf, toText, join } from \"../fable-library.3.1.11/String.js\";\nimport { Result_Map, FSharpResult$2 } from \"../fable-library.3.1.11/Choice.js\";\nimport { Util_CachedDecoders, Util_Cache$1__GetOrAdd_43981464, CaseStrategy, Util_Casing_convert, ErrorReason } from \"./Types.fs.js\";\nimport { tryParse as tryParse_2 } from \"../fable-library.3.1.11/Guid.js\";\nimport { toString as toString_12, FSharpRef } from \"../fable-library.3.1.11/Types.js\";\nimport { tryParse as tryParse_3 } from \"../fable-library.3.1.11/Int32.js\";\nimport { tryParse as tryParse_4, fromInt, fromNumber, toNumber, fromBits } from \"../fable-library.3.1.11/Long.js\";\nimport { parse, fromInt32 } from \"../fable-library.3.1.11/BigInt.js\";\nimport { tryParse as tryParse_5 } from \"../fable-library.3.1.11/Decimal.js\";\nimport Decimal from \"../fable-library.3.1.11/Decimal.js\";\nimport { toUniversalTime, tryParse as tryParse_6, minValue } from \"../fable-library.3.1.11/Date.js\";\nimport { tryParse as tryParse_7, minValue as minValue_1 } from \"../fable-library.3.1.11/DateOffset.js\";\nimport { tryParse as tryParse_8 } from \"../fable-library.3.1.11/TimeSpan.js\";\nimport { map as map_4, value as value_40, defaultArg, some } from \"../fable-library.3.1.11/Option.js\";\nimport { ofArray, toArray, map as map_1, length, singleton, append as append_1, tail as tail_1, head as head_1, isEmpty, empty, reverse, fold, tryLast, cons } from \"../fable-library.3.1.11/List.js\";\nimport { int16ToString, numberHash, mapCurriedArgs, compare, int32ToString, uncurry } from \"../fable-library.3.1.11/Util.js\";\nimport { map as map_2, tryFind, foldBack2, foldBack, fill, fold as fold_1 } from \"../fable-library.3.1.11/Array.js\";\nimport { contains, toList, fold as fold_2, append, reverse as reverse_1 } from \"../fable-library.3.1.11/Seq.js\";\nimport { empty as empty_1, map as map_3, tryFind as tryFind_1, add, ofSeq, ofList } from \"../fable-library.3.1.11/Map.js\";\nimport { getGenerics, getGenericTypeDefinition, makeTuple, getTupleElements, isTuple, isGenericType, parseEnum, getEnumValues, getEnumUnderlyingType, isEnum, getElementType, isArray, isUnion, makeRecord, getRecordElements, isRecord, fullName, getUnionCaseFields, makeUnion as makeUnion_1, getUnionCases, name as name_3, class_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { ofSeq as ofSeq_1 } from \"../fable-library.3.1.11/Set.js\";\n\nexport function Helpers_isUndefined(o) {\n    return (typeof o) === \"undefined\";\n}\n\nfunction genericMsg(msg, value_1, newLine) {\n    try {\n        return (((\"Expecting \" + msg) + \" but instead got:\") + (newLine ? \"\\n\" : \" \")) + (JSON.stringify(value_1, null, 4) + '');\n    }\n    catch (matchValue) {\n        return ((\"Expecting \" + msg) + \" but decoder failed. Couldn\\u0027t report given value due to circular structure.\") + (newLine ? \"\\n\" : \" \");\n    }\n}\n\nfunction errorToString(path, error) {\n    const reason_1 = (error.tag === 2) ? genericMsg(error.fields[0], error.fields[1], true) : ((error.tag === 1) ? ((genericMsg(error.fields[0], error.fields[1], false) + \"\\nReason: \") + error.fields[2]) : ((error.tag === 3) ? genericMsg(error.fields[0], error.fields[1], true) : ((error.tag === 4) ? (genericMsg(error.fields[0], error.fields[1], true) + ((\"\\nNode `\" + error.fields[2]) + \"` is unkown.\")) : ((error.tag === 5) ? (((\"Expecting \" + error.fields[0]) + \".\\n\") + (JSON.stringify(error.fields[1], null, 4) + '')) : ((error.tag === 7) ? (\"The following errors were found:\\n\\n\" + join(\"\\n\\n\", error.fields[0])) : ((error.tag === 6) ? (\"The following `failure` occurred with the decoder: \" + error.fields[0]) : genericMsg(error.fields[0], error.fields[1], false)))))));\n    if (error.tag === 7) {\n        return reason_1;\n    }\n    else {\n        return ((\"Error at: `\" + path) + \"`\\n\") + reason_1;\n    }\n}\n\nexport function fromValue(path, decoder, value_1) {\n    const matchValue = decoder(path, value_1);\n    if (matchValue.tag === 1) {\n        const error = matchValue.fields[0];\n        return new FSharpResult$2(1, errorToString(error[0], error[1]));\n    }\n    else {\n        return new FSharpResult$2(0, matchValue.fields[0]);\n    }\n}\n\nexport function fromString(decoder, value_1) {\n    try {\n        return fromValue(\"$\", decoder, JSON.parse(value_1));\n    }\n    catch (matchValue) {\n        if (matchValue instanceof SyntaxError) {\n            return new FSharpResult$2(1, \"Given an invalid JSON: \" + matchValue.message);\n        }\n        else {\n            throw matchValue;\n        }\n    }\n}\n\nexport function unsafeFromString(decoder, value_1) {\n    const matchValue = fromString(decoder, value_1);\n    if (matchValue.tag === 1) {\n        throw (new Error(matchValue.fields[0]));\n    }\n    else {\n        return matchValue.fields[0];\n    }\n}\n\nexport function decodeValue(path, decoder) {\n    const decoder_1 = decoder;\n    return (value_1) => fromValue(path, decoder_1, value_1);\n}\n\nexport function decodeString(decoder) {\n    const decoder_1 = decoder;\n    return (value_1) => fromString(decoder_1, value_1);\n}\n\nexport function string(path, value_1) {\n    if ((typeof value_1) === \"string\") {\n        return new FSharpResult$2(0, value_1);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a string\", value_1)]);\n    }\n}\n\nexport function guid(path, value_1) {\n    if ((typeof value_1) === \"string\") {\n        let matchValue;\n        let outArg = \"00000000-0000-0000-0000-000000000000\";\n        matchValue = [tryParse_2(value_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return new FSharpResult$2(0, matchValue[1]);\n        }\n        else {\n            return new FSharpResult$2(1, [path, new ErrorReason(0, \"a guid\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a guid\", value_1)]);\n    }\n}\n\nexport function unit(path, value_1) {\n    if (value_1 == null) {\n        return new FSharpResult$2(0, void 0);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"null\", value_1)]);\n    }\n}\n\nexport const sbyte = (path) => ((value_2) => {\n    const name_1 = \"a sbyte\";\n    const path_1 = path;\n    const value_3 = value_2;\n    if ((typeof value_3) === \"number\") {\n        const value_4 = value_3;\n        return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((-128 <= value_4) ? (value_4 <= 127) : false) ? (new FSharpResult$2(0, (value_4 + 0x80 & 0xFF) - 0x80)) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n    }\n    else if ((typeof value_3) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_3(value_3, 511, false, 8, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n    }\n    else {\n        return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n    }\n});\n\nexport const byte = (path) => ((value_2) => {\n    const name_1 = \"a byte\";\n    const path_1 = path;\n    const value_3 = value_2;\n    if ((typeof value_3) === \"number\") {\n        const value_4 = value_3;\n        return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((0 <= value_4) ? (value_4 <= 255) : false) ? (new FSharpResult$2(0, value_4 & 0xFF)) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n    }\n    else if ((typeof value_3) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_3(value_3, 511, true, 8, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n    }\n    else {\n        return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n    }\n});\n\nexport const int16 = (path) => ((value_2) => {\n    const name_1 = \"an int16\";\n    const path_1 = path;\n    const value_3 = value_2;\n    if ((typeof value_3) === \"number\") {\n        const value_4 = value_3;\n        return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((-32768 <= value_4) ? (value_4 <= 32767) : false) ? (new FSharpResult$2(0, (value_4 + 0x8000 & 0xFFFF) - 0x8000)) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n    }\n    else if ((typeof value_3) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_3(value_3, 511, false, 16, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n    }\n    else {\n        return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n    }\n});\n\nexport const uint16 = (path) => ((value_2) => {\n    const name_1 = \"an uint16\";\n    const path_1 = path;\n    const value_3 = value_2;\n    if ((typeof value_3) === \"number\") {\n        const value_4 = value_3;\n        return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((0 <= value_4) ? (value_4 <= 65535) : false) ? (new FSharpResult$2(0, value_4 & 0xFFFF)) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n    }\n    else if ((typeof value_3) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_3(value_3, 511, true, 16, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n    }\n    else {\n        return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n    }\n});\n\nexport const int = (path) => ((value_2) => {\n    const name_1 = \"an int\";\n    const path_1 = path;\n    const value_3 = value_2;\n    if ((typeof value_3) === \"number\") {\n        const value_4 = value_3;\n        return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((-2147483648 <= value_4) ? (value_4 <= 2147483647) : false) ? (new FSharpResult$2(0, ~(~value_4))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n    }\n    else if ((typeof value_3) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_3(value_3, 511, false, 32, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n    }\n    else {\n        return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n    }\n});\n\nexport const uint32 = (path) => ((value_2) => {\n    const name_1 = \"an uint32\";\n    const path_1 = path;\n    const value_3 = value_2;\n    if ((typeof value_3) === \"number\") {\n        const value_4 = value_3;\n        return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((0 <= value_4) ? (value_4 <= 4294967295) : false) ? (new FSharpResult$2(0, value_4 >>> 0)) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n    }\n    else if ((typeof value_3) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_3(value_3, 511, true, 32, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n    }\n    else {\n        return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n    }\n});\n\nexport const int64 = (() => {\n    const min = fromBits(0, 2147483648, false);\n    const max = fromBits(4294967295, 2147483647, false);\n    return (path) => ((value_2) => {\n        const name_1 = \"an int64\";\n        const path_1 = path;\n        const value_3 = value_2;\n        if ((typeof value_3) === \"number\") {\n            const value_4 = value_3;\n            return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((toNumber(min) <= value_4) ? (value_4 <= toNumber(max)) : false) ? (new FSharpResult$2(0, fromNumber(value_4, false))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n        }\n        else if ((typeof value_3) === \"string\") {\n            let matchValue;\n            let outArg = fromInt(0);\n            matchValue = [tryParse_4(value_3, 511, false, 64, new FSharpRef(() => outArg, (v) => {\n                outArg = v;\n            })), outArg];\n            return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n        }\n        else {\n            return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n        }\n    });\n})();\n\nexport const uint64 = (() => {\n    const min = fromBits(0, 0, true);\n    const max = fromBits(4294967295, 4294967295, true);\n    return (path) => ((value_2) => {\n        const name_1 = \"an uint64\";\n        const path_1 = path;\n        const value_3 = value_2;\n        if ((typeof value_3) === \"number\") {\n            const value_4 = value_3;\n            return (isFinite(value_4) && Math.floor(value_4) === value_4) ? (((toNumber(min) <= value_4) ? (value_4 <= toNumber(max)) : false) ? (new FSharpResult$2(0, fromNumber(value_4, true))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value was either too large or too small for \" + name_1)]))) : (new FSharpResult$2(1, [path_1, new ErrorReason(1, name_1, value_4, \"Value is not an integral value\")]));\n        }\n        else if ((typeof value_3) === \"string\") {\n            let matchValue;\n            let outArg = fromInt(0);\n            matchValue = [tryParse_4(value_3, 511, true, 64, new FSharpRef(() => outArg, (v) => {\n                outArg = v;\n            })), outArg];\n            return matchValue[0] ? (new FSharpResult$2(0, matchValue[1])) : (new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]));\n        }\n        else {\n            return new FSharpResult$2(1, [path_1, new ErrorReason(0, name_1, value_3)]);\n        }\n    });\n})();\n\nexport function bigint(path, value_1) {\n    if ((typeof value_1) === \"number\") {\n        return new FSharpResult$2(0, fromInt32(value_1));\n    }\n    else if ((typeof value_1) === \"string\") {\n        try {\n            return new FSharpResult$2(0, parse(value_1));\n        }\n        catch (matchValue) {\n            return new FSharpResult$2(1, [path, new ErrorReason(0, \"a bigint\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a bigint\", value_1)]);\n    }\n}\n\nexport function bool(path, value_1) {\n    if ((typeof value_1) === \"boolean\") {\n        return new FSharpResult$2(0, value_1);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a boolean\", value_1)]);\n    }\n}\n\nexport function float(path, value_1) {\n    if ((typeof value_1) === \"number\") {\n        return new FSharpResult$2(0, value_1);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a float\", value_1)]);\n    }\n}\n\nexport function float32(path, value_1) {\n    if ((typeof value_1) === \"number\") {\n        return new FSharpResult$2(0, value_1);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a float32\", value_1)]);\n    }\n}\n\nexport function decimal(path, value_1) {\n    if ((typeof value_1) === \"number\") {\n        return new FSharpResult$2(0, new Decimal(value_1));\n    }\n    else if ((typeof value_1) === \"string\") {\n        let matchValue;\n        let outArg = new Decimal(0);\n        matchValue = [tryParse_5(value_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return new FSharpResult$2(0, matchValue[1]);\n        }\n        else {\n            return new FSharpResult$2(1, [path, new ErrorReason(0, \"a decimal\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a decimal\", value_1)]);\n    }\n}\n\nexport function datetime(path, value_1) {\n    if ((typeof value_1) === \"string\") {\n        let matchValue;\n        let outArg = minValue();\n        matchValue = [tryParse_6(value_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return new FSharpResult$2(0, toUniversalTime(matchValue[1]));\n        }\n        else {\n            return new FSharpResult$2(1, [path, new ErrorReason(0, \"a datetime\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a datetime\", value_1)]);\n    }\n}\n\nexport function datetimeOffset(path, value_1) {\n    if ((typeof value_1) === \"string\") {\n        let matchValue;\n        let outArg = minValue_1();\n        matchValue = [tryParse_7(value_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return new FSharpResult$2(0, matchValue[1]);\n        }\n        else {\n            return new FSharpResult$2(1, [path, new ErrorReason(0, \"a datetimeoffset\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a datetime\", value_1)]);\n    }\n}\n\nexport function timespan(path, value_1) {\n    if ((typeof value_1) === \"string\") {\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryParse_8(value_1, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            return new FSharpResult$2(0, matchValue[1]);\n        }\n        else {\n            return new FSharpResult$2(1, [path, new ErrorReason(0, \"a timespan\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a timespan\", value_1)]);\n    }\n}\n\nfunction decodeMaybeNull(path, decoder, value_1) {\n    const matchValue = decoder(path, value_1);\n    if (matchValue.tag === 1) {\n        if (value_1 == null) {\n            return new FSharpResult$2(0, void 0);\n        }\n        else if (matchValue.tag === 1) {\n            return new FSharpResult$2(1, matchValue.fields[0]);\n        }\n        else {\n            throw (new Error(\"Match failure\"));\n        }\n    }\n    else {\n        return new FSharpResult$2(0, some(matchValue.fields[0]));\n    }\n}\n\nexport function optional(fieldName, decoder, path, value_1) {\n    if (value_1 === null ? false : (Object.getPrototypeOf(value_1 || false) === Object.prototype)) {\n        const fieldValue = value_1[fieldName];\n        if (Helpers_isUndefined(fieldValue)) {\n            return new FSharpResult$2(0, void 0);\n        }\n        else {\n            return decodeMaybeNull((path + \".\") + fieldName, decoder, fieldValue);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(2, \"an object\", value_1)]);\n    }\n}\n\nfunction badPathError(fieldNames, currentPath, value_1) {\n    return new FSharpResult$2(1, [defaultArg(currentPath, join(\".\", cons(\"$\", fieldNames))), new ErrorReason(4, (\"an object with path `\" + join(\".\", fieldNames)) + \"`\", value_1, defaultArg(tryLast(fieldNames), \"\"))]);\n}\n\nexport function optionalAt(fieldNames, decoder, firstPath, firstValue) {\n    const _arg1 = fold(uncurry(2, (tupledArg) => {\n        const curPath = tupledArg[0];\n        const curValue = tupledArg[1];\n        const res = tupledArg[2];\n        return (field_1) => ((res == null) ? ((curValue == null) ? [curPath, curValue, badPathError(fieldNames, curPath, firstValue)] : ((curValue === null ? false : (Object.getPrototypeOf(curValue || false) === Object.prototype)) ? [(curPath + \".\") + field_1, curValue[field_1], void 0] : [curPath, curValue, new FSharpResult$2(1, [curPath, new ErrorReason(2, \"an object\", curValue)])])) : [curPath, curValue, res]);\n    }), [firstPath, firstValue, void 0], fieldNames);\n    if (_arg1[2] == null) {\n        const lastValue = _arg1[1];\n        if (Helpers_isUndefined(lastValue)) {\n            return new FSharpResult$2(0, void 0);\n        }\n        else {\n            return decodeMaybeNull(_arg1[0], decoder, lastValue);\n        }\n    }\n    else {\n        return _arg1[2];\n    }\n}\n\nexport function field(fieldName, decoder, path, value_1) {\n    if (value_1 === null ? false : (Object.getPrototypeOf(value_1 || false) === Object.prototype)) {\n        const fieldValue = value_1[fieldName];\n        if (Helpers_isUndefined(fieldValue)) {\n            return new FSharpResult$2(1, [path, new ErrorReason(3, (\"an object with a field named `\" + fieldName) + \"`\", value_1)]);\n        }\n        else {\n            return decoder((path + \".\") + fieldName, fieldValue);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(2, \"an object\", value_1)]);\n    }\n}\n\nexport function at(fieldNames, decoder, firstPath, firstValue) {\n    const _arg1 = fold(uncurry(2, (tupledArg) => {\n        const curPath = tupledArg[0];\n        const curValue = tupledArg[1];\n        const res = tupledArg[2];\n        return (field_1) => {\n            if (res == null) {\n                if (curValue == null) {\n                    return [curPath, curValue, badPathError(fieldNames, curPath, firstValue)];\n                }\n                else if (curValue === null ? false : (Object.getPrototypeOf(curValue || false) === Object.prototype)) {\n                    const curValue_1 = curValue[field_1];\n                    return Helpers_isUndefined(curValue_1) ? [curPath, curValue_1, badPathError(fieldNames, void 0, firstValue)] : [(curPath + \".\") + field_1, curValue_1, void 0];\n                }\n                else {\n                    return [curPath, curValue, new FSharpResult$2(1, [curPath, new ErrorReason(2, \"an object\", curValue)])];\n                }\n            }\n            else {\n                return [curPath, curValue, res];\n            }\n        };\n    }), [firstPath, firstValue, void 0], fieldNames);\n    if (_arg1[2] == null) {\n        return decoder(_arg1[0], _arg1[1]);\n    }\n    else {\n        return _arg1[2];\n    }\n}\n\nexport function index(requestedIndex, decoder, path, value_1) {\n    let copyOfStruct;\n    const currentPath = ((path + \".[\") + int32ToString(requestedIndex)) + \"]\";\n    if (Array.isArray(value_1)) {\n        const vArray = value_1;\n        if (requestedIndex < vArray.length) {\n            return decoder(currentPath, vArray[requestedIndex]);\n        }\n        else {\n            return new FSharpResult$2(1, [currentPath, new ErrorReason(5, (((\"a longer array. Need index `\" + int32ToString(requestedIndex)) + \"` but there are only `\") + (copyOfStruct = (vArray.length | 0), int32ToString(copyOfStruct))) + \"` entries\", value_1)]);\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [currentPath, new ErrorReason(0, \"an array\", value_1)]);\n    }\n}\n\nexport function option(decoder, path, value_1) {\n    if (value_1 == null) {\n        return new FSharpResult$2(0, void 0);\n    }\n    else {\n        return Result_Map((arg0) => some(arg0), decoder(path, value_1));\n    }\n}\n\nexport function list(decoder, path, value_1) {\n    if (Array.isArray(value_1)) {\n        let i = -1;\n        return Result_Map((list_1) => reverse(list_1), fold_1((acc, value_2) => {\n            i = ((i + 1) | 0);\n            if (acc.tag === 0) {\n                const matchValue = decoder(((path + \".[\") + int32ToString(i)) + \"]\", value_2);\n                if (matchValue.tag === 0) {\n                    return new FSharpResult$2(0, cons(matchValue.fields[0], acc.fields[0]));\n                }\n                else {\n                    return new FSharpResult$2(1, matchValue.fields[0]);\n                }\n            }\n            else {\n                return acc;\n            }\n        }, new FSharpResult$2(0, empty()), value_1));\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a list\", value_1)]);\n    }\n}\n\nexport function seq(decoder, path, value_1) {\n    if (Array.isArray(value_1)) {\n        let i = -1;\n        return Result_Map((source) => reverse_1(source), fold_1((acc, value_2) => {\n            i = ((i + 1) | 0);\n            if (acc.tag === 0) {\n                const matchValue = decoder(((path + \".[\") + int32ToString(i)) + \"]\", value_2);\n                if (matchValue.tag === 0) {\n                    return new FSharpResult$2(0, append([matchValue.fields[0]], acc.fields[0]));\n                }\n                else {\n                    return new FSharpResult$2(1, matchValue.fields[0]);\n                }\n            }\n            else {\n                return acc;\n            }\n        }, new FSharpResult$2(0, []), value_1));\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"a seq\", value_1)]);\n    }\n}\n\nexport function array(decoder, path, value_1) {\n    if (Array.isArray(value_1)) {\n        let i = -1;\n        const tokens = value_1;\n        return fold_1((acc, value_2) => {\n            i = ((i + 1) | 0);\n            if (acc.tag === 0) {\n                const acc_1 = acc.fields[0];\n                const matchValue = decoder(((path + \".[\") + int32ToString(i)) + \"]\", value_2);\n                if (matchValue.tag === 0) {\n                    acc_1[i] = matchValue.fields[0];\n                    return new FSharpResult$2(0, acc_1);\n                }\n                else {\n                    return new FSharpResult$2(1, matchValue.fields[0]);\n                }\n            }\n            else {\n                return acc;\n            }\n        }, new FSharpResult$2(0, fill(new Array(tokens.length), 0, tokens.length, null)), tokens);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"an array\", value_1)]);\n    }\n}\n\nexport function keyValuePairs(decoder, path, value_1) {\n    if (value_1 === null ? false : (Object.getPrototypeOf(value_1 || false) === Object.prototype)) {\n        return Result_Map((list_1) => reverse(list_1), fold_2((acc, prop) => {\n            if (acc.tag === 0) {\n                const matchValue = decoder(path, value_1[prop]);\n                if (matchValue.tag === 0) {\n                    return new FSharpResult$2(0, cons([prop, matchValue.fields[0]], acc.fields[0]));\n                }\n                else {\n                    return new FSharpResult$2(1, matchValue.fields[0]);\n                }\n            }\n            else {\n                return acc;\n            }\n        }, new FSharpResult$2(0, empty()), Object.keys(value_1)));\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"an object\", value_1)]);\n    }\n}\n\nexport function oneOf(decoders, path, value_1) {\n    const runner = (decoders_1_mut, errors_mut) => {\n        runner:\n        while (true) {\n            const decoders_1 = decoders_1_mut, errors = errors_mut;\n            if (isEmpty(decoders_1)) {\n                return new FSharpResult$2(1, [path, new ErrorReason(7, errors)]);\n            }\n            else {\n                const matchValue = fromValue(path, uncurry(2, head_1(decoders_1)), value_1);\n                if (matchValue.tag === 1) {\n                    decoders_1_mut = tail_1(decoders_1);\n                    errors_mut = append_1(errors, singleton(matchValue.fields[0]));\n                    continue runner;\n                }\n                else {\n                    return new FSharpResult$2(0, matchValue.fields[0]);\n                }\n            }\n            break;\n        }\n    };\n    return runner(decoders, empty());\n}\n\nexport function nil(output, path, value_1) {\n    if (value_1 == null) {\n        return new FSharpResult$2(0, output);\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"null\", value_1)]);\n    }\n}\n\nexport function value(_arg1, v) {\n    return new FSharpResult$2(0, v);\n}\n\nexport function succeed(output, _arg2, _arg1) {\n    return new FSharpResult$2(0, output);\n}\n\nexport function fail(msg, path, _arg1) {\n    return new FSharpResult$2(1, [path, new ErrorReason(6, msg)]);\n}\n\nexport function andThen(cb, decoder, path, value_1) {\n    const matchValue = decoder(path, value_1);\n    if (matchValue.tag === 0) {\n        return cb(matchValue.fields[0], path, value_1);\n    }\n    else {\n        return new FSharpResult$2(1, matchValue.fields[0]);\n    }\n}\n\nexport function map(ctor, d1, path, value_1) {\n    const matchValue = d1(path, value_1);\n    if (matchValue.tag === 1) {\n        return new FSharpResult$2(1, matchValue.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(0, ctor(matchValue.fields[0]));\n    }\n}\n\nexport function map2(ctor, d1, d2, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0]));\n        }\n    }\n}\n\nexport function map3(ctor, d1, d2, d3, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1), d3(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            const copyOfStruct_2 = matchValue[2];\n            if (copyOfStruct_2.tag === 1) {\n                return new FSharpResult$2(1, copyOfStruct_2.fields[0]);\n            }\n            else {\n                return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0]));\n            }\n        }\n    }\n}\n\nexport function map4(ctor, d1, d2, d3, d4, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1), d3(path, value_1), d4(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            const copyOfStruct_2 = matchValue[2];\n            if (copyOfStruct_2.tag === 1) {\n                return new FSharpResult$2(1, copyOfStruct_2.fields[0]);\n            }\n            else {\n                const copyOfStruct_3 = matchValue[3];\n                if (copyOfStruct_3.tag === 1) {\n                    return new FSharpResult$2(1, copyOfStruct_3.fields[0]);\n                }\n                else {\n                    return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0]));\n                }\n            }\n        }\n    }\n}\n\nexport function map5(ctor, d1, d2, d3, d4, d5, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1), d3(path, value_1), d4(path, value_1), d5(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            const copyOfStruct_2 = matchValue[2];\n            if (copyOfStruct_2.tag === 1) {\n                return new FSharpResult$2(1, copyOfStruct_2.fields[0]);\n            }\n            else {\n                const copyOfStruct_3 = matchValue[3];\n                if (copyOfStruct_3.tag === 1) {\n                    return new FSharpResult$2(1, copyOfStruct_3.fields[0]);\n                }\n                else {\n                    const copyOfStruct_4 = matchValue[4];\n                    if (copyOfStruct_4.tag === 1) {\n                        return new FSharpResult$2(1, copyOfStruct_4.fields[0]);\n                    }\n                    else {\n                        return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0]));\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function map6(ctor, d1, d2, d3, d4, d5, d6, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1), d3(path, value_1), d4(path, value_1), d5(path, value_1), d6(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            const copyOfStruct_2 = matchValue[2];\n            if (copyOfStruct_2.tag === 1) {\n                return new FSharpResult$2(1, copyOfStruct_2.fields[0]);\n            }\n            else {\n                const copyOfStruct_3 = matchValue[3];\n                if (copyOfStruct_3.tag === 1) {\n                    return new FSharpResult$2(1, copyOfStruct_3.fields[0]);\n                }\n                else {\n                    const copyOfStruct_4 = matchValue[4];\n                    if (copyOfStruct_4.tag === 1) {\n                        return new FSharpResult$2(1, copyOfStruct_4.fields[0]);\n                    }\n                    else {\n                        const copyOfStruct_5 = matchValue[5];\n                        if (copyOfStruct_5.tag === 1) {\n                            return new FSharpResult$2(1, copyOfStruct_5.fields[0]);\n                        }\n                        else {\n                            return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0], copyOfStruct_5.fields[0]));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function map7(ctor, d1, d2, d3, d4, d5, d6, d7, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1), d3(path, value_1), d4(path, value_1), d5(path, value_1), d6(path, value_1), d7(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            const copyOfStruct_2 = matchValue[2];\n            if (copyOfStruct_2.tag === 1) {\n                return new FSharpResult$2(1, copyOfStruct_2.fields[0]);\n            }\n            else {\n                const copyOfStruct_3 = matchValue[3];\n                if (copyOfStruct_3.tag === 1) {\n                    return new FSharpResult$2(1, copyOfStruct_3.fields[0]);\n                }\n                else {\n                    const copyOfStruct_4 = matchValue[4];\n                    if (copyOfStruct_4.tag === 1) {\n                        return new FSharpResult$2(1, copyOfStruct_4.fields[0]);\n                    }\n                    else {\n                        const copyOfStruct_5 = matchValue[5];\n                        if (copyOfStruct_5.tag === 1) {\n                            return new FSharpResult$2(1, copyOfStruct_5.fields[0]);\n                        }\n                        else {\n                            const copyOfStruct_6 = matchValue[6];\n                            if (copyOfStruct_6.tag === 1) {\n                                return new FSharpResult$2(1, copyOfStruct_6.fields[0]);\n                            }\n                            else {\n                                return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0], copyOfStruct_5.fields[0], copyOfStruct_6.fields[0]));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function map8(ctor, d1, d2, d3, d4, d5, d6, d7, d8, path, value_1) {\n    const matchValue = [d1(path, value_1), d2(path, value_1), d3(path, value_1), d4(path, value_1), d5(path, value_1), d6(path, value_1), d7(path, value_1), d8(path, value_1)];\n    const copyOfStruct = matchValue[0];\n    if (copyOfStruct.tag === 1) {\n        return new FSharpResult$2(1, copyOfStruct.fields[0]);\n    }\n    else {\n        const copyOfStruct_1 = matchValue[1];\n        if (copyOfStruct_1.tag === 1) {\n            return new FSharpResult$2(1, copyOfStruct_1.fields[0]);\n        }\n        else {\n            const copyOfStruct_2 = matchValue[2];\n            if (copyOfStruct_2.tag === 1) {\n                return new FSharpResult$2(1, copyOfStruct_2.fields[0]);\n            }\n            else {\n                const copyOfStruct_3 = matchValue[3];\n                if (copyOfStruct_3.tag === 1) {\n                    return new FSharpResult$2(1, copyOfStruct_3.fields[0]);\n                }\n                else {\n                    const copyOfStruct_4 = matchValue[4];\n                    if (copyOfStruct_4.tag === 1) {\n                        return new FSharpResult$2(1, copyOfStruct_4.fields[0]);\n                    }\n                    else {\n                        const copyOfStruct_5 = matchValue[5];\n                        if (copyOfStruct_5.tag === 1) {\n                            return new FSharpResult$2(1, copyOfStruct_5.fields[0]);\n                        }\n                        else {\n                            const copyOfStruct_6 = matchValue[6];\n                            if (copyOfStruct_6.tag === 1) {\n                                return new FSharpResult$2(1, copyOfStruct_6.fields[0]);\n                            }\n                            else {\n                                const copyOfStruct_7 = matchValue[7];\n                                if (copyOfStruct_7.tag === 1) {\n                                    return new FSharpResult$2(1, copyOfStruct_7.fields[0]);\n                                }\n                                else {\n                                    return new FSharpResult$2(0, ctor(copyOfStruct.fields[0], copyOfStruct_1.fields[0], copyOfStruct_2.fields[0], copyOfStruct_3.fields[0], copyOfStruct_4.fields[0], copyOfStruct_5.fields[0], copyOfStruct_6.fields[0], copyOfStruct_7.fields[0]));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function dict(decoder) {\n    let d1;\n    const decoder_1 = decoder;\n    d1 = ((path) => ((value_1) => keyValuePairs(decoder_1, path, value_1)));\n    return (path_1) => ((value_2) => map((elements) => ofList(elements), uncurry(2, d1), path_1, value_2));\n}\n\nfunction unwrapWith(errors, path, decoder, value_1) {\n    const matchValue = decoder(path, value_1);\n    if (matchValue.tag === 1) {\n        void (errors.push(matchValue.fields[0]));\n        return null;\n    }\n    else {\n        return matchValue.fields[0];\n    }\n}\n\nexport class Getters$1 {\n    constructor(path, v) {\n        let _this, _this_1;\n        this.errors = [];\n        this.required = (_this = this, {\n            Field(fieldName, decoder) {\n                return unwrapWith(_this.errors, path, (path_1, value_1) => field(fieldName, decoder, path_1, value_1), v);\n            },\n            At(fieldNames, decoder_2) {\n                return unwrapWith(_this.errors, path, (firstPath, firstValue) => at(fieldNames, decoder_2, firstPath, firstValue), v);\n            },\n            Raw(decoder_4) {\n                return unwrapWith(_this.errors, path, decoder_4, v);\n            },\n        });\n        this.optional = (_this_1 = this, {\n            Field(fieldName_1, decoder_5) {\n                return unwrapWith(_this_1.errors, path, (path_2, value_2) => optional(fieldName_1, decoder_5, path_2, value_2), v);\n            },\n            At(fieldNames_1, decoder_7) {\n                return unwrapWith(_this_1.errors, path, (firstPath_1, firstValue_1) => optionalAt(fieldNames_1, decoder_7, firstPath_1, firstValue_1), v);\n            },\n            Raw(decoder_9) {\n                const matchValue = decoder_9(path, v);\n                if (matchValue.tag === 1) {\n                    const reason = matchValue.fields[0][1];\n                    const error = matchValue.fields[0];\n                    let pattern_matching_result, v_2;\n                    switch (reason.tag) {\n                        case 1: {\n                            pattern_matching_result = 0;\n                            v_2 = reason.fields[1];\n                            break;\n                        }\n                        case 2: {\n                            pattern_matching_result = 0;\n                            v_2 = reason.fields[1];\n                            break;\n                        }\n                        case 3:\n                        case 4: {\n                            pattern_matching_result = 1;\n                            break;\n                        }\n                        case 5:\n                        case 6:\n                        case 7: {\n                            pattern_matching_result = 2;\n                            break;\n                        }\n                        default: {\n                            pattern_matching_result = 0;\n                            v_2 = reason.fields[1];\n                        }\n                    }\n                    switch (pattern_matching_result) {\n                        case 0: {\n                            if (v_2 == null) {\n                                return void 0;\n                            }\n                            else {\n                                void (_this_1.errors.push(error));\n                                return null;\n                            }\n                        }\n                        case 1: {\n                            return void 0;\n                        }\n                        case 2: {\n                            void (_this_1.errors.push(error));\n                            return null;\n                        }\n                    }\n                }\n                else {\n                    return some(matchValue.fields[0]);\n                }\n            },\n        });\n    }\n    get Required() {\n        const __ = this;\n        return __.required;\n    }\n    get Optional() {\n        const __ = this;\n        return __.optional;\n    }\n}\n\nexport function Getters$1$reflection(gen0) {\n    return class_type(\"Thoth.Json.Decode.Getters`1\", [gen0], Getters$1);\n}\n\nexport function Getters$1_$ctor_4A51B60E(path, v) {\n    return new Getters$1(path, v);\n}\n\nexport function Getters$1__get_Errors(__) {\n    return toList(__.errors);\n}\n\nexport function object(builder, path, v) {\n    const getters = Getters$1_$ctor_4A51B60E(path, v);\n    const result = builder(getters);\n    const matchValue = Getters$1__get_Errors(getters);\n    if (!isEmpty(matchValue)) {\n        const errors = matchValue;\n        if (length(errors) > 1) {\n            return new FSharpResult$2(1, [path, new ErrorReason(7, map_1((tupledArg) => errorToString(tupledArg[0], tupledArg[1]), errors))]);\n        }\n        else {\n            return new FSharpResult$2(1, head_1(matchValue));\n        }\n    }\n    else {\n        return new FSharpResult$2(0, result);\n    }\n}\n\nexport function tuple2(decoder1, decoder2) {\n    let decoder_3;\n    const decoder = decoder1;\n    decoder_3 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_3) => ((value_4) => andThen(uncurry(3, (v1) => {\n        let decoder_2;\n        const decoder_1 = decoder2;\n        decoder_2 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_2) => ((value_3) => andThen((v2, arg10$0040, arg20$0040) => succeed([v1, v2], arg10$0040, arg20$0040), uncurry(2, decoder_2), path_2, value_3));\n    }), uncurry(2, decoder_3), path_3, value_4));\n}\n\nexport function tuple3(decoder1, decoder2, decoder3) {\n    let decoder_5;\n    const decoder = decoder1;\n    decoder_5 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_5) => ((value_6) => andThen(uncurry(3, (v1) => {\n        let decoder_4;\n        const decoder_1 = decoder2;\n        decoder_4 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_4) => ((value_5) => andThen(uncurry(3, (v2) => {\n            let decoder_3;\n            const decoder_2 = decoder3;\n            decoder_3 = ((path_2) => ((value_3) => index(2, decoder_2, path_2, value_3)));\n            return (path_3) => ((value_4) => andThen((v3, arg10$0040, arg20$0040) => succeed([v1, v2, v3], arg10$0040, arg20$0040), uncurry(2, decoder_3), path_3, value_4));\n        }), uncurry(2, decoder_4), path_4, value_5));\n    }), uncurry(2, decoder_5), path_5, value_6));\n}\n\nexport function tuple4(decoder1, decoder2, decoder3, decoder4) {\n    let decoder_7;\n    const decoder = decoder1;\n    decoder_7 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_7) => ((value_8) => andThen(uncurry(3, (v1) => {\n        let decoder_6;\n        const decoder_1 = decoder2;\n        decoder_6 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_6) => ((value_7) => andThen(uncurry(3, (v2) => {\n            let decoder_5;\n            const decoder_2 = decoder3;\n            decoder_5 = ((path_2) => ((value_3) => index(2, decoder_2, path_2, value_3)));\n            return (path_5) => ((value_6) => andThen(uncurry(3, (v3) => {\n                let decoder_4;\n                const decoder_3 = decoder4;\n                decoder_4 = ((path_3) => ((value_4) => index(3, decoder_3, path_3, value_4)));\n                return (path_4) => ((value_5) => andThen((v4, arg10$0040, arg20$0040) => succeed([v1, v2, v3, v4], arg10$0040, arg20$0040), uncurry(2, decoder_4), path_4, value_5));\n            }), uncurry(2, decoder_5), path_5, value_6));\n        }), uncurry(2, decoder_6), path_6, value_7));\n    }), uncurry(2, decoder_7), path_7, value_8));\n}\n\nexport function tuple5(decoder1, decoder2, decoder3, decoder4, decoder5) {\n    let decoder_9;\n    const decoder = decoder1;\n    decoder_9 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_9) => ((value_10) => andThen(uncurry(3, (v1) => {\n        let decoder_8;\n        const decoder_1 = decoder2;\n        decoder_8 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_8) => ((value_9) => andThen(uncurry(3, (v2) => {\n            let decoder_7;\n            const decoder_2 = decoder3;\n            decoder_7 = ((path_2) => ((value_3) => index(2, decoder_2, path_2, value_3)));\n            return (path_7) => ((value_8) => andThen(uncurry(3, (v3) => {\n                let decoder_6;\n                const decoder_3 = decoder4;\n                decoder_6 = ((path_3) => ((value_4) => index(3, decoder_3, path_3, value_4)));\n                return (path_6) => ((value_7) => andThen(uncurry(3, (v4) => {\n                    let decoder_5;\n                    const decoder_4 = decoder5;\n                    decoder_5 = ((path_4) => ((value_5) => index(4, decoder_4, path_4, value_5)));\n                    return (path_5) => ((value_6) => andThen((v5, arg10$0040, arg20$0040) => succeed([v1, v2, v3, v4, v5], arg10$0040, arg20$0040), uncurry(2, decoder_5), path_5, value_6));\n                }), uncurry(2, decoder_6), path_6, value_7));\n            }), uncurry(2, decoder_7), path_7, value_8));\n        }), uncurry(2, decoder_8), path_8, value_9));\n    }), uncurry(2, decoder_9), path_9, value_10));\n}\n\nexport function tuple6(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6) {\n    let decoder_11;\n    const decoder = decoder1;\n    decoder_11 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_11) => ((value_12) => andThen(uncurry(3, (v1) => {\n        let decoder_10;\n        const decoder_1 = decoder2;\n        decoder_10 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_10) => ((value_11) => andThen(uncurry(3, (v2) => {\n            let decoder_9;\n            const decoder_2 = decoder3;\n            decoder_9 = ((path_2) => ((value_3) => index(2, decoder_2, path_2, value_3)));\n            return (path_9) => ((value_10) => andThen(uncurry(3, (v3) => {\n                let decoder_8;\n                const decoder_3 = decoder4;\n                decoder_8 = ((path_3) => ((value_4) => index(3, decoder_3, path_3, value_4)));\n                return (path_8) => ((value_9) => andThen(uncurry(3, (v4) => {\n                    let decoder_7;\n                    const decoder_4 = decoder5;\n                    decoder_7 = ((path_4) => ((value_5) => index(4, decoder_4, path_4, value_5)));\n                    return (path_7) => ((value_8) => andThen(uncurry(3, (v5) => {\n                        let decoder_6;\n                        const decoder_5 = decoder6;\n                        decoder_6 = ((path_5) => ((value_6) => index(5, decoder_5, path_5, value_6)));\n                        return (path_6) => ((value_7) => andThen((v6, arg10$0040, arg20$0040) => succeed([v1, v2, v3, v4, v5, v6], arg10$0040, arg20$0040), uncurry(2, decoder_6), path_6, value_7));\n                    }), uncurry(2, decoder_7), path_7, value_8));\n                }), uncurry(2, decoder_8), path_8, value_9));\n            }), uncurry(2, decoder_9), path_9, value_10));\n        }), uncurry(2, decoder_10), path_10, value_11));\n    }), uncurry(2, decoder_11), path_11, value_12));\n}\n\nexport function tuple7(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7) {\n    let decoder_13;\n    const decoder = decoder1;\n    decoder_13 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_13) => ((value_14) => andThen(uncurry(3, (v1) => {\n        let decoder_12;\n        const decoder_1 = decoder2;\n        decoder_12 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_12) => ((value_13) => andThen(uncurry(3, (v2) => {\n            let decoder_11;\n            const decoder_2 = decoder3;\n            decoder_11 = ((path_2) => ((value_3) => index(2, decoder_2, path_2, value_3)));\n            return (path_11) => ((value_12) => andThen(uncurry(3, (v3) => {\n                let decoder_10;\n                const decoder_3 = decoder4;\n                decoder_10 = ((path_3) => ((value_4) => index(3, decoder_3, path_3, value_4)));\n                return (path_10) => ((value_11) => andThen(uncurry(3, (v4) => {\n                    let decoder_9;\n                    const decoder_4 = decoder5;\n                    decoder_9 = ((path_4) => ((value_5) => index(4, decoder_4, path_4, value_5)));\n                    return (path_9) => ((value_10) => andThen(uncurry(3, (v5) => {\n                        let decoder_8;\n                        const decoder_5 = decoder6;\n                        decoder_8 = ((path_5) => ((value_6) => index(5, decoder_5, path_5, value_6)));\n                        return (path_8) => ((value_9) => andThen(uncurry(3, (v6) => {\n                            let decoder_7;\n                            const decoder_6 = decoder7;\n                            decoder_7 = ((path_6) => ((value_7) => index(6, decoder_6, path_6, value_7)));\n                            return (path_7) => ((value_8) => andThen((v7, arg10$0040, arg20$0040) => succeed([v1, v2, v3, v4, v5, v6, v7], arg10$0040, arg20$0040), uncurry(2, decoder_7), path_7, value_8));\n                        }), uncurry(2, decoder_8), path_8, value_9));\n                    }), uncurry(2, decoder_9), path_9, value_10));\n                }), uncurry(2, decoder_10), path_10, value_11));\n            }), uncurry(2, decoder_11), path_11, value_12));\n        }), uncurry(2, decoder_12), path_12, value_13));\n    }), uncurry(2, decoder_13), path_13, value_14));\n}\n\nexport function tuple8(decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7, decoder8) {\n    let decoder_15;\n    const decoder = decoder1;\n    decoder_15 = ((path) => ((value_1) => index(0, decoder, path, value_1)));\n    return (path_15) => ((value_16) => andThen(uncurry(3, (v1) => {\n        let decoder_14;\n        const decoder_1 = decoder2;\n        decoder_14 = ((path_1) => ((value_2) => index(1, decoder_1, path_1, value_2)));\n        return (path_14) => ((value_15) => andThen(uncurry(3, (v2) => {\n            let decoder_13;\n            const decoder_2 = decoder3;\n            decoder_13 = ((path_2) => ((value_3) => index(2, decoder_2, path_2, value_3)));\n            return (path_13) => ((value_14) => andThen(uncurry(3, (v3) => {\n                let decoder_12;\n                const decoder_3 = decoder4;\n                decoder_12 = ((path_3) => ((value_4) => index(3, decoder_3, path_3, value_4)));\n                return (path_12) => ((value_13) => andThen(uncurry(3, (v4) => {\n                    let decoder_11;\n                    const decoder_4 = decoder5;\n                    decoder_11 = ((path_4) => ((value_5) => index(4, decoder_4, path_4, value_5)));\n                    return (path_11) => ((value_12) => andThen(uncurry(3, (v5) => {\n                        let decoder_10;\n                        const decoder_5 = decoder6;\n                        decoder_10 = ((path_5) => ((value_6) => index(5, decoder_5, path_5, value_6)));\n                        return (path_10) => ((value_11) => andThen(uncurry(3, (v6) => {\n                            let decoder_9;\n                            const decoder_6 = decoder7;\n                            decoder_9 = ((path_6) => ((value_7) => index(6, decoder_6, path_6, value_7)));\n                            return (path_9) => ((value_10) => andThen(uncurry(3, (v7) => {\n                                let decoder_8;\n                                const decoder_7 = decoder8;\n                                decoder_8 = ((path_7) => ((value_8) => index(7, decoder_7, path_7, value_8)));\n                                return (path_8) => ((value_9) => andThen((v8, arg10$0040, arg20$0040) => succeed([v1, v2, v3, v4, v5, v6, v7, v8], arg10$0040, arg20$0040), uncurry(2, decoder_8), path_8, value_9));\n                            }), uncurry(2, decoder_9), path_9, value_10));\n                        }), uncurry(2, decoder_10), path_10, value_11));\n                    }), uncurry(2, decoder_11), path_11, value_12));\n                }), uncurry(2, decoder_12), path_12, value_13));\n            }), uncurry(2, decoder_13), path_13, value_14));\n        }), uncurry(2, decoder_14), path_14, value_15));\n    }), uncurry(2, decoder_15), path_15, value_16));\n}\n\nfunction toMap(xs) {\n    return ofSeq(xs);\n}\n\nfunction toSet(xs) {\n    return ofSeq_1(xs, {\n        Compare: (x, y) => compare(x, y),\n    });\n}\n\nfunction autoObject(decoderInfos, path, value_1) {\n    if (!(value_1 === null ? false : (Object.getPrototypeOf(value_1 || false) === Object.prototype))) {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"an object\", value_1)]);\n    }\n    else {\n        return foldBack(uncurry(2, (tupledArg) => {\n            const name = tupledArg[0];\n            return (acc) => ((acc.tag === 0) ? Result_Map((v) => cons(v, acc.fields[0]), tupledArg[1]((path + \".\") + name)(value_1[name])) : acc);\n        }), decoderInfos, new FSharpResult$2(0, empty()));\n    }\n}\n\nfunction autoObject2(keyDecoder, valueDecoder, path, value_1) {\n    if (!(value_1 === null ? false : (Object.getPrototypeOf(value_1 || false) === Object.prototype))) {\n        return new FSharpResult$2(1, [path, new ErrorReason(0, \"an object\", value_1)]);\n    }\n    else {\n        return fold_2((acc, name) => {\n            if (acc.tag === 0) {\n                const matchValue = keyDecoder(path, name);\n                if (matchValue.tag === 0) {\n                    const _arg1 = valueDecoder((path + \".\") + name, value_1[name]);\n                    if (_arg1.tag === 0) {\n                        return new FSharpResult$2(0, cons([matchValue.fields[0], _arg1.fields[0]], acc.fields[0]));\n                    }\n                    else {\n                        return new FSharpResult$2(1, _arg1.fields[0]);\n                    }\n                }\n                else {\n                    return new FSharpResult$2(1, matchValue.fields[0]);\n                }\n            }\n            else {\n                return acc;\n            }\n        }, new FSharpResult$2(0, empty()), Object.keys(value_1));\n    }\n}\n\nfunction mixedArray(msg, decoders, path, values) {\n    let arg30, arg10;\n    if (decoders.length !== values.length) {\n        return new FSharpResult$2(1, [path, new ErrorReason(6, (arg30 = (values.length | 0), (arg10 = (decoders.length | 0), toText(printf(\"Expected %i %s but got %i\"))(arg10)(msg)(arg30))))]);\n    }\n    else {\n        return foldBack2(uncurry(3, mapCurriedArgs((value_1) => ((decoder) => ((acc) => ((acc.tag === 0) ? Result_Map((v) => cons(v, acc.fields[0]), decoder(path, value_1)) : acc))), [0, [0, 2], 0])), values, decoders, new FSharpResult$2(0, empty()));\n    }\n}\n\nfunction makeUnion(extra, caseStrategy, t, name, path, values) {\n    const uci = tryFind((x) => (name_3(x) === name), getUnionCases(t, true));\n    if (uci != null) {\n        const uci_1 = uci;\n        if (values.length === 0) {\n            return new FSharpResult$2(0, makeUnion_1(uci_1, [], true));\n        }\n        else {\n            return Result_Map((values_1) => makeUnion_1(uci_1, toArray(values_1), true), mixedArray(\"union fields\", map_2((fi) => autoDecoder(extra, caseStrategy, false, fi[1]), getUnionCaseFields(uci_1)), path, values));\n        }\n    }\n    else {\n        return new FSharpResult$2(1, [path, new ErrorReason(6, ((\"Cannot find case \" + name) + \" in \") + fullName(t))]);\n    }\n}\n\nfunction autoDecodeRecordsAndUnions(extra, caseStrategy, isOptional, t) {\n    const decoderRef = new FSharpRef(null);\n    const extra_1 = add(fullName(t), decoderRef, extra);\n    let decoder;\n    if (isRecord(t, true)) {\n        const decoders = map_2((fi) => [Util_Casing_convert(caseStrategy, name_3(fi)), autoDecoder(extra_1, caseStrategy, false, fi[1])], getRecordElements(t, true));\n        decoder = ((path) => ((value_1) => Result_Map((xs) => makeRecord(t, toArray(xs), true), autoObject(decoders, path, value_1))));\n    }\n    else if (isUnion(t, true)) {\n        decoder = ((path_1) => ((value_2) => {\n            if ((typeof value_2) === \"string\") {\n                return makeUnion(extra_1, caseStrategy, t, value_2, path_1, []);\n            }\n            else if (Array.isArray(value_2)) {\n                const values = value_2;\n                return makeUnion(extra_1, caseStrategy, t, values[0], path_1, values.slice(1, values.length));\n            }\n            else {\n                return new FSharpResult$2(1, [path_1, new ErrorReason(0, \"a string or array\", value_2)]);\n            }\n        }));\n    }\n    else if (isOptional) {\n        decoder = ((path_2) => ((value_3) => (new FSharpResult$2(1, [path_2, new ErrorReason(2, \"an extra coder for \" + fullName(t), value_3)]))));\n    }\n    else {\n        let message;\n        const arg10 = fullName(t);\n        message = toText(printf(\"Cannot generate auto decoder for %s. Please pass an extra decoder.\"))(arg10);\n        throw (new Error(message));\n    }\n    decoderRef.contents = decoder;\n    return decoder;\n}\n\nfunction autoDecoder(extra, caseStrategy, isOptional, t) {\n    let decoder_15;\n    const fullname = fullName(t);\n    const matchValue = tryFind_1(fullname, extra);\n    if (matchValue == null) {\n        if (isArray(t)) {\n            const decoder = autoDecoder(extra, caseStrategy, false, getElementType(t));\n            return (path_1) => ((value_2) => array(uncurry(2, decoder), path_1, value_2));\n        }\n        else if (isEnum(t)) {\n            const enumType = fullName(getEnumUnderlyingType(t));\n            if (enumType === \"System.SByte\") {\n                return (path_2) => ((value_4) => {\n                    const t_2 = t;\n                    const path_3 = path_2;\n                    const value_5 = value_4;\n                    const matchValue_1 = sbyte(path_3)(value_5);\n                    if (matchValue_1.tag === 1) {\n                        return new FSharpResult$2(1, matchValue_1.fields[0]);\n                    }\n                    else {\n                        const enumValue = matchValue_1.fields[0];\n                        return contains(enumValue, getEnumValues(t_2), {\n                            Equals: (x, y) => (x === y),\n                            GetHashCode: (x) => numberHash(x),\n                        }) ? (new FSharpResult$2(0, parseEnum(t_2, enumValue.toString()))) : (new FSharpResult$2(1, [path_3, new ErrorReason(1, fullName(t_2), value_5, \"Unkown value provided for the enum\")]));\n                    }\n                });\n            }\n            else if (enumType === \"System.Byte\") {\n                return (path_4) => ((value_7) => {\n                    const t_3 = t;\n                    const path_5 = path_4;\n                    const value_8 = value_7;\n                    const matchValue_2 = byte(path_5)(value_8);\n                    if (matchValue_2.tag === 1) {\n                        return new FSharpResult$2(1, matchValue_2.fields[0]);\n                    }\n                    else {\n                        const enumValue_1 = matchValue_2.fields[0];\n                        return contains(enumValue_1, getEnumValues(t_3), {\n                            Equals: (x_1, y_1) => (x_1 === y_1),\n                            GetHashCode: (x_1) => numberHash(x_1),\n                        }) ? (new FSharpResult$2(0, parseEnum(t_3, enumValue_1.toString()))) : (new FSharpResult$2(1, [path_5, new ErrorReason(1, fullName(t_3), value_8, \"Unkown value provided for the enum\")]));\n                    }\n                });\n            }\n            else if (enumType === \"System.Int16\") {\n                return (path_6) => ((value_10) => {\n                    const t_4 = t;\n                    const path_7 = path_6;\n                    const value_11 = value_10;\n                    const matchValue_3 = int16(path_7)(value_11);\n                    if (matchValue_3.tag === 1) {\n                        return new FSharpResult$2(1, matchValue_3.fields[0]);\n                    }\n                    else {\n                        const enumValue_2 = matchValue_3.fields[0];\n                        return contains(enumValue_2, getEnumValues(t_4), {\n                            Equals: (x_2, y_2) => (x_2 === y_2),\n                            GetHashCode: (x_2) => numberHash(x_2),\n                        }) ? (new FSharpResult$2(0, parseEnum(t_4, int16ToString(enumValue_2)))) : (new FSharpResult$2(1, [path_7, new ErrorReason(1, fullName(t_4), value_11, \"Unkown value provided for the enum\")]));\n                    }\n                });\n            }\n            else if (enumType === \"System.UInt16\") {\n                return (path_8) => ((value_13) => {\n                    const t_5 = t;\n                    const path_9 = path_8;\n                    const value_14 = value_13;\n                    const matchValue_4 = uint16(path_9)(value_14);\n                    if (matchValue_4.tag === 1) {\n                        return new FSharpResult$2(1, matchValue_4.fields[0]);\n                    }\n                    else {\n                        const enumValue_3 = matchValue_4.fields[0];\n                        return contains(enumValue_3, getEnumValues(t_5), {\n                            Equals: (x_3, y_3) => (x_3 === y_3),\n                            GetHashCode: (x_3) => numberHash(x_3),\n                        }) ? (new FSharpResult$2(0, parseEnum(t_5, enumValue_3.toString()))) : (new FSharpResult$2(1, [path_9, new ErrorReason(1, fullName(t_5), value_14, \"Unkown value provided for the enum\")]));\n                    }\n                });\n            }\n            else if (enumType === \"System.Int32\") {\n                return (path_10) => ((value_16) => {\n                    const t_6 = t;\n                    const path_11 = path_10;\n                    const value_17 = value_16;\n                    const matchValue_5 = int(path_11)(value_17);\n                    if (matchValue_5.tag === 1) {\n                        return new FSharpResult$2(1, matchValue_5.fields[0]);\n                    }\n                    else {\n                        const enumValue_4 = matchValue_5.fields[0];\n                        return contains(enumValue_4, getEnumValues(t_6), {\n                            Equals: (x_4, y_4) => (x_4 === y_4),\n                            GetHashCode: (x_4) => numberHash(x_4),\n                        }) ? (new FSharpResult$2(0, parseEnum(t_6, int32ToString(enumValue_4)))) : (new FSharpResult$2(1, [path_11, new ErrorReason(1, fullName(t_6), value_17, \"Unkown value provided for the enum\")]));\n                    }\n                });\n            }\n            else if (enumType === \"System.UInt32\") {\n                return (path_12) => ((value_19) => {\n                    const t_7 = t;\n                    const path_13 = path_12;\n                    const value_20 = value_19;\n                    const matchValue_6 = uint32(path_13)(value_20);\n                    if (matchValue_6.tag === 1) {\n                        return new FSharpResult$2(1, matchValue_6.fields[0]);\n                    }\n                    else {\n                        const enumValue_5 = matchValue_6.fields[0];\n                        return contains(enumValue_5, getEnumValues(t_7), {\n                            Equals: (x_5, y_5) => (x_5 === y_5),\n                            GetHashCode: (x_5) => numberHash(x_5),\n                        }) ? (new FSharpResult$2(0, parseEnum(t_7, enumValue_5.toString()))) : (new FSharpResult$2(1, [path_13, new ErrorReason(1, fullName(t_7), value_20, \"Unkown value provided for the enum\")]));\n                    }\n                });\n            }\n            else {\n                const arg10 = fullName(t);\n                const clo2 = toFail(printf(\"Cannot generate auto decoder for %s.\\nThoth.Json.Net only support the folluwing enum types:\\n- sbyte\\n- byte\\n- int16\\n- uint16\\n- int\\n- uint32\\nIf you can\\u0027t use one of these types, please pass an extra decoder.\\n                    \"))(arg10);\n                return (arg20) => {\n                    const clo3 = clo2(arg20);\n                    return (arg30) => clo3(arg30);\n                };\n            }\n        }\n        else if (isGenericType(t)) {\n            if (isTuple(t)) {\n                const decoders = map_2((t_8) => autoDecoder(extra, caseStrategy, false, t_8), getTupleElements(t));\n                return (path_14) => ((value_21) => (Array.isArray(value_21) ? Result_Map((xs) => makeTuple(toArray(xs), t), mixedArray(\"tuple elements\", decoders, path_14, value_21)) : (new FSharpResult$2(1, [path_14, new ErrorReason(0, \"an array\", value_21)]))));\n            }\n            else {\n                const fullname_1 = fullName(getGenericTypeDefinition(t));\n                if (fullname_1 === \"Microsoft.FSharp.Core.FSharpOption`1[System.Object]\") {\n                    const decoder_13 = autoDecoder(extra, caseStrategy, true, getGenerics(t)[0]);\n                    return (path_15) => ((value_22) => option(uncurry(2, decoder_13), path_15, value_22));\n                }\n                else if (fullname_1 === \"Microsoft.FSharp.Collections.FSharpList`1[System.Object]\") {\n                    const decoder_14 = autoDecoder(extra, caseStrategy, false, getGenerics(t)[0]);\n                    return (path_16) => ((value_23) => list(uncurry(2, decoder_14), path_16, value_23));\n                }\n                else if (fullname_1 === \"Microsoft.FSharp.Collections.FSharpMap`2[System.Object,System.Object]\") {\n                    const keyDecoder = autoDecoder(extra, caseStrategy, false, getGenerics(t)[0]);\n                    const valueDecoder = autoDecoder(extra, caseStrategy, false, getGenerics(t)[1]);\n                    let d1;\n                    const decoders_1 = ofArray([(path_17) => ((value_24) => autoObject2(uncurry(2, keyDecoder), uncurry(2, valueDecoder), path_17, value_24)), (decoder_15 = tuple2(uncurry(2, keyDecoder), uncurry(2, valueDecoder)), (path_18) => ((value_25) => list(uncurry(2, decoder_15), path_18, value_25)))]);\n                    d1 = ((path_19) => ((value_26) => oneOf(decoders_1, path_19, value_26)));\n                    return (path_20) => ((value_28) => map((ar) => toMap(ar), uncurry(2, d1), path_20, value_28));\n                }\n                else if (fullname_1 === \"Microsoft.FSharp.Collections.FSharpSet`1[System.Object]\") {\n                    const decoder_16 = autoDecoder(extra, caseStrategy, false, getGenerics(t)[0]);\n                    return (path_21) => ((value_29) => {\n                        const matchValue_7 = array(uncurry(2, decoder_16), path_21, value_29);\n                        return (matchValue_7.tag === 0) ? (new FSharpResult$2(0, toSet(matchValue_7.fields[0]))) : (new FSharpResult$2(1, matchValue_7.fields[0]));\n                    });\n                }\n                else {\n                    return autoDecodeRecordsAndUnions(extra, caseStrategy, isOptional, t);\n                }\n            }\n        }\n        else if (fullname === \"System.Boolean\") {\n            return (path_22) => ((value_31) => bool(path_22, value_31));\n        }\n        else if (fullname === \"Microsoft.FSharp.Core.Unit\") {\n            return (path_23) => ((value_32) => unit(path_23, value_32));\n        }\n        else if (fullname === \"System.String\") {\n            return (path_24) => ((value_33) => string(path_24, value_33));\n        }\n        else if (fullname === \"System.SByte\") {\n            return sbyte;\n        }\n        else if (fullname === \"System.Byte\") {\n            return byte;\n        }\n        else if (fullname === \"System.Int16\") {\n            return int16;\n        }\n        else if (fullname === \"System.UInt16\") {\n            return uint16;\n        }\n        else if (fullname === \"System.Int32\") {\n            return int;\n        }\n        else if (fullname === \"System.UInt32\") {\n            return uint32;\n        }\n        else if (fullname === \"System.Double\") {\n            return (path_25) => ((value_34) => float(path_25, value_34));\n        }\n        else if (fullname === \"System.Single\") {\n            return (path_26) => ((value_35) => float32(path_26, value_35));\n        }\n        else if (fullname === \"System.DateTime\") {\n            return (path_27) => ((value_36) => datetime(path_27, value_36));\n        }\n        else if (fullname === \"System.DateTimeOffset\") {\n            return (path_28) => ((value_37) => datetimeOffset(path_28, value_37));\n        }\n        else if (fullname === \"System.TimeSpan\") {\n            return (path_29) => ((value_38) => timespan(path_29, value_38));\n        }\n        else if (fullname === \"System.Guid\") {\n            return (path_30) => ((value_39) => guid(path_30, value_39));\n        }\n        else if (fullname === \"System.Object\") {\n            return (_arg1_6) => ((v) => (new FSharpResult$2(0, v)));\n        }\n        else {\n            return autoDecodeRecordsAndUnions(extra, caseStrategy, isOptional, t);\n        }\n    }\n    else {\n        const decoderRef = matchValue;\n        return (path) => ((value_1) => decoderRef.contents(path)(value_1));\n    }\n}\n\nfunction makeExtra(extra) {\n    if (extra != null) {\n        return map_3((_arg2, tupledArg) => (new FSharpRef(tupledArg[1])), extra.Coders);\n    }\n    else {\n        return empty_1();\n    }\n}\n\nexport class Auto {\n    constructor() {\n    }\n}\n\nexport function Auto$reflection() {\n    return class_type(\"Thoth.Json.Decode.Auto\", void 0, Auto);\n}\n\nexport function Auto_generateDecoderCached_7848D058(caseStrategy, extra, resolver) {\n    let y_1, y;\n    const t = value_40(resolver).ResolveType();\n    const caseStrategy_1 = defaultArg(caseStrategy, new CaseStrategy(0));\n    return Util_Cache$1__GetOrAdd_43981464(Util_CachedDecoders, (y_1 = (y = fullName(t), toString_12(caseStrategy_1) + y), defaultArg(map_4((e) => e.Hash, extra), \"\") + y_1), () => autoDecoder(makeExtra(extra), caseStrategy_1, false, t));\n}\n\nexport function Auto_generateDecoder_7848D058(caseStrategy, extra, resolver) {\n    const caseStrategy_1 = defaultArg(caseStrategy, new CaseStrategy(0));\n    const t = value_40(resolver).ResolveType();\n    return autoDecoder(makeExtra(extra), caseStrategy_1, false, t);\n}\n\nexport function Auto_fromString_Z5CB6BD(json, caseStrategy, extra, resolver) {\n    return fromString(uncurry(2, Auto_generateDecoder_7848D058(caseStrategy, extra, resolver)), json);\n}\n\nexport function Auto_unsafeFromString_Z5CB6BD(json, caseStrategy, extra, resolver) {\n    const matchValue = fromString(uncurry(2, Auto_generateDecoder_7848D058(caseStrategy, extra, resolver)), json);\n    if (matchValue.tag === 1) {\n        throw (new Error(matchValue.fields[0]));\n    }\n    else {\n        return matchValue.fields[0];\n    }\n}\n\n","import { Union } from \"../fable-library.3.1.11/Types.js\";\nimport { fullName, union_type, string_type, class_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { keyValueList } from \"../fable-library.3.1.11/MapUtil.js\";\nimport { Types_RequestProperties, Types_HttpRequestHeaders } from \"../Fable.Fetch.2.1.0/Fetch.fs.js\";\nimport { ofArray, empty, append, cons } from \"../fable-library.3.1.11/List.js\";\nimport { Auto_generateEncoderCached_Z127D9D79, toString } from \"../Thoth.Json.4.0.0/Encode.fs.js\";\nimport { value as value_2, map, defaultArg } from \"../fable-library.3.1.11/Option.js\";\nimport { FSharpResult$2 } from \"../fable-library.3.1.11/Choice.js\";\nimport { int32ToString, uncurry, curry } from \"../fable-library.3.1.11/Util.js\";\nimport { fromString, Auto_generateDecoderCached_7848D058 } from \"../Thoth.Json.4.0.0/Decode.fs.js\";\nimport { PromiseBuilder__Delay_62FBFDE1, PromiseBuilder__Run_212F1D4B } from \"../Fable.Promise.2.0.0/Promise.fs.js\";\nimport { promise } from \"../Fable.Promise.2.0.0/PromiseImpl.fs.js\";\n\nexport class FetchError extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"PreparingRequestFailed\", \"DecodingFailed\", \"FetchFailed\", \"NetworkError\"];\n    }\n}\n\nexport function FetchError$reflection() {\n    return union_type(\"Thoth.Fetch.FetchError\", [], FetchError, () => [[[\"Item\", class_type(\"System.Exception\")]], [[\"Item\", string_type]], [[\"Item\", class_type(\"Fetch.Types.Response\")]], [[\"Item\", class_type(\"System.Exception\")]]]);\n}\n\nexport function Helper_fetch(url, init) {\n    return fetch(url, keyValueList(init, 1));\n}\n\nexport function Helper_withContentTypeJson(data, headers) {\n    if (data != null) {\n        return cons(new Types_HttpRequestHeaders(11, \"application/json\"), headers);\n    }\n    else {\n        return headers;\n    }\n}\n\nexport function Helper_encode(data, caseStrategy, extra, dataResolver) {\n    return toString(0, Auto_generateEncoderCached_Z127D9D79(caseStrategy, extra, void 0, dataResolver)(data));\n}\n\nexport function Helper_withBody(data, caseStrategy, extra, dataResolver, properties) {\n    return defaultArg(map((data_1) => cons(new Types_RequestProperties(2, Helper_encode(data_1, caseStrategy, extra, dataResolver)), properties), data), properties);\n}\n\nexport function Helper_withProperties(custom, properties) {\n    return defaultArg(map((list2) => append(properties, list2), custom), properties);\n}\n\nexport function Helper_eitherUnit(responseResolver, cont) {\n    if (fullName(responseResolver.ResolveType()) === \"Microsoft.FSharp.Core.Unit\") {\n        return new FSharpResult$2(0, void 0);\n    }\n    else {\n        return cont();\n    }\n}\n\nexport function Helper_resolve(response, caseStrategy, extra, decoder, responseResolver) {\n    const decoder_1 = defaultArg(curry(2, decoder), Auto_generateDecoderCached_7848D058(caseStrategy, extra, responseResolver));\n    let eitherUnitOr;\n    const responseResolver_1 = value_2(responseResolver);\n    eitherUnitOr = ((cont) => Helper_eitherUnit(responseResolver_1, cont));\n    return PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (((response.ok) ? PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (response.text().then(((_arg1) => (Promise.resolve(eitherUnitOr(() => {\n        const matchValue = fromString(uncurry(2, decoder_1), _arg1);\n        return (matchValue.tag === 1) ? (new FSharpResult$2(1, new FetchError(1, matchValue.fields[0]))) : (new FSharpResult$2(0, matchValue.fields[0]));\n    })))))))) : (Promise.resolve((new FSharpResult$2(1, new FetchError(2, response)))))).then(((_arg2) => (Promise.resolve(_arg2)))))));\n}\n\nexport function Helper_message(error) {\n    switch (error.tag) {\n        case 1: {\n            return \"[Thoth.Fetch] Error while decoding the response:\\n\\n\" + error.fields[0];\n        }\n        case 2: {\n            const response = error.fields[0];\n            return ((((\"[Thoth.Fetch] Request failed:\\n\\n\" + int32ToString(response.status)) + \" \") + (response.statusText)) + \" for URL \") + (response.url);\n        }\n        case 3: {\n            return \"[Thoth.Fetch] A network error occured:\\n\\n\" + error.fields[0].message;\n        }\n        default: {\n            return \"[Thoth.Fetch] Request preparation failed:\\n\\n\" + error.fields[0].message;\n        }\n    }\n}\n\nexport class Fetch {\n    constructor() {\n    }\n}\n\nexport function Fetch$reflection() {\n    return class_type(\"Thoth.Fetch.Fetch\", void 0, Fetch);\n}\n\nexport function Fetch_tryFetchAs_25B10BBE(url, decoder, data, httpMethod, properties, headers, caseStrategy, extra, responseResolver, dataResolver) {\n    let headers_2;\n    try {\n        const properties_3 = Helper_withProperties(properties, Helper_withBody(data, caseStrategy, extra, dataResolver, ofArray([new Types_RequestProperties(0, defaultArg(httpMethod, \"GET\")), (headers_2 = Helper_withContentTypeJson(data, defaultArg(headers, empty())), new Types_RequestProperties(1, keyValueList(headers_2, 0)))])));\n        const pr = PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (Helper_fetch(url, properties_3).then(((_arg1) => (Helper_resolve(_arg1, caseStrategy, extra, decoder, responseResolver)))))));\n        return pr.then(void 0, ((arg) => (new FSharpResult$2(1, new FetchError(3, arg)))));\n    }\n    catch (exn) {\n        return PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (Promise.resolve((new FSharpResult$2(1, new FetchError(0, exn)))))));\n    }\n}\n\nexport function Fetch_fetchAs_25B10BBE(url, decoder, data, httpMethod, properties, headers, caseStrategy, extra, responseResolver, dataResolver) {\n    return PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => (Fetch_tryFetchAs_25B10BBE(url, decoder, data, httpMethod, properties, headers, caseStrategy, extra, responseResolver, dataResolver).then(((_arg2) => {\n        const result = _arg2;\n        let response_1;\n        if (result.tag === 1) {\n            throw (new Error(Helper_message(result.fields[0])));\n        }\n        else {\n            response_1 = result.fields[0];\n        }\n        return Promise.resolve(response_1);\n    })))));\n}\n\nexport function Fetch_get_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_fetchAs_25B10BBE(url, decoder, data, void 0, properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_tryGet_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_tryFetchAs_25B10BBE(url, decoder, data, void 0, properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_post_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_fetchAs_25B10BBE(url, decoder, data, \"POST\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_tryPost_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_tryFetchAs_25B10BBE(url, decoder, data, \"POST\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_put_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_fetchAs_25B10BBE(url, decoder, data, \"PUT\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_tryPut_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_tryFetchAs_25B10BBE(url, decoder, data, \"PUT\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_patch_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_fetchAs_25B10BBE(url, decoder, data, \"PATCH\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_tryPatch_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_tryFetchAs_25B10BBE(url, decoder, data, \"PATCH\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_delete_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_fetchAs_25B10BBE(url, decoder, data, \"DELETE\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\nexport function Fetch_tryDelete_5760677E(url, data, properties, headers, caseStrategy, extra, decoder, responseResolver, dataResolver) {\n    return Fetch_tryFetchAs_25B10BBE(url, decoder, data, \"DELETE\", properties, headers, caseStrategy, extra, responseResolver, dataResolver);\n}\n\n","import { AgGridReact } from \"ag-grid-react\";\nimport * as ag$002Dgrid from \"ag-grid-community/dist/styles/ag-grid.css\";\nimport * as ag$002Dtheme$002Dalpine from \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport * as ag$002Dtheme$002Dalpine$002Ddark from \"ag-grid-community/dist/styles/ag-theme-alpine-dark.css\";\nimport * as ag$002Dtheme$002Dbalham from \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport * as ag$002Dtheme$002Dbalham$002Ddark from \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport * as ag$002Dtheme$002Dmaterial from \"ag-grid-community/dist/styles/ag-theme-material.css\";\nimport { Union } from \"../fable-library.3.1.11/Types.js\";\nimport { union_type } from \"../fable-library.3.1.11/Reflection.js\";\nimport { printf, toText } from \"../fable-library.3.1.11/String.js\";\nimport { createElement } from \"react\";\nimport { curry } from \"../fable-library.3.1.11/Util.js\";\nimport { map } from \"../fable-library.3.1.11/Array.js\";\n\nexport const agGrid = AgGridReact;\n\n\n\n\n\n\n\nexport class RowSelection extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Single\", \"Multiple\"];\n    }\n}\n\nexport function RowSelection$reflection() {\n    return union_type(\"Feliz.AgGrid.RowSelection\", [], RowSelection, () => [[], []]);\n}\n\nexport class RowFilter extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Number\", \"Text\", \"Date\"];\n    }\n}\n\nexport function RowFilter$reflection() {\n    return union_type(\"Feliz.AgGrid.RowFilter\", [], RowFilter, () => [[], [], []]);\n}\n\nexport function RowFilter__get_FilterText(this$) {\n    return toText(printf(\"ag%OColumnFilter\"))(this$);\n}\n\nexport class DOMLayout extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Normal\", \"AutoHeight\", \"Print\"];\n    }\n}\n\nexport function DOMLayout$reflection() {\n    return union_type(\"Feliz.AgGrid.DOMLayout\", [], DOMLayout, () => [[], [], []]);\n}\n\nexport function DOMLayout__get_LayoutText(this$) {\n    switch (this$.tag) {\n        case 1: {\n            return \"autoHeight\";\n        }\n        case 2: {\n            return \"print\";\n        }\n        default: {\n            return \"normal\";\n        }\n    }\n}\n\nexport const ThemeClass_Alpine = \"ag-theme-alpine\";\n\nexport const ThemeClass_AlpineDark = \"ag-theme-alpine-dark\";\n\nexport const ThemeClass_Balham = \"ag-theme-balham\";\n\nexport const ThemeClass_BalhamDark = \"ag-theme-balham-dark\";\n\nexport const ThemeClass_Material = \"ag-theme-material\";\n\nexport function columnDefProp() {\n    return (value) => value;\n}\n\nexport function columnDefProps() {\n    return (value) => value;\n}\n\nexport class ColumnType extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"RightAligned\", \"NumericColumn\"];\n    }\n}\n\nexport function ColumnType$reflection() {\n    return union_type(\"Feliz.AgGrid.ColumnType\", [], ColumnType, () => [[], []]);\n}\n\nexport function openClosed(_arg1) {\n    if (_arg1) {\n        return \"open\";\n    }\n    else {\n        return \"closed\";\n    }\n}\n\nexport function CellRendererComponent(cellRendererComponentInputProps) {\n    const p = cellRendererComponentInputProps.p;\n    return cellRendererComponentInputProps.render(p.value)(p.data);\n}\n\nexport function ColumnDef$2_cellRendererFramework_2C70A0D6(render) {\n    return columnDefProp()([\"cellRendererFramework\", (p) => createElement(CellRendererComponent, {\n        render: curry(2, render),\n        p: p,\n    })]);\n}\n\nexport function columnGroupDefProp() {\n    return (value) => value;\n}\n\nexport function agGridProp(x) {\n    return x;\n}\n\nexport function AgGrid_onColumnGroupOpened_127B6E36(callback) {\n    return agGridProp([\"onColumnGroupOpened\", (ev) => {\n        callback({\n            AutoSizeGroupColumns: () => {\n                void setTimeout(() => {\n                    const colIds = map((x) => x.colId, ev.columnGroup.children);\n                    ev.columnApi.autoSizeColumns(colIds);\n                }, 0);\n            },\n        });\n    }]);\n}\n\nexport function AgGrid_onGridReady_Z77094E79(callback) {\n    return agGridProp([\"onGridReady\", (ev) => {\n        callback({\n            AutoSizeAllColumns: () => {\n                void setTimeout(() => {\n                    const colIds = map((x) => x.colId, ev.columnApi.getAllColumns());\n                    ev.columnApi.autoSizeColumns(colIds);\n                }, 0);\n            },\n            Export: () => (ev.api.exportDataAsCsv({})),\n        });\n    }]);\n}\n\n","import { obj_type, array_type, option_type, int32_type, record_type, string_type, class_type } from \"./.fable/fable-library.3.1.11/Reflection.js\";\nimport { Record } from \"./.fable/fable-library.3.1.11/Types.js\";\nimport { createElement } from \"react\";\nimport { Interop_reactApi } from \"./.fable/Feliz.1.65.0/Interop.fs.js\";\nimport cit$002Dlogo from \"./cit-logo.png\";\nimport { cons, singleton, ofArray } from \"./.fable/fable-library.3.1.11/List.js\";\nimport { uncurry, createObj } from \"./.fable/fable-library.3.1.11/Util.js\";\nimport { Helpers_combineClasses } from \"./.fable/Feliz.Bulma.2.18.0/ElementBuilders.fs.js\";\nimport { printf, interpolate, toText } from \"./.fable/fable-library.3.1.11/String.js\";\nimport { append, toArray, map, delay, toList } from \"./.fable/fable-library.3.1.11/Seq.js\";\nimport { useReact_useEffectOnce_3A5B6456, useFeliz_React__React_useState_Static_1505 } from \"./.fable/Feliz.1.65.0/React.fs.js\";\nimport { PromiseBuilder__Delay_62FBFDE1, PromiseBuilder__Run_212F1D4B } from \"./.fable/Fable.Promise.2.0.0/Promise.fs.js\";\nimport { promise } from \"./.fable/Fable.Promise.2.0.0/PromiseImpl.fs.js\";\nimport { Fetch_get_5760677E } from \"./.fable/Thoth.Fetch.2.0.0/Fetch.fs.js\";\nimport { CaseStrategy } from \"./.fable/Thoth.Json.4.0.0/Types.fs.js\";\nimport { columnGroupDefProp, openClosed, ColumnType, RowFilter, RowFilter__get_FilterText, AgGrid_onColumnGroupOpened_127B6E36, DOMLayout, DOMLayout__get_LayoutText, columnDefProp, agGridProp, agGrid, ThemeClass_Balham } from \"./.fable/Feliz.AgGrid.0.0.4/AgGrid.fs.js\";\nimport { parse } from \"./.fable/fable-library.3.1.11/Date.js\";\n\nexport class CitColors {\n    constructor() {\n    }\n}\n\nexport function CitColors$reflection() {\n    return class_type(\"App.CitColors\", void 0, CitColors);\n}\n\nexport function CitColors_get_lightBlue() {\n    return \"#40a8b7\";\n}\n\nexport function CitColors_get_green() {\n    return \"#8cbf41\";\n}\n\nexport function CitColors_get_yellow() {\n    return \"#fec903\";\n}\n\nexport function CitColors_get_red() {\n    return \"#e1053a\";\n}\n\nexport function CitColors_get_orange() {\n    return \"#e97305\";\n}\n\nexport function CitColors_get_darkBlue() {\n    return \"#102035\";\n}\n\nexport class LinkData extends Record {\n    constructor(Text$, Href) {\n        super();\n        this.Text = Text$;\n        this.Href = Href;\n    }\n}\n\nexport function LinkData$reflection() {\n    return record_type(\"App.LinkData\", [], LinkData, () => [[\"Text\", string_type], [\"Href\", string_type]]);\n}\n\nexport class StyledComponents {\n    constructor() {\n    }\n}\n\nexport function StyledComponents$reflection() {\n    return class_type(\"App.StyledComponents\", void 0, StyledComponents);\n}\n\nexport function StyledComponents_Container_6E3A73D(children) {\n    return createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 50,\n            maxWidth: 1000,\n            margin: (0 + \"px \") + \"auto\",\n        },\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    });\n}\n\nexport function StyledComponents_Row_6E3A73D(children) {\n    return createElement(\"div\", {\n        style: {\n            alignItems: \"center\",\n            display: \"flex\",\n        },\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    });\n}\n\nexport function StyledComponents_NavbarLink(label, link) {\n    return createElement(\"a\", {\n        style: {\n            margin: ((((((20 + \"px \") + 0) + \"px \") + 20) + \"px \") + 20) + \"px\",\n            color: \"white\",\n            fontSize: 20 + \"px\",\n            fontWeight: \"bold\",\n        },\n        href: link,\n        children: label,\n    });\n}\n\nexport function StyledComponents_Navbar() {\n    let props_1;\n    const logo = cit$002Dlogo;\n    return createElement(\"div\", {\n        style: {\n            padding: ((0 + \"px \") + 20) + \"px\",\n            backgroundColor: CitColors_get_darkBlue(),\n            height: 70,\n            color: \"white\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n        children: Interop_reactApi.Children.toArray([createElement(\"div\", {\n            style: {\n                width: 1000,\n                margin: (0 + \"px \") + \"auto\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                padding: ((0 + \"px \") + 40) + \"px\",\n            },\n            children: Interop_reactApi.Children.toArray([StyledComponents_Row_6E3A73D(ofArray([createElement(\"img\", {\n                style: {\n                    height: 50,\n                },\n                src: logo,\n            }), (props_1 = ofArray([[\"style\", {\n                color: \"#FFFFFF\",\n                fontSize: 1.5 + \"rem\",\n            }], [\"children\", \"Compositional IT\"]]), createElement(\"h1\", createObj(Helpers_combineClasses(\"title\", props_1))))]))]),\n        })]),\n    });\n}\n\nexport function StyledComponents_SubHeading_Z721C83C5(label) {\n    const props = ofArray([[\"style\", {\n        borderBottom: (((2 + \"px \") + \"solid\") + \" \") + CitColors_get_darkBlue(),\n        marginTop: 30,\n        paddingBottom: 10,\n    }], [\"children\", label]]);\n    return createElement(\"h2\", createObj(Helpers_combineClasses(\"subtitle\", props)));\n}\n\nexport function StyledComponents_Link_Z54C73B66(p) {\n    return createElement(\"a\", {\n        style: {\n            color: CitColors_get_darkBlue(),\n            fontWeight: \"bold\",\n            borderBottom: (((2 + \"px \") + \"solid\") + \" \") + CitColors_get_darkBlue(),\n        },\n        children: p.Text,\n        href: p.Href,\n    });\n}\n\nexport function StyledComponents_Description(wrapperName, wrappedComponent, links) {\n    let value, elms, children_2;\n    const children_5 = ofArray([StyledComponents_SubHeading_Z721C83C5(wrapperName), (value = toText(interpolate(\"Feliz style bindings for %P()\", [wrappedComponent])), createElement(\"b\", {\n        children: [value],\n    })), (elms = singleton((children_2 = toList(delay(() => map((link) => {\n        const children = singleton(StyledComponents_Link_Z54C73B66(link));\n        return createElement(\"li\", {\n            children: Interop_reactApi.Children.toArray(Array.from(children)),\n        });\n    }, links))), createElement(\"ul\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children_2)),\n    }))), createElement(\"div\", {\n        className: \"content\",\n        children: Interop_reactApi.Children.toArray(Array.from(elms)),\n    }))]);\n    return createElement(\"div\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children_5)),\n    });\n}\n\nexport function StyledComponents_HeadingWithContent(title, children) {\n    const children_1 = ofArray([StyledComponents_SubHeading_Z721C83C5(title), children]);\n    return createElement(\"div\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children_1)),\n    });\n}\n\nexport function StyledComponents_Checkbox_58BC8925(updateProp) {\n    const props = ofArray([[\"style\", {\n        height: 30,\n        width: 30,\n    }], [\"onClick\", updateProp]]);\n    return createElement(\"input\", createObj(cons([\"type\", \"checkbox\"], Helpers_combineClasses(\"checkbox\", props))));\n}\n\nexport function StyledComponents_CodeBlock_Z721C83C5(code) {\n    return createElement(\"pre\", {\n        style: {\n            padding: 20,\n            fontSize: 15 + \"px\",\n            backgroundColor: \"#f5f5f5\",\n            borderRadius: 5,\n        },\n        children: code,\n    });\n}\n\nexport class Olympian extends Record {\n    constructor(Athlete, Age, Country, Year, Date$, Sport, Gold, Silver, Bronze, Total) {\n        super();\n        this.Athlete = Athlete;\n        this.Age = Age;\n        this.Country = Country;\n        this.Year = (Year | 0);\n        this.Date = Date$;\n        this.Sport = Sport;\n        this.Gold = (Gold | 0);\n        this.Silver = (Silver | 0);\n        this.Bronze = (Bronze | 0);\n        this.Total = (Total | 0);\n    }\n}\n\nexport function Olympian$reflection() {\n    return record_type(\"App.Olympian\", [], Olympian, () => [[\"Athlete\", string_type], [\"Age\", option_type(int32_type)], [\"Country\", string_type], [\"Year\", int32_type], [\"Date\", string_type], [\"Sport\", string_type], [\"Gold\", int32_type], [\"Silver\", int32_type], [\"Bronze\", int32_type], [\"Total\", int32_type]]);\n}\n\nexport class Components {\n    constructor() {\n    }\n}\n\nexport function Components$reflection() {\n    return class_type(\"App.Components\", void 0, Components);\n}\n\nexport function Components_Demo() {\n    let children_1, arg10_2, arg00_2;\n    const patternInput = useFeliz_React__React_useState_Static_1505([]);\n    useReact_useEffectOnce_3A5B6456(() => {\n        void PromiseBuilder__Run_212F1D4B(promise, PromiseBuilder__Delay_62FBFDE1(promise, () => {\n            const url = toText(printf(\"https://www.ag-grid.com/example-assets/olympic-winners.json\"));\n            return Fetch_get_5760677E(url, void 0, void 0, void 0, new CaseStrategy(1), void 0, uncurry(2, void 0), {\n                ResolveType: () => array_type(Olympian$reflection()),\n            }, {\n                ResolveType: () => obj_type,\n            });\n        })).then((data) => {\n            patternInput[1](data);\n        });\n    });\n    return StyledComponents_Container_6E3A73D(singleton(createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            flexDirection: \"column\",\n        },\n        children: Interop_reactApi.Children.toArray([(children_1 = ofArray([StyledComponents_Description(\"Feliz.AgGrid\", \"ag-grid\", [new LinkData(\"GitHub repo\", \"https://github.com/CompositionalIT/feliz-ag-grid\"), new LinkData(\"NuGet package\", \"https://www.nuget.org/packages/Feliz.AgGrid\"), new LinkData(\"Corresponding npm package\", \"https://www.npmjs.com/package/ag-grid-react\")]), StyledComponents_HeadingWithContent(\"Demo\", createElement(\"div\", {\n            className: ThemeClass_Balham,\n            children: Interop_reactApi.Children.toArray([Interop_reactApi.createElement(agGrid, createObj([agGridProp([\"rowData\", patternInput[0]]), agGridProp([\"pagination\", true]), agGridProp([\"defaultColDef\", createObj([columnDefProp()([\"resizable\", true]), columnDefProp()([\"sortable\", true]), columnDefProp()([\"editable\", (p) => {\n                const _arg1 = p.data;\n                return false;\n            }])])]), agGridProp([\"domLayout\", DOMLayout__get_LayoutText(new DOMLayout(1))]), agGridProp([\"paginationPageSize\", 20]), AgGrid_onColumnGroupOpened_127B6E36((x) => {\n                x.AutoSizeGroupColumns();\n            }), agGridProp([\"columnDefs\", toArray([createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(1))]), columnDefProp()([\"headerName\", \"Athlete\"]), columnDefProp()([\"valueGetter\", (x_2) => x_2.data.Athlete])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(0))]), columnDefProp()([\"type\", ((new ColumnType(1)).tag === 1) ? \"numericColumn\" : \"rightAligned\"]), columnDefProp()([\"headerName\", \"Age\"]), columnDefProp()([\"valueGetter\", (x_4) => x_4.data.Age]), columnDefProp()([\"valueFormatter\", (p_1) => {\n                const _arg2 = p_1.data;\n                const age = p_1.value;\n                return (age == null) ? \"Unknown\" : toText(interpolate(\"%P() years\", [age]));\n            }])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(1))]), columnDefProp()([\"headerName\", \"Country\"]), columnDefProp()([\"valueGetter\", (x_6) => x_6.data.Country])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(2))]), columnDefProp()([\"headerName\", \"Date\"]), columnDefProp()([\"valueGetter\", (x_7) => parse(x_7.data.Date)])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(1))]), columnDefProp()([\"headerName\", \"Sport\"]), columnDefProp()([\"valueGetter\", (x_9) => x_9.data.Sport])]), (arg10_2 = ofArray([createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(0))]), columnDefProp()([\"headerName\", \"Total\"]), columnDefProp()([\"type\", ((new ColumnType(1)).tag === 1) ? \"numericColumn\" : \"rightAligned\"]), columnDefProp()([\"valueGetter\", (x_11) => x_11.data.Total]), columnDefProp()([\"columnGroupShow\", openClosed(true)])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(0))]), columnDefProp()([\"headerName\", \"Gold\"]), columnDefProp()([\"type\", ((new ColumnType(1)).tag === 1) ? \"numericColumn\" : \"rightAligned\"]), columnDefProp()([\"valueGetter\", (x_13) => x_13.data.Gold]), columnDefProp()([\"columnGroupShow\", openClosed(false)])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(0))]), columnDefProp()([\"headerName\", \"Silver\"]), columnDefProp()([\"type\", ((new ColumnType(1)).tag === 1) ? \"numericColumn\" : \"rightAligned\"]), columnDefProp()([\"valueGetter\", (x_15) => x_15.data.Silver]), columnDefProp()([\"columnGroupShow\", openClosed(false)])]), createObj([columnDefProp()([\"filter\", RowFilter__get_FilterText(new RowFilter(0))]), columnDefProp()([\"headerName\", \"Bronze\"]), columnDefProp()([\"type\", ((new ColumnType(1)).tag === 1) ? \"numericColumn\" : \"rightAligned\"]), columnDefProp()([\"valueGetter\", (x_17) => x_17.data.Bronze]), columnDefProp()([\"columnGroupShow\", openClosed(false)])])]), (arg00_2 = ofArray([columnGroupDefProp()([\"headerName\", \"Medal\"]), columnGroupDefProp()([\"marryChildren\", true]), columnGroupDefProp()([\"openByDefault\", true])]), createObj(append([columnGroupDefProp()([\"children\", toArray(arg10_2)])], arg00_2))))])])]))]),\n        })), StyledComponents_HeadingWithContent(\"Installation\", StyledComponents_CodeBlock_Z721C83C5(\"\\ncd ./project\\nfemto install Feliz.AgGrid\")), StyledComponents_HeadingWithContent(\"Sample Code\", StyledComponents_CodeBlock_Z721C83C5(\"\\nopen Feliz.AgGrid\\n\\ntype Olympian =\\n    { Athlete: string\\n      Age: int option\\n      Country: string\\n      Year: int\\n      Date: DateTime\\n      Sport: string\\n      Gold: int\\n      Silver: int\\n      Bronze: int\\n      Total: int }\\n\\nHtml.div [\\n    prop.className ThemeClass.Balham\\n    prop.children [\\n        AgGrid.grid [\\n            AgGrid.rowData olympicData\\n            AgGrid.pagination true\\n            AgGrid.defaultColDef [\\n                ColumnDef.resizable true\\n                ColumnDef.sortable true\\n                ColumnDef.editable (fun _ -\\u003e false)\\n            ]\\n            AgGrid.domLayout AutoHeight\\n            AgGrid.paginationPageSize 20\\n            AgGrid.onColumnGroupOpened (fun x -\\u003e x.AutoSizeGroupColumns())\\n            AgGrid.columnDefs [\\n                ColumnDef.create\\u003cstring\\u003e [\\n                    ColumnDef.filter RowFilter.Text\\n                    ColumnDef.headerName \\\"Athlete\\\"\\n                    ColumnDef.valueGetter (fun x -\\u003e x.Athlete)\\n                ]\\n                ColumnDef.create\\u003cint option\\u003e [\\n                    ColumnDef.filter RowFilter.Number\\n                    ColumnDef.columnType ColumnType.NumericColumn\\n                    ColumnDef.headerName \\\"Age\\\"\\n                    ColumnDef.valueGetter (fun x -\\u003e x.Age)\\n                    ColumnDef.valueFormatter (fun age _ -\\u003e\\n                        match age with\\n                        | Some age -\\u003e $\\\"{age} years\\\"\\n                        | None -\\u003e \\\"Unknown\\\" )\\n                ]\\n                ColumnDef.create\\u003cstring\\u003e [\\n                    ColumnDef.filter RowFilter.Text\\n                    ColumnDef.headerName \\\"Country\\\"\\n                    ColumnDef.valueGetter (fun x -\\u003e x.Country)\\n                ]\\n                ColumnDef.create\\u003cDateTime\\u003e [\\n                    ColumnDef.filter RowFilter.Date\\n                    ColumnDef.headerName \\\"Date\\\"\\n                    ColumnDef.valueGetter (fun d -\\u003e DateTime.Parse(d.Date))\\n                ]\\n                ColumnDef.create\\u003cstring\\u003e [\\n                    ColumnDef.filter RowFilter.Text\\n                    ColumnDef.headerName \\\"Sport\\\"\\n                    ColumnDef.valueGetter (fun x -\\u003e x.Sport)\\n                ]\\n                ColumnGroup.create [\\n                    ColumnGroup.headerName \\\"Medal\\\"\\n                    ColumnGroup.marryChildren true\\n                    ColumnGroup.openByDefault true\\n                ] [\\n                    ColumnDef.create\\u003cint\\u003e [\\n                        ColumnDef.filter RowFilter.Number\\n                        ColumnDef.headerName \\\"Total\\\"\\n                        ColumnDef.columnType ColumnType.NumericColumn\\n                        ColumnDef.valueGetter (fun x -\\u003e x.Total)\\n                        ColumnDef.columnGroupShow true\\n                    ]\\n                    ColumnDef.create\\u003cint\\u003e [\\n                        ColumnDef.filter RowFilter.Number\\n                        ColumnDef.headerName \\\"Gold\\\"\\n                        ColumnDef.columnType ColumnType.NumericColumn\\n                        ColumnDef.valueGetter (fun x -\\u003e x.Gold)\\n                        ColumnDef.columnGroupShow false\\n\\n                    ]\\n                    ColumnDef.create\\u003cint\\u003e [\\n                        ColumnDef.filter RowFilter.Number\\n                        ColumnDef.headerName \\\"Silver\\\"\\n                        ColumnDef.columnType ColumnType.NumericColumn\\n                        ColumnDef.valueGetter (fun x -\\u003e x.Silver)\\n                        ColumnDef.columnGroupShow false\\n\\n                    ]\\n                    ColumnDef.create\\u003cint\\u003e [\\n                        ColumnDef.filter RowFilter.Number\\n                        ColumnDef.headerName \\\"Bronze\\\"\\n                        ColumnDef.columnType ColumnType.NumericColumn\\n                        ColumnDef.valueGetter (fun x -\\u003e x.Bronze)\\n                        ColumnDef.columnGroupShow false\\n                    ]\\n                ]\\n            ]\\n        ]\\n    ]\\n]\\n\"))]), createElement(\"div\", {\n            children: Interop_reactApi.Children.toArray(Array.from(children_1)),\n        }))]),\n    })));\n}\n\nexport function Components_Documentation() {\n    const children = ofArray([StyledComponents_Navbar(), createElement(Components_Demo, null)]);\n    return createElement(\"div\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    });\n}\n\n","import { render } from \"react-dom\";\nimport { createElement } from \"react\";\nimport { Components_Documentation } from \"./Components.fs.js\";\nimport \"./styles/global.scss\";\n\n\nrender(createElement(Components_Documentation, null), document.getElementById(\"feliz-app\"));\n\n"],"sourceRoot":""}